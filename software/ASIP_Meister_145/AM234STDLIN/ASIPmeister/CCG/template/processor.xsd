<?xml version="1.0"?>

<!--
/*
 * Copyright (c) 2007 NEC Corpoartion.
 * All rights reserved.
 * Use and distribution of this program without permission are not allowed.
 *
 * This is part of CCG (C compiler generator).
 * 
 */
-->

<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema">

<!--
<register_type length="32">DP_type</register_type>
-->
<xsd:complexType name="register_type_t">
  <xsd:simpleContent>
    <xsd:extension base="xsd:string">
      <xsd:attribute name="length" type="xsd:positiveInteger" use="required"/>
    </xsd:extension>
  </xsd:simpleContent>
</xsd:complexType>



<!--
<register_bank type="DP_type" size="8" prefix="DP" base="false" letter="k">ADDRESS_REGISTERS</register_bank>
-->
<xsd:simpleType name="letter_t">
  <xsd:restriction base="xsd:string">
    <xsd:pattern value="(\s|[a-z]|[A-Z])"/>
  </xsd:restriction>
</xsd:simpleType>

<xsd:complexType name="register_bank_t">
  <xsd:simpleContent>
    <xsd:extension base="xsd:string">
      <xsd:attribute name="type" type="xsd:string" use="required"/>
      <xsd:attribute name="size" type="xsd:positiveInteger" use="required"/>
      <xsd:attribute name="prefix" type="xsd:string" use="required"/>
      <xsd:attribute name="base" type="xsd:boolean" default="false"/>
      <xsd:attribute name="letter" type="letter_t" default=" "/>
    </xsd:extension>
  </xsd:simpleContent>
</xsd:complexType>

<!--
<register_group type="???_registers" orig="0,2,4,...,?">DP</register_group>
-->
<xsd:simpleType name="separated_words_t">
  <xsd:restriction base="xsd:string">
    <xsd:pattern value="([\d\w]+,)*[\d\w]+"/>
  </xsd:restriction>
</xsd:simpleType>

<xsd:complexType name="register_group_t">
  <xsd:simpleContent>
    <xsd:extension base="separated_words_t">
      <xsd:attribute name="name"   type="xsd:string" use="required"/>
    </xsd:extension>
  </xsd:simpleContent>
</xsd:complexType>

<!--
field_type_t
  register
  immediate
  opcode
  unused
-->
<xsd:simpleType name="field_type_t">
  <xsd:restriction base="xsd:string">
    <xsd:enumeration value="opcode"/>
    <xsd:enumeration value="register"/>
    <xsd:enumeration value="immediate"/>
    <xsd:enumeration value="multiple02"/>
    <xsd:enumeration value="multiple04"/>
    <xsd:enumeration value="multiple08"/>
    <xsd:enumeration value="multiple16"/>
    <xsd:enumeration value="multiple32"/>
    <xsd:enumeration value="power2"/>
    <xsd:enumeration value="unused"/>
  </xsd:restriction>
</xsd:simpleType>

<!--
<field type="???" length="" subtype="???" value="0">hoge</field>
-->
<xsd:complexType name="field_t">
  <xsd:simpleContent>
    <xsd:extension base="xsd:string">
      <xsd:attribute name="type"    type="field_type_t" use="required"/>
      <xsd:attribute name="subtype" type="xsd:string" default=""/>
      <xsd:attribute name="length"  type="xsd:nonNegativeInteger" use="required"/>
      <xsd:attribute name="value"   type="xsd:string" default="0"/>
      <xsd:attribute name="disas"   type="xsd:string" default=""/>
    </xsd:extension>
  </xsd:simpleContent>
</xsd:complexType>


<!-- Input and output Operands -->

<xsd:complexType name="inout_operand_t">
  <xsd:simpleContent>
    <xsd:extension base="xsd:string">
      <xsd:attribute name="type"  type="xsd:string"  use="required"/>
      <xsd:attribute name="width" type="xsd:positiveInteger" use="required"/>
    </xsd:extension>
  </xsd:simpleContent>
</xsd:complexType>
<!--
<xsd:complexType name="inout_register_t">
  <xsd:simpleContent>
    <xsd:extension base="xsd:string">
      <xsd:attribute name="type"  type="xsd:string"  use="required"/>
    </xsd:extension>
  </xsd:simpleContent>
</xsd:complexType>

<xsd:complexType name="inout_immediate_t">
  <xsd:simpleContent>
    <xsd:extension base="xsd:string">
      <xsd:attribute name="type"  type="xsd:string"  use="required"/>
    </xsd:extension>
  </xsd:simpleContent>
</xsd:complexType>
-->
<xsd:complexType name="inout_memory_base_t">
  <xsd:simpleContent>
    <xsd:extension base="xsd:string">
      <xsd:attribute name="type"   type="xsd:string" use="required"/>
      <xsd:attribute name="modify" type="xsd:string" default="none"/>
    </xsd:extension>
  </xsd:simpleContent>
</xsd:complexType>

<xsd:complexType name="inout_memory_offset_t">
  <xsd:simpleContent>
    <xsd:extension base="xsd:string">
      <xsd:attribute name="type"   type="xsd:string" use="required"/>
      <xsd:attribute name="width"  type="xsd:positiveInteger" use="required"/>
      <xsd:attribute name="modify" type="xsd:string"/>
    </xsd:extension>
  </xsd:simpleContent>
</xsd:complexType>

<xsd:complexType name="inout_memory_modifier_t">
  <xsd:simpleContent>
    <xsd:extension base="xsd:string">
      <xsd:attribute name="type"   type="xsd:string" use="required"/>
    </xsd:extension>
  </xsd:simpleContent>
</xsd:complexType>

<xsd:complexType name="inout_memory_t">
  <xsd:sequence>
    <xsd:element name="base"     type="inout_memory_base_t"/>
    <xsd:element name="offset"   type="inout_memory_offset_t" minOccurs="0" maxOccurs="unbounded"/>
    <xsd:element name="modifier" type="inout_memory_modifier_t" minOccurs="0" maxOccurs="unbounded"/>
  </xsd:sequence>
</xsd:complexType>

<xsd:complexType name="inout_memory_with_attributes_t">
  <xsd:complexContent>
    <xsd:extension base="inout_memory_t">
      <xsd:attribute name="width"   type="xsd:positiveInteger" use="required"/>
    </xsd:extension>
  </xsd:complexContent>
</xsd:complexType>


<!--
<input>
  <operand type="???">rm</operand>
  <operand type="???">rn</operand>
  <memory width="16">
    <base type="???" modify="???">ds</base>
    <offset type="???" modify="???">imm8</offset>
  </memory>
</input>

<output>
  ....
  ....
</output>
-->
<xsd:complexType name="inout_t">
  <xsd:sequence>
    <xsd:element name="operand" type="inout_operand_t"  minOccurs="0" maxOccurs="unbounded"/>
    <xsd:element name="memory"  type="inout_memory_with_attributes_t" minOccurs="0" maxOccurs="unbounded"/>
  </xsd:sequence>
</xsd:complexType>


<!--
<insn>
  <mnemonic></mnemonic>
  <field></field>
  ...
  <syntax></syntax>
  <operation></operation>
  <description></description>
</insn>
-->
<xsd:complexType name="insn_t">
  <xsd:sequence>
    <xsd:element name="mnemonic"    type="xsd:string"/>
    <xsd:element name="syntax"      type="xsd:string"/>
    <xsd:element name="length"      type="xsd:positiveInteger" minOccurs="0" maxOccurs="1"/>
    <xsd:element name="field"       type="field_t" minOccurs="1" maxOccurs="unbounded"/>
    <xsd:element name="input"       type="inout_t"/>
    <xsd:element name="output"      type="inout_t"/>
    <xsd:element name="clobber"     type="inout_t" minOccurs="0" maxOccurs="unbounded"/>
    <xsd:element name="latency"     type="xsd:positiveInteger" minOccurs="0" maxOccurs="1"/>
    <xsd:element name="pipeline"    type="xsd:string" minOccurs="0" maxOccurs="1"/>
    <xsd:element name="description" type="xsd:string"/>
<!--
    <xsd:element name="operation" type="xsd:string" minOccurs="0" maxOccurs="1"/>
-->
  </xsd:sequence>
  <xsd:attribute name="void_intrinsic" type="xsd:boolean" default="false"/>
  <xsd:attribute name="move_insn"      type="xsd:boolean" default="false"/>
</xsd:complexType>

<!--
<xsd:simpleType name="yes_or_no">
  <xsd:restriction base="xsd:string">
    <xsd:enumeration value="yes" />
    <xsd:enumeration value="no" />
  </xsd:restriction>
</xsd:simpleType>
-->

<!--
    XXX,XXX_XX,XX
-->

<xsd:simpleType name="token_list_t">
  <xsd:restriction base="xsd:string">
    <xsd:pattern value="([_\w]+)(,[_\w]+)*"/>
  </xsd:restriction>
</xsd:simpleType>



<!--
  <bypass>
      <latency></latency>
      <out_insn_mnemonics></out_insn_mnemonics>
      <in_insn_mnemonics></in_insn_mnemonics>
      <function></function>
  </bypass>
-->
<xsd:complexType name="bypass_t">
  <xsd:sequence>
    <xsd:element name="latency"          type="xsd:positiveInteger"/>
    <xsd:element name="out_insn_mnemonics"   type="token_list_t"/>
    <xsd:element name="in_insn_mnemonics"    type="token_list_t"/>
    <xsd:element name="function"       type="xsd:string" minOccurs="0" maxOccurs="1"/>
  </xsd:sequence>
</xsd:complexType>

<!--
  <insn_group name="xxx"></insn_group>
-->
<xsd:complexType name="insn_group_t">
  <xsd:simpleContent>
    <xsd:extension base="token_list_t">
      <xsd:attribute name="name"    type="xsd:string" use="required"/>
    </xsd:extension>
  </xsd:simpleContent>
</xsd:complexType>


<!--
<regnum name="r1">1</regnum>
-->
<xsd:complexType name="regnum_t">
  <xsd:simpleContent>
    <xsd:extension base="xsd:nonNegativeInteger">
      <xsd:attribute name="name"   type="xsd:string" use="required"/>
    </xsd:extension>
  </xsd:simpleContent>
</xsd:complexType>


<!--
<gdb>
<regnum name="r1">1</regnum>
....
</gdb>
-->
<xsd:complexType name="gdb_t">
  <xsd:sequence>
    <xsd:element name="regnum"   type="regnum_t" minOccurs="0" maxOccurs="unbounded"/>
  </xsd:sequence>
</xsd:complexType>


<!--
<immediate_class type="unsigned" length="5" letter="I" />
-->

<xsd:complexType name="immediate_type_t">
  <xsd:simpleContent>
    <xsd:extension base="xsd:string">
      <xsd:attribute name="type"     type="imm_type"  use="required"/>
      <xsd:attribute name="length"   type="xsd:unsignedLong" use="required"/>
      <xsd:attribute name="letter"   type="letter_t"            use="required"/>
    </xsd:extension>
  </xsd:simpleContent>
</xsd:complexType>

<xsd:simpleType name="imm_type">
  <xsd:restriction base="xsd:string">
    <xsd:enumeration value="signed" />
    <xsd:enumeration value="unsigned" />
    <xsd:enumeration value="const" />
  </xsd:restriction>
</xsd:simpleType>


<!--
<processor>
  <name></name>
  <nickname></nickname>
  <register_type></register_type>
  <register_bank></register_bank>
  <insn></insn>
  <gdb></gdb>
</processor>
-->
<xsd:complexType name="Processor_t">
  <xsd:sequence>
    <xsd:element name="name"          type="xsd:string"/>
    <xsd:element name="nickname"      type="xsd:string"/>
    <xsd:element name="register_type" type="register_type_t" minOccurs="0" maxOccurs="unbounded"/>
    <xsd:element name="register_bank" type="register_bank_t" minOccurs="0" maxOccurs="unbounded"/>
    <xsd:element name="register_group" type="register_group_t" minOccurs="0" maxOccurs="unbounded"/>
    <xsd:element name="immediate_class" type="immediate_type_t" minOccurs="0" maxOccurs="unbounded" />
    <xsd:element name="cpu_unit"      type="token_list_t" minOccurs="0" maxOccurs="1" />
    <xsd:element name="insn_length"   type="xsd:positiveInteger"/>
    <xsd:element name="insn"          type="insn_t" minOccurs="0" maxOccurs="unbounded"/>
    <xsd:element name="insn_group"    type="insn_group_t" minOccurs="0" maxOccurs="unbounded"/>
    <xsd:element name="bypass"        type="bypass_t" minOccurs="0" maxOccurs="unbounded"/>
    <xsd:element name="bypass_func"   type="xsd:string" minOccurs="0" maxOccurs="1"/>
    <xsd:element name="gdb"           type="gdb_t" minOccurs="0" maxOccurs="1"/>
    <xsd:element name="behavior"      type="xsd:string" minOccurs="0" maxOccurs="1"/>
  </xsd:sequence>
</xsd:complexType>


<xsd:element name="Processor" type="Processor_t"/>



<!--
<xsd:key name="register_type_key">
  <xsd:selector xpath=""/>
  <xsd:field    xpath="@register_type"/>
</xsd:key>

<xsd:key name="register_type_keyref" refer="register_type_key">
  <xsd:selector xpath="register_bank"/>
  <xsd:field    xpath="@type"/>
</xsd:key>

<xsd:key name="register_field_type_keyref" refer="register_type_key">
  <xsd:selector xpath="insn/field"/>
  <xsd:field    xpath="@subtype"/>
</xsd:key>
-->

</xsd:schema>
