<?xml version="1.0" encoding="UTF-8" ?>
<!-- Modified by T.Hamabe on 2006/12/05 -->
<!-- Modified by T.Hamabe on 2006/11/30 -->
<FHM>
  <model_name> registerfile </model_name>

  <model>
    <design_level> behavior </design_level>
    <version> 1.0 </version>
    <author> <![CDATA[ Kyoko UEDA ]]> </author>
    <affiliation> <![CDATA[ Osaka Univ. ]]> </affiliation>
    <model_info> <![CDATA[
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                %
%    Copyright 2008 ASIP Solutions, Inc. All rights reserved.    %
%              Copyright 2002-2005 PEAS Project                  %
%                                                                %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
]]> </model_info>

    <parameter>
      <parameter_value key="bit_width">
        <value> 4 </value>
        <value> 8 </value>
        <value> 16 </value>
        <value> 20 </value>
        <value> 24 </value>
        <value> 28 </value>
        <value> 32 </value>
        <value> 36 </value>
        <value> 40 </value>
        <value> 44 </value>
        <value> 48 </value>
        <value> 52 </value>
        <value> 56 </value>
        <value> 60 </value>
        <value> 64 </value>
        <value> 128 </value>
      </parameter_value>
      <parameter_value key="num_register">
        <value> 4 </value>
        <value> 8 </value>
        <value> 16 </value>
        <value> 32 </value>
      </parameter_value>
      <parameter_value key="num_read_port">
        <value> 1 </value>
        <value> 2 </value>
        <value> 4 </value>
      </parameter_value>
      <parameter_value key="num_write_port">
        <value> 1 </value>
        <value> 2 </value>
        <value> 4 </value>
      </parameter_value>
    </parameter>

    <function_description>
      <script>
        <![CDATA[
#!/usr/bin/perl
# this script generates function definition for registerfile in behavior level
# parameter : bit_width num_register num_read_port num_write_port

if ($#ARGV != 3){
    print "number of parameters is wrong.\n";
    print "usage : this_script bit_width num_register num_read_port num_write_port\n";
    exit (100);
}

$bit_width = $ARGV[0];
$n_reg     = $ARGV[1];
$n_read    = $ARGV[2];
$n_write   = $ARGV[3];

@bit_widths = (1,4,8,16,20,24,28,32,36,40,44,48,52,56,60,64,128);
if (! grep($_ eq $bit_width, @bit_widths)){
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}
@n_regs = (4,8,16,32,64,128);
if (! grep($_ eq $n_reg, @n_regs)){
    print "num_register $n_reg is not supported.\n";
    exit (100);
}
@n_reads = (1,2,4,8,16,32,64,128);
if (! grep($_ eq $n_read, @n_reads)){
    print "num_read $n_read is not supported.\n";
    exit (100);
}
@n_writes = (1,2,4,8,16,32,64,128);
if (! grep($_ eq $n_write, @n_writes)){
    print "num_write $n_write is not supported.\n";
    exit (100);
}
if ($n_write > $n_reg){
    print <<FHM_DL_ERROR;
******************************************************************
* num_register should be equal or grater than num_write_port *
******************************************************************
FHM_DL_ERROR
    exit(0);
#    exit (100); 
}

$w_1 = $bit_width - 1;
$n_sel = &log2u($n_reg);
$n_sel_1 = $n_sel - 1;
{
    print <<FHM_DL_MODEL
/** $bit_width-bit registerfile with $n_reg registers, $n_read read port, $n_write write port */
model regfile${bit_width}_${n_reg}_${n_read}_${n_write}{
  port{
    clock clock;
    in async_reset;
    in reset;
FHM_DL_MODEL
}
print "    in  ";
for ($i=0; $i<=$n_write-1; $i++){
    if ($i == $n_write - 1){print "w_enb$i;\n";}
    else{print "w_enb$i, ";}
}
print "    in  ";
for ($i=0; $i<=$n_write-1; $i++){
    if ($i == $n_write - 1){print "w_sel${i}[$n_sel_1:0];\n";}
    else{print "w_sel${i}[$n_sel_1:0], ";}
}
print "    in  ";
for ($i=0; $i<=$n_write-1; $i++){
    if ($i == $n_write - 1){print "data_in${i}[$w_1:0];\n";}
    else{print "data_in${i}[$w_1:0], ";}
}
print "    in  ";
for ($i=0; $i<=$n_read-1; $i++){
    if ($i == $n_read - 1){print "r_sel${i}[$n_sel_1:0];\n";}
    else{print "r_sel${i}[$n_sel_1:0], ";}
}
print "    out ";
for ($i=0; $i<=$n_read-1; $i++){
    if ($i == $n_read - 1){print "data_out${i}[$w_1:0];\n";}
    else{print "data_out${i}[$w_1:0], ";}
}
print "  }\n\n";
{
  print <<FHM_DL_NOP1
  /** no operation */
  function nop : idle{
    control{
      in reset;
FHM_DL_NOP1
}
for ($i=0; $i<=$n_write-1; $i++){
    print "      in w_enb$i;\n";
}
{
    print <<FHM_DL_NOP2
    }
    protocol{
FHM_DL_NOP2
}
print "      [reset == '0' && ";
for ($i=0; $i<=$n_write-1; $i++){
    if ($i == $n_write - 1){print "w_enb$i == '0']{\n";}
    else{print "w_enb$i == '0' && ";}
}
{
    print <<FHM_DL_NOP_RESET
    }
  }

  /** reset */
  function reset : reset{
    control{
      in reset;
    }
    protocol{
      [reset == '1']{
      }
    }
  }

FHM_DL_NOP_RESET
}
for ($i=0; $i<=$n_write-1; $i++){
    {
        print <<FHM_DL_WRITE1
  /** write$i */
  function write${i}{
    input{
      bit_vector w_sel$i;
      bit_vector data_in$i;
    }
    assignment{
FHM_DL_WRITE1
    }
    for ($j=0; $j<=$n_reg-1; $j++){print "      reg$j = data_in$i;\n";}
    {
        print <<FHM_DL_WRITE2
    }
    control{
      in w_enb$i;
    }
    protocol{
FHM_DL_WRITE2
    }
    for ($j=0; $j<=$n_reg-1; $j++){
	$j2 = &to_comp($j, $n_sel);
	print "      [w_enb$i == '1' && w_sel$i == \"$j2\" && hold data_in$i]{\n";
	print "        store reg$j;\n      }\n";
    }
    print "    }\n  }\n\n";
}

for ($i=0; $i<=$n_read-1; $i++){
    print <<FHM_DL_READ
  /** read$i */
  function read${i}{
    input{
      bit_vector r_sel$i;
    }
    output{
      bit_vector data_out$i;
    }
  }

FHM_DL_READ
}
print "  priority{ ( reset > ( nop | ";
for ($i=0; $i<=$n_write-1; $i++){
    if ($i == $n_write - 1){print "write$i ) ), ";}
    else{print "write$i | ";}
}
for ($i=0; $i<=$n_read-1; $i++){
    if ($i == $n_read - 1){print "read$i }\n}\n";}
    else{print "read$i, ";}
}
exit (0);

# ---------------------------------

sub log2u{
    $num = $_[0];

    for ($i=1, $N=2; $N<$num; $i++, $N*=2){};
    return($i);
}

# ---------------------------------

sub to_comp{
  @buf = ();
  $num = $_[0];
  $width = $_[1];

  for ($x=1; $x<$width; $x++){
    $buf[$x] = $num % 2;
    $num = ($num - $buf[$x]) / 2;
  }
  $buf[$x] = $num % 2;
  return (join("", reverse(@buf)));
}
        ]]>
      </script>
    </function_description>

    <function_conv>
      <script>
        <![CDATA[
#!/usr/bin/perl
# this script generates AUTOGEN description for registerfile in behavior level
# parameter : bit_width num_register num_read_port num_write_port

if ($#ARGV != 3){
    print "number of parameters is wrong.\n";
    print "usage : this_script bit_width num_register num_read_port num_write_port\n";
    exit (100);
}

$bit_width     = $ARGV[0];
$n_reg         = $ARGV[1];
$n_read        = $ARGV[2];
$n_write       = $ARGV[3];

@bit_widths = (1,4,8,16,20,24,28,32,36,40,44,48,52,56,60,64,128);
if (! grep($_ eq $bit_width, @bit_widths)){
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}
@n_regs = (4,8,16,32,64,128);
if (! grep($_ eq $n_reg, @n_regs)){
    print "num_register $n_reg is not supported.\n";
    exit (100);
}
@n_reads = (1,2,4,8,16,32,64,128);
if (! grep($_ eq $n_read, @n_reads)){
    print "num_read $n_read is not supported.\n";
    exit (100);
}
@n_writes = (1,2,4,8,16,32,64,128);
if (! grep($_ eq $n_write, @n_writes)){
    print "num_write $n_write is not supported.\n";
    exit (100);
}
if ($n_write > $n_reg){
   print "num_register should be equal or grater than num_write_port\n";
   exit(100);
}

$w_1 = $bit_width - 1;
$n_sel = &log2u($n_reg);
$n_sel_1 = $n_sel - 1;
{
    print <<FHM_DL_NOP1
/** no operation */
function nop{
  input{
  }

  output{
  }

  control{
    in bit reset;
FHM_DL_NOP1
}
for ($i=0; $i<=$n_write-1; $i++){print "    in bit w_enb$i;\n";}
{
    print <<FHM_DL_NOP2
  }

  protocol{
    single_cycle_protocol{
      reset = '0';
FHM_DL_NOP2
}
for ($i=0; $i<=$n_write-1; $i++){print "      w_enb$i = '0';\n";}
{
    print <<FHM_DL_NOP_RESET
    }
  }
}

/** reset */
function reset{
  input{
  }

  output{
  }

  control{
    in bit reset;
  }

  protocol{
    single_cycle_protocol{
      reset = '1';
    }
  }
}

FHM_DL_NOP_RESET
}
for ($i=0; $i<=$n_write-1; $i++){
    print <<FHM_DL_WRITE
/** write$i */
function write${i}{
  input{
    bit [$n_sel_1:0] w_sel$i;
    bit [$w_1:0] data_in$i;
  }

  output{
  }

  control{
    in bit w_enb$i;
  }

  protocol{
    single_cycle_protocol{
      w_enb$i = '1';
    }
  }
}

FHM_DL_WRITE
}

for ($i=0; $i<=$n_read-1; $i++){
    print <<FHM_DL_READ
/** read$i */
function read${i}{
  input{
    bit [$n_sel_1:0] r_sel$i;
  }

  output{
    bit [$w_1:0] data_out$i;
  }

  control{
  }

  protocol{
  }
}

FHM_DL_READ
}
exit (0);

# ---------------------------------

sub log2u{
    $num = $_[0];

    for ($i=1, $N=2; $N<$num; $i++, $N*=2){};
    return($i);
}
        ]]>
      </script>
    </function_conv>

    <function_port>
      <script>
        <![CDATA[
#!/usr/bin/perl
# this script generates port information for registerfile in behavior level
# parameter : bit_width num_register num_read_port num_write_port

if ($#ARGV != 3){
    print "number of parameters is wrong.\n";
    print "usage : this_script bit_width num_register num_read_port num_write_port\n";
    exit (100);
}

$bit_width     = $ARGV[0];
$n_reg         = $ARGV[1];
$n_read        = $ARGV[2];
$n_write       = $ARGV[3];

@bit_widths = (1,4,8,16,20,24,28,32,36,40,44,48,52,56,60,64,128);
if (! grep($_ eq $bit_width, @bit_widths)){
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}
@n_regs = (4,8,16,32,64,128);
if (! grep($_ eq $n_reg, @n_regs)){
    print "num_register $n_reg is not supported.\n";
    exit (100);
}
@n_reads = (1,2,4,8,16,32,64,128);
if (! grep($_ eq $n_read, @n_reads)){
    print "num_read $n_read is not supported.\n";
    exit (100);
}
@n_writes = (1,2,4,8,16,32,64,128);
if (! grep($_ eq $n_write, @n_writes)){
    print "num_write $n_write is not supported.\n";
    exit (100);
}
if ($n_write > $n_reg){
   print "num_register should be equal or grater than num_write_port\n";
   exit(100);
}

$w_1 = $bit_width - 1;
$n_sel = &log2u($n_reg);
$n_sel_1 = $n_sel - 1;
{
print <<FHM_DL_TOP
clock		in	bit		clock
async_reset		in	bit		reset
reset		in	bit		ctrl
FHM_DL_TOP
}
for ($i=0; $i<=$n_write-1; $i++){print "w_enb$i		in	bit		ctrl\n";}
for ($i=0; $i<=$n_write-1; $i++){
    print "w_sel$i		in	bit_vector   $n_sel_1   0	data\n";}
for ($i=0; $i<=$n_write-1; $i++){
    print "data_in$i	in	bit_vector   $w_1   0	data\n";}
for ($i=0; $i<=$n_read-1; $i++){
    print "r_sel$i		in	bit_vector   $n_sel_1   0	data\n";}
for ($i=0; $i<=$n_read-1; $i++){
    print "data_out$i	out	bit_vector   $w_1   0	data\n";}
exit (0);

# ---------------------------------

sub log2u{
    $num = $_[0];

    for ($i=1, $N=2; $N<$num; $i++, $N*=2){};
    return($i);
}
        ]]>
      </script>
    </function_port>

    <design>
      <design_lang> vhdl </design_lang>

      <instance>
        <script>
          <![CDATA[
#!/usr/bin/perl
# this script generates instance for registerfile in behavior level
# parameter : instance_name bit_width num_register num_read_port num_write_port

if ($#ARGV != 4){
    print "number of parameters is wrong.\n";
    print "usage : this_script instance_name bit_width num_register num_read_port num_write_port\n";
    exit (100);
}

$instance_name = $ARGV[0];
$bit_width     = $ARGV[1];
$n_reg         = $ARGV[2];
$n_read        = $ARGV[3];
$n_write       = $ARGV[4];
@bit_widths = (1,4,8,16,20,24,28,32,36,40,44,48,52,56,60,64,128);
if (! grep($_ eq $bit_width, @bit_widths)){
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}
@n_regs = (4,8,16,32,64,128);
if (! grep($_ eq $n_reg, @n_regs)){
    print "num_register $n_reg is not supported.\n";
    exit (100);
}
@n_reads = (1,2,4,8,16,32,64,128);
if (! grep($_ eq $n_read, @n_reads)){
    print "num_read $n_read is not supported.\n";
    exit (100);
}
@n_writes = (1,2,4,8,16,32,64,128);
if (! grep($_ eq $n_write, @n_writes)){
    print "num_write $n_write is not supported.\n";
    exit (100);
}
if ($n_write > $n_reg){
   print "num_register should be equal or grater than num_write_port\n";
   exit(100);
}

$w_1 = $bit_width - 1;
$n_sel = &log2u($n_reg);
$n_sel_1 = $n_sel - 1;
$zeros = 0 x $bit_width;
{
print <<FHM_DL_TOP
-- Module       : $bit_width-bit registerfile
--                with $n_registers, $n_read read ports, $n_write write ports
-- Refereces    :
-- Author       : Designed by K.Ueda (c)2002.
-- Version      : 1.0 :

-- Functionality : behavior level
-- port
--  clock       : clock 
--  async_reset : '1' then asynchronously reset registers
--  reset       : '1' then synchronously reset registers
--  w_enb*      : '1' then update register value
--  w_sel*      : selected register to write
--  data_in*    : data to register
--  r_sel*      : selected register to read
--  data_out* :   registered data

library IEEE;
use IEEE.std_logic_1164.all;

entity $instance_name is
  
  port (
    clock	: in  std_logic;
    async_reset	: in  std_logic;
    reset	: in  std_logic;
FHM_DL_TOP
}
for ($i=0; $i<=$n_write-1; $i++){print "    w_enb$i	: in  std_logic;\n";}
for ($i=0; $i<=$n_write-1; $i++){
    print "    w_sel$i	: in  std_logic_vector($n_sel_1 downto 0);\n";}
for ($i=0; $i<=$n_write-1; $i++){
    print "    data_in$i	: in  std_logic_vector($w_1 downto 0);\n";}
for ($i=0; $i<=$n_read-1; $i++){
    print "    r_sel$i	: in  std_logic_vector($n_sel_1 downto 0);\n";}
for ($i=0; $i<=$n_read-1; $i++){
    if ($i == $n_read - 1){
	print "    data_out$i	: out std_logic_vector($w_1 downto 0) );\n";}
    else{
	print "    data_out$i	: out std_logic_vector($w_1 downto 0);\n";}
}
{
    print <<FHM_DL_PROCESS1

end $instance_name;

architecture behavior of $instance_name is

begin  -- behavior

FHM_DL_PROCESS1
}
print "process (clock, async_reset, reset";
for ($i=0; $i<=$n_read-1; $i++){print ", r_sel$i";}
print")\n\n";

for ($i=0; $i<=$n_reg-1; $i++){
    print "    variable data_tmp$i : std_logic_vector($w_1 downto 0);\n";}
{
    print <<FHM_DL_PROCESS2

  begin

    if (async_reset = '1') then
FHM_DL_PROCESS2
}
for ($i=0; $i<=$n_reg-1; $i++){print "      data_tmp$i := \"$zeros\";\n";}
print "\n";
for ($i=0; $i<=$n_read-1; $i++){print "      data_out$i <= \"$zeros\";\n";}
{
    print <<FHM_DL_EOR;
    elsif (clock'event and clock = '1') then
      if (reset = '1') then
FHM_DL_EOR
}
for ($i=0; $i<=$n_reg-1; $i++){print "        data_tmp$i := \"$zeros\";\n";}
print "      else\n";
for ($i=0; $i<=$n_reg-1; $i++){
  $i2 = &to_comp($i, $n_sel);
  for ($j=0; $j<=$n_write-1; $j++){
    if ($j == 0){
      print "        if (w_enb$j = '1' and w_sel$j = \"$i2\") then\n";
    }
    else{
      print "        elsif (w_enb$j = '1' and w_sel$j = \"$i2\") then\n";
    }
    print "         data_tmp$i := data_in$j;\n";
  }
  print "        end if;\n";
}
{

print <<FHM_DL_IF_END
      end if;
    end if;
FHM_DL_IF_END
}

for ($i=0; $i<=$n_read-1; $i++){
    for ($j=0; $j<=$n_reg-1; $j++){
	$j2 = &to_comp($j, $n_sel);
	if ($j == 0){
	    print <<FHM_DL_READ1

    if    (r_sel$i = "$j2") then
      data_out$i <= data_tmp$j;
FHM_DL_READ1
        }
	else{
	    print <<FHM_DL_READ2
    elsif (r_sel$i = "$j2") then
      data_out$i <= data_tmp$j;
FHM_DL_READ2
        }
    }
    print "    end if;\n";
}
{
    print <<FHM_DL_END
  end process;
end behavior;
FHM_DL_END
}
exit (0);

# ---------------------------------

sub log2u{
    $num = $_[0];

    for ($i=1, $N=2; $N<$num; $i++, $N*=2){};
    return($i);
}

# ---------------------------------

sub to_comp{
  @buf = ();
  $num = $_[0];
  $width = $_[1];

  for ($x=1; $x<$width; $x++){
    $buf[$x] = $num % 2;
    $num = ($num - $buf[$x]) / 2;
  }
  $buf[$x] = $num % 2;
  return (join("", reverse(@buf)));
}
          ]]>
        </script>
      </instance>

      <entity></entity>

      <testvector>
        <testvector_script>
          <![CDATA[ ]]>
        </testvector_script>
      </testvector>

      <synthesis></synthesis>
    </design>

    <design>
      <design_lang> Verilog </design_lang>

      <instance>
        <script>
          <![CDATA[

#!/usr/bin/perl
# this script generates instance for registerfile in behavior level
# parameter : instance_name bit_width num_register num_read_port num_write_port


if ($#ARGV != 4){
    print "number of parameters is wrong.\n";
    print "usage : this_script instance_name bit_width num_register num_read_port num_write_port\n";
    exit (100);
}

$instance_name = $ARGV[0];
$bit_width     = $ARGV[1];
$n_reg         = $ARGV[2];
$n_read        = $ARGV[3];
$n_write       = $ARGV[4];
@bit_widths = (1,4,8,16,20,24,28,32,36,40,44,48,52,56,60,64,128);
if (! grep($_ eq $bit_width, @bit_widths)){
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}
@n_regs = (4,8,16,32,64,128);
if (! grep($_ eq $n_reg, @n_regs)){
    print "num_register $n_reg is not supported.\n";
    exit (100);
}
@n_reads = (1,2,4,8,16,32,64,128);
if (! grep($_ eq $n_read, @n_reads)){
    print "num_read $n_read is not supported.\n";
    exit (100);
}
@n_writes = (1,2,4,8,16,32,64,128);
if (! grep($_ eq $n_write, @n_writes)){
    print "num_write $n_write is not supported.\n";
    exit (100);
}
if ($n_write > $n_reg){
   print "num_register should be equal or grater than num_write_port\n";
   exit(100);
}

$w_1 = $bit_width - 1;
$n_sel = &log2u($n_reg);
$n_sel_1 = $n_sel - 1;
$zeros = 0 x $bit_width;
$dont_care = "x";
$W1 = $bit_width - 1;

{
print <<FHM_DL_COMMON
//%%
\n
// Module       : $bit_width-bit registerfile
//                with $n_reg registers, $n_read read ports, $n_write write ports
// Refereces    :
// Author       : Designed by Huynh Kim Long (c)2005
// Version      : 1.1 :
\n
// Functionality : synthesis level
// port
//  clock       : clock 
//  async_reset : '1' then asynchronously reset registers
//  reset       : '1' then synchronously reset registers
//  w_enb*      : '1' then update register value
//  w_sel*      : selected register to write
//  data_in*    : data to register
//  r_sel*      : selected register to read
//  data_out*   : registered data
\n
module $instance_name (
  clock      ,
  async_reset,
  reset      ,
FHM_DL_COMMON
}
for ($i=0; $i<=$n_write-1; $i++){
    print "  w_enb$i     ,\n";}
for ($i=0; $i<=$n_write-1; $i++){
    print "  w_sel$i     ,\n";}
for ($i=0; $i<=$n_write-1; $i++){
    print "  data_in$i   ,\n";}
for ($i=0; $i<=$n_read-1; $i++){
    print "  r_sel$i     ,\n";}
for ($i=0; $i<=$n_read-1; $i++){
    if ($i == $n_read - 1){
	print "  data_out$i  );\n";}
    else{
	print "  data_out$i  ,\n";}
}
{
print <<FHM_DL_COMMON
\n
input         clock      ;
input         async_reset;
input         reset      ;
FHM_DL_COMMON
}
for ($i=0; $i<=$n_write-1; $i++){
    print "input         w_enb$i     ;\n";}
for ($i=0; $i<=$n_write-1; $i++){
    print "input  [ ${n_sel_1}:0] w_sel$i     ;\n";}
for ($i=0; $i<=$n_write-1; $i++){
    print "input  [${w_1}:0] data_in$i   ;\n";}
for ($i=0; $i<=$n_read-1; $i++){
    print "input  [ ${n_sel_1}:0] r_sel$i     ;\n";}
for ($i=0; $i<=$n_read-1; $i++){
    print "output [${w_1}:0] data_out$i  ;\n";}

{
print <<FHM_DL_COMMON
\n
wire          clock      ;
wire          async_reset;
wire          reset      ;
FHM_DL_COMMON
}
for ($i=0; $i<=$n_write-1; $i++){
    print "wire        w_enb$i       ;\n";}
for ($i=0; $i<=$n_write-1; $i++){
    print "wire [ ${n_sel_1}:0] w_sel$i       ;\n";}
for ($i=0; $i<=$n_write-1; $i++){
    print "wire [${w_1}:0] data_in$i     ;\n";}
for ($i=0; $i<=$n_read-1; $i++){
    print "wire [ ${n_sel_1}:0] r_sel$i       ;\n";}
for ($i=0; $i<=$n_read-1; $i++){
    print "wire [${w_1}:0] data_out$i    ;\n";}

print " \n";
for ($i=0; $i<=$n_reg-1 ; $i++){
print <<FHM_DL_DATA_TMP
reg [${w_1}:0] data_tmp$i  ;
FHM_DL_DATA_TMP
}
print " \n";

print "always@ (posedge clock or posedge async_reset";
#for ($i=0; $i<=$n_read-1; $i++){print " or r_sel$i";}
print")\n\n";
{
    print <<FHM_DL_PROCESS2
begin

    if (async_reset == 1'b1)
FHM_DL_PROCESS2
}
print "\tbegin\n";
for ($i=0; $i<=$n_reg-1; $i++){print "      data_tmp$i <= \{${bit_width}{1'b0}};\n";}
print "\n";
#for ($i=0; $i<=$n_read-1; $i++){print "      data_out$i <= \{${bit_width}{1'b0}};\n";}
print "\tend\n";
{
    print <<FHM_DL_EOR;
    else
      if (reset == 1'b1)
FHM_DL_EOR
}
print "\tbegin\n";
for ($i=0; $i<=$n_reg-1; $i++){print "        data_tmp$i <= \{${bit_width}{1'b0}};\n";}
print "\tend\n";
print "      else\n";
print "\tbegin\n";

for ($i=0; $i<=$n_reg-1; $i++){
  $i2 = &to_comp($i, $n_sel);
  for ($j=0; $j<=$n_write-1; $j++){
    if ($j == 0){
      print "        if (w_enb$j == 1'b1 && w_sel$j == $n_sel\'b$i2)\n";
    }
    else{
      print "        else if (w_enb$j == 1'b1 && w_sel$j == $n_sel\'b$i2)\n";
    }
    print "         data_tmp$i <= data_in$j;\n";
  }
}


print "\tend\n";

{
    print <<FHM_DL_END
end
FHM_DL_END
}

print " \n";
for ($i=0; $i<=$n_read-1; $i++){
 for ($j=0; $j<=$n_reg-1; $j++){
   $j2 = &to_comp($j, $n_sel);
   if ($j == 0){
     print "assign data_out$i  = (r_sel$i == ${n_sel}'b${j2}) ? data_tmp$j  :\n";
   }
   elsif ($j == $n_reg-1){
     print "                    data_tmp$j  ;\n";
     print " \n"
   }
   else{
     print "                    (r_sel$i == ${n_sel}'b${j2}) ? data_tmp$j  :\n";
   }
 }
}

{
    print <<FHM_DL_END
endmodule
FHM_DL_END
}

exit(0);
# ---------------------------------

sub log2u{
    $num = $_[0];

    for ($i=1, $N=2; $N<$num; $i++, $N*=2){};
    return($i);
}

# ---------------------------------

sub to_comp{
  @buf = ();
  $num = $_[0];
  $width = $_[1];

  for ($x=1; $x<$width; $x++){
    $buf[$x] = $num % 2;
    $num = ($num - $buf[$x]) / 2;
  }
  $buf[$x] = $num % 2;
  return (join("", reverse(@buf)));
}

          ]]>
        </script>
      </instance>

      <entity></entity>

      <testvector></testvector>

      <synthesis></synthesis>
    </design>

    <design>
      <design_lang> SystemC Header </design_lang>

      <instance>
        <script>
          <![CDATA[
#!/usr/bin/perl
# this script generates instance for registerfile in behavior level
# parameter : name_space instance_name bit_width num_register num_read_port num_write_port


if ($#ARGV != 5){
    print "number of parameters is wrong.\n";
    print "usage : this_script name_space instance_name bit_width num_register num_read_port num_write_port\n";
    exit (100);
}

$name_space    = $ARGV[0];
$instance_name = $ARGV[1];
$bit_width     = $ARGV[2];
$n_reg         = $ARGV[3];
$n_read        = $ARGV[4];
$n_write       = $ARGV[5];

@bit_widths = (1,4,8,16,20,24,28,32,36,40,44,48,52,56,60,64,128);
if (! grep($_ eq $bit_width, @bit_widths)){
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}
@n_regs = (4,8,16,32,64,128);
if (! grep($_ eq $n_reg, @n_regs)){
    print "num_register $n_reg is not supported.\n";
    exit (100);
}
@n_reads = (1,2,4,8,16,32,64,128);
if (! grep($_ eq $n_read, @n_reads)){
    print "num_read $n_read is not supported.\n";
    exit (100);
}
@n_writes = (1,2,4,8,16,32,64,128);
if (! grep($_ eq $n_write, @n_writes)){
    print "num_write $n_write is not supported.\n";
    exit (100);
}
if ($n_write > $n_reg){
   print "num_register should be equal or grater than num_write_port\n";
   exit(100);
}

$n_sel = &log2u($n_reg);
$zeros = 0 x $bit_width;
$dont_care = "1";

if (n_sel <= 64) {
  $n_sel_type = "sc_dt::sc_uint<" . $n_sel . ">";
} else {
  $n_sel_type = "sc_dt::sc_biguint<" . $n_sel . ">";
}

if (bit_width <= 64) {
  $data_type = "sc_dt::sc_uint<" . $bit_width . ">";
} else {
  $data_type = "sc_dt::sc_biguint<" . $bit_width . ">";
}

$macro = "__" . uc($name_space) . "_" . uc($instance_name) . "_H__";

{
print <<FHM_DL_COMMON
#ifndef $macro
#define $macro 1

// Module       : $bit_width-bit registerfile
//                with $n_reg registers, $n_read read ports, $n_write write ports
// Refereces    :
// Author       : Designed by Huynh Kim Long (c)2005
// Version      : 1.1 :

// Functionality : synthesis level
// port
//  clock       : clock 
//  async_reset : '1' then asynchronously reset registers
//  reset       : '1' then synchronously reset registers
//  w_enb*      : '1' then update register value
//  w_sel*      : selected register to write
//  data_in*    : data to register
//  r_sel*      : selected register to read
//  data_out*   : registered data

#include <systemc>

namespace $name_space {
  SC_MODULE($instance_name) {
    sc_core::sc_in< bool > clock;
    sc_core::sc_in< bool > async_reset;
    sc_core::sc_in< bool > reset;
FHM_DL_COMMON
}
for ($i=0; $i<=$n_write-1; $i++){
    print "    sc_core::sc_in< bool > w_enb$i;\n";}
for ($i=0; $i<=$n_write-1; $i++){
    print "    sc_core::sc_in< $n_sel_type > w_sel$i;\n";}
for ($i=0; $i<=$n_write-1; $i++){
    print "    sc_core::sc_in< $data_type > data_in$i;\n";}
for ($i=0; $i<=$n_read-1; $i++){
    print "    sc_core::sc_in< $n_sel_type > r_sel$i;\n";}
for ($i=0; $i<=$n_read-1; $i++){
    print "    sc_core::sc_out< $data_type > data_out$i;\n";}
print "\n";
for ($i=0; $i<=$n_reg-1 ; $i++){
    print "    sc_core::sc_signal< $data_type > data_tmp$i;\n"; }
{
print <<FHM_DL_DATA_TMP

    SC_CTOR($instance_name) :
      clock("clock"),
      async_reset("async_reset"),
      reset("reset"),
FHM_DL_DATA_TMP
}

for ($i=0; $i<=$n_write-1; $i++){
    print "      w_enb$i(\"w_enb$i\"),\n";}
for ($i=0; $i<=$n_write-1; $i++){
    print "      w_sel$i(\"w_sel$i\"),\n";}
for ($i=0; $i<=$n_write-1; $i++){
    print "      data_in$i(\"data_in$i\"),\n";}
for ($i=0; $i<=$n_read-1; $i++){
    print "      r_sel$i(\"r_sel$i\"),\n";}
for ($i=0; $i<=$n_read-1; $i++){
    print "      data_out$i(\"data_out$i\"),\n";}
for ($i=0; $i<=$n_reg-1 ; $i++){
    print "      data_tmp$i(\"data_tmp$i\")";
    if ( $i != $n_reg - 1) {
        print ",";
    }
    print "\n";
}
{
print <<FHM_DL_DATA_TMP
    {
      SC_METHOD(process);
      sensitive << clock.pos() << async_reset.pos();
  
FHM_DL_DATA_TMP
}

print "      SC_METHOD(data_read);\n      sensitive";

for ($i=0; $i<=$n_read-1; $i++){
 print " << r_sel$i";
}

for ($i=0; $i<=$n_reg-1; $i++){
  print " << data_tmp$i";
}

print ";\n";

{
    print <<FHM_DL_END
    }

    void process();
    void data_read();
  };
};

#endif // $macro
FHM_DL_END
}

exit(0);
# ---------------------------------

sub log2u{
    $num = $_[0];

    for ($i=1, $N=2; $N<$num; $i++, $N*=2){};
    return($i);
}
          ]]>
        </script>
      </instance>

      <entity>
        <script>
          <![CDATA[
          ]]>
        </script>
      </entity>

      <testvector>
        <testvector_script>
          <![CDATA[ ]]>
        </testvector_script>
      </testvector>
    </design>

    <design>
      <design_lang> SystemC Program </design_lang>

      <instance>
        <script>
          <![CDATA[
#!/usr/bin/perl
# this script generates instance for registerfile in behavior level
# parameter : name_space instance_name bit_width num_register num_read_port num_write_port


if ($#ARGV != 5){
    print "number of parameters is wrong.\n";
    print "usage : this_script name_space instance_name bit_width num_register num_read_port num_write_port\n";
    exit (100);
}

$name_space    = $ARGV[0];
$instance_name = $ARGV[1];
$bit_width     = $ARGV[2];
$n_reg         = $ARGV[3];
$n_read        = $ARGV[4];
$n_write       = $ARGV[5];

@bit_widths = (1,4,8,16,20,24,28,32,36,40,44,48,52,56,60,64,128);
if (! grep($_ eq $bit_width, @bit_widths)){
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}
@n_regs = (4,8,16,32,64,128);
if (! grep($_ eq $n_reg, @n_regs)){
    print "num_register $n_reg is not supported.\n";
    exit (100);
}
@n_reads = (1,2,4,8,16,32,64,128);
if (! grep($_ eq $n_read, @n_reads)){
    print "num_read $n_read is not supported.\n";
    exit (100);
}
@n_writes = (1,2,4,8,16,32,64,128);
if (! grep($_ eq $n_write, @n_writes)){
    print "num_write $n_write is not supported.\n";
    exit (100);
}
if ($n_write > $n_reg){
   print "num_register should be equal or grater than num_write_port\n";
   exit(100);
}

$n_sel = &log2u($n_reg);
$zeros = 0 x $bit_width;
$dont_care = "x";

{
print <<FHM_DL_COMMON
#include "$instance_name.h"

//

// Module       : $bit_width-bit registerfile
//                with $n_reg registers, $n_read read ports, $n_write write ports
// Refereces    :
// Author       : Designed by Huynh Kim Long (c)2005
// Version      : 1.1 :

// Functionality : synthesis level
// port
//  clock       : clock 
//  async_reset : '1' then asynchronously reset registers
//  reset       : '1' then synchronously reset registers
//  w_enb*      : '1' then update register value
//  w_sel*      : selected register to write
//  data_in*    : data to register
//  r_sel*      : selected register to read
//  data_out*   : registered data

FHM_DL_COMMON
}
{
print <<FHM_DL_PROCESS
void ${name_space}::${instance_name}::process()
{
  if ( async_reset.read() == 1 ) {
FHM_DL_PROCESS
}
for ($i=0; $i<=$n_reg-1; $i++){print "    data_tmp$i.write( 0 );\n";}
{
    print <<FHM_DL_EOR;
  } else if ( reset.read() == 1 ) {
FHM_DL_EOR
}
for ($i=0; $i<=$n_reg-1; $i++){print "    data_tmp$i.write( 0 );\n";}
print "  } else {\n";
for ($i=0; $i<=$n_reg-1; $i++){
  $i2 = &to_comp($i, $n_sel);
  for ($j=0; $j<=$n_write-1; $j++){
    if ($j == 0){
      print "    if (w_enb$j.read() == 1 && w_sel$j.read() == $i)\n";
    }
    else{
      print "    else if (w_enb$j.read() == 1 && w_sel$j.read() == $i)\n";
    }
    print "       data_tmp$i.write( data_in$j.read() );\n";
  }
}
{
    print <<FHM_DL_END
  }
}
FHM_DL_END
}
{
print <<FHM_DL_END

void ${name_space}::${instance_name}::data_read()
{
FHM_DL_END
}

for ($i=0; $i<=$n_read-1; $i++){
 for ($j=0; $j<=$n_reg-1; $j++){
   $j2 = &to_comp($j, $n_sel);
   if ($j == 0){
     print "  if (r_sel$i.read() == $j) {\n";
     print "    data_out$i.write( data_tmp$j.read() );\n";
   }
   elsif ($j == $n_reg-1){
     print "  } else {\n";
     print "    data_out$i.write( data_tmp$j.read() );\n";
     print "  }\n";
   }
   else{
     print "  } else if (r_sel$i.read() == $j) {\n";
     print "    data_out$i.write( data_tmp$j.read() );\n";
   }
 }
 if ($i != $n_read - 1) {
   print "\n";
 }
}

print "}\n";

exit(0);
# ---------------------------------

sub log2u{
    $num = $_[0];

    for ($i=1, $N=2; $N<$num; $i++, $N*=2){};
    return($i);
}

# ---------------------------------

sub to_comp{
  @buf = ();
  $num = $_[0];
  $width = $_[1];

  for ($x=1; $x<$width; $x++){
    $buf[$x] = $num % 2;
    $num = ($num - $buf[$x]) / 2;
  }
  $buf[$x] = $num % 2;
  return (join("", reverse(@buf)));
}
          ]]>
        </script>
      </instance>

      <entity>
        <script>
          <![CDATA[
          ]]>
        </script>
      </entity>

      <testvector>
        <testvector_script>
          <![CDATA[ ]]>
        </testvector_script>
      </testvector>
    </design>

    <estimation>
      <estimation_data>
        <library name="OSAKA">

          <est_type name="shape">
            <est_index name="area">
              <unit> mm2 </unit>
              <translate>
                <translate_value key="gate"> 4201.68 </translate_value>
                <translate_value key="mm2">  1 </translate_value>
              </translate>

              <parameters name="4,1,1">
                <max>
                  <data bit_width="4"> 0.100640431208469 </data>
                  <data bit_width="8"> 0.190091621208659 </data>
                  <data bit_width="16"> 0.384275175168028 </data>
                  <data bit_width="32"> 0.800327887892462 </data>
                  <data bit_width="128"> 3.44180733587517 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.0745055530168885 </data>
                  <data bit_width="8"> 0.142227654890425 </data>
                  <data bit_width="16"> 0.281444516241123 </data>
                  <data bit_width="32"> 0.59009506316521 </data>
                  <data bit_width="128"> 2.99197633994021 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.0745055530168885 </data>
                    <data bit_width="8"> 0.142227654890425 </data>
                    <data bit_width="16"> 0.281444516241123 </data>
                    <data bit_width="32"> 0.59009506316521 </data>
                    <data bit_width="128"> 2.99197633994021 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.100640431208469 </data>
                    <data bit_width="8"> 0.190091621208659 </data>
                    <data bit_width="16"> 0.377288398212144 </data>
                    <data bit_width="32"> 0.800327887892462 </data>
                    <data bit_width="128"> 3.44180733587517 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.0961412223205956 </data>
                    <data bit_width="8"> 0.186560696435711 </data>
                    <data bit_width="16"> 0.384275175168028 </data>
                    <data bit_width="32"> 0.761449570647931 </data>
                    <data bit_width="128"> 3.02224487800118 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,1,2">
                <max>
                  <data bit_width="4"> 0.119810111193618 </data>
                  <data bit_width="8"> 0.228457012195122 </data>
                  <data bit_width="16"> 0.47214675320348 </data>
                  <data bit_width="32"> 0.974615385512462 </data>
                  <data bit_width="128"> 4.14543260076922 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.0946044413187106 </data>
                  <data bit_width="8"> 0.183171970497515 </data>
                  <data bit_width="16"> 0.377247695445631 </data>
                  <data bit_width="32"> 0.738064788608366 </data>
                  <data bit_width="128"> 3.38248257244721 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.0946044413187106 </data>
                    <data bit_width="8"> 0.183171970497515 </data>
                    <data bit_width="16"> 0.377247695445631 </data>
                    <data bit_width="32"> 0.738064788608366 </data>
                    <data bit_width="128"> 3.38248257244721 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.118333287637326 </data>
                    <data bit_width="8"> 0.22334325079492 </data>
                    <data bit_width="16"> 0.449920943051351 </data>
                    <data bit_width="32"> 0.949724974295996 </data>
                    <data bit_width="128"> 3.8010718795815 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.119810111193618 </data>
                    <data bit_width="8"> 0.228457012195122 </data>
                    <data bit_width="16"> 0.47214675320348 </data>
                    <data bit_width="32"> 0.974615385512462 </data>
                    <data bit_width="128"> 4.14543260076922 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,1,4">
                <max>
                  <data bit_width="4"> 0.188410208297633 </data>
                  <data bit_width="8"> 0.385435541735687 </data>
                  <data bit_width="16"> 0.701086229793797 </data>
                  <data bit_width="32"> 1.45377488885398 </data>
                  <data bit_width="128"> 6.10816778193484 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.136709900563584 </data>
                  <data bit_width="8"> 0.244837977904076 </data>
                  <data bit_width="16"> 0.500706467413035 </data>
                  <data bit_width="32"> 1.04709906394585 </data>
                  <data bit_width="128"> 4.76463246558519 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.136709900563584 </data>
                    <data bit_width="8"> 0.244837977904076 </data>
                    <data bit_width="16"> 0.500706467413035 </data>
                    <data bit_width="32"> 1.04709906394585 </data>
                    <data bit_width="128"> 4.76463246558519 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.188410208297633 </data>
                    <data bit_width="8"> 0.385435541735687 </data>
                    <data bit_width="16"> 0.701086229793797 </data>
                    <data bit_width="32"> 1.45377488885398 </data>
                    <data bit_width="128"> 6.10816778193484 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.167029803792769 </data>
                    <data bit_width="8"> 0.282177052036328 </data>
                    <data bit_width="16"> 0.617657629091221 </data>
                    <data bit_width="32"> 1.27741035276366 </data>
                    <data bit_width="128"> 5.49910151272824 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,2,1">
                <max>
                  <data bit_width="4"> 0.116648243321719 </data>
                  <data bit_width="8"> 0.225228192532511 </data>
                  <data bit_width="16"> 0.466102243864359 </data>
                  <data bit_width="32"> 0.973668789151006 </data>
                  <data bit_width="128"> 4.17702850026656 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.083075406504065 </data>
                  <data bit_width="8"> 0.159367347346776 </data>
                  <data bit_width="16"> 0.335328166352507 </data>
                  <data bit_width="32"> 0.664886342605815 </data>
                  <data bit_width="128"> 3.46141630776261 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.083075406504065 </data>
                    <data bit_width="8"> 0.159367347346776 </data>
                    <data bit_width="16"> 0.335328166352507 </data>
                    <data bit_width="32"> 0.664886342605815 </data>
                    <data bit_width="128"> 3.46141630776261 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.1072900001904 </data>
                    <data bit_width="8"> 0.209257088355134 </data>
                    <data bit_width="16"> 0.4192449984292 </data>
                    <data bit_width="32"> 0.941684338169494 </data>
                    <data bit_width="128"> 4.17702850026656 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.116648243321719 </data>
                    <data bit_width="8"> 0.225228192532511 </data>
                    <data bit_width="16"> 0.466102243864359 </data>
                    <data bit_width="32"> 0.973668789151006 </data>
                    <data bit_width="128"> 3.83279491393919 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,2,2">
                <max>
                  <data bit_width="4"> 0.143745326393252 </data>
                  <data bit_width="8"> 0.267124508291921 </data>
                  <data bit_width="16"> 0.563402336208374 </data>
                  <data bit_width="32"> 1.14897237723958 </data>
                  <data bit_width="128"> 4.90745851944936 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.103174287665886 </data>
                  <data bit_width="8"> 0.200311662953866 </data>
                  <data bit_width="16"> 0.414631743017079 </data>
                  <data bit_width="32"> 0.862478553102568 </data>
                  <data bit_width="128"> 3.85802152353344 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.103174287665886 </data>
                    <data bit_width="8"> 0.200311662953866 </data>
                    <data bit_width="16"> 0.414631743017079 </data>
                    <data bit_width="32"> 0.862478553102568 </data>
                    <data bit_width="128"> 3.85802152353344 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.143745326393252 </data>
                    <data bit_width="8"> 0.257860170931627 </data>
                    <data bit_width="16"> 0.563402336208374 </data>
                    <data bit_width="32"> 1.11186831077093 </data>
                    <data bit_width="128"> 4.90745851944936 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.140317117676739 </data>
                    <data bit_width="8"> 0.267124508291921 </data>
                    <data bit_width="16"> 0.553973792625807 </data>
                    <data bit_width="32"> 1.14897237723958 </data>
                    <data bit_width="128"> 4.86539154790465 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,2,4">
                <max>
                  <data bit_width="4"> 0.208448681479789 </data>
                  <data bit_width="8"> 0.434037694446031 </data>
                  <data bit_width="16"> 0.800635091439615 </data>
                  <data bit_width="32"> 1.62166369499819 </data>
                  <data bit_width="128"> 7.33554978294397 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.145279746672759 </data>
                  <data bit_width="8"> 0.261977670360427 </data>
                  <data bit_width="16"> 0.538090544020487 </data>
                  <data bit_width="32"> 1.12869240327678 </data>
                  <data bit_width="128"> 5.27837228203957 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.145279746672759 </data>
                    <data bit_width="8"> 0.261977670360427 </data>
                    <data bit_width="16"> 0.538090544020487 </data>
                    <data bit_width="32"> 1.12869240327678 </data>
                    <data bit_width="128"> 5.27837228203957 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.208448681479789 </data>
                    <data bit_width="8"> 0.434037694446031 </data>
                    <data bit_width="16"> 0.800635091439615 </data>
                    <data bit_width="32"> 1.62166369499819 </data>
                    <data bit_width="128"> 7.33554978294397 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.187536825031892 </data>
                    <data bit_width="8"> 0.344102965242474 </data>
                    <data bit_width="16"> 0.699484726585556 </data>
                    <data bit_width="32"> 1.45164834447173 </data>
                    <data bit_width="128"> 6.49535758601321 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,4,1">
                <max>
                  <data bit_width="4"> 0.157662271043963 </data>
                  <data bit_width="8"> 0.302563213762114 </data>
                  <data bit_width="16"> 0.629756409817026 </data>
                  <data bit_width="32"> 1.32238283067725 </data>
                  <data bit_width="128"> 5.33526916614307 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.100215098960416 </data>
                  <data bit_width="8"> 0.193646732259477 </data>
                  <data bit_width="16"> 0.410096232935397 </data>
                  <data bit_width="32"> 0.867497820395651 </data>
                  <data bit_width="128"> 4.54581095395175 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.100215098960416 </data>
                    <data bit_width="8"> 0.193646732259477 </data>
                    <data bit_width="16"> 0.410096232935397 </data>
                    <data bit_width="32"> 0.867497820395651 </data>
                    <data bit_width="128"> 4.54581095395175 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.153725973658156 </data>
                    <data bit_width="8"> 0.289835818767731 </data>
                    <data bit_width="16"> 0.568727006102321 </data>
                    <data bit_width="32"> 1.29619341334895 </data>
                    <data bit_width="128"> 5.33526916614307 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.157662271043963 </data>
                    <data bit_width="8"> 0.302563213762114 </data>
                    <data bit_width="16"> 0.629756409817026 </data>
                    <data bit_width="32"> 1.32238283067725 </data>
                    <data bit_width="128"> 5.24263880757221 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,4,2">
                <max>
                  <data bit_width="4"> 0.187962157041945 </data>
                  <data bit_width="8"> 0.367780279316845 </data>
                  <data bit_width="16"> 0.717627987852478 </data>
                  <data bit_width="32"> 1.49768647683784 </data>
                  <data bit_width="128"> 6.62930419356067 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.120313987262238 </data>
                  <data bit_width="8"> 0.234591047866568 </data>
                  <data bit_width="16"> 0.489399780563965 </data>
                  <data bit_width="32"> 1.02566534767046 </data>
                  <data bit_width="128"> 5.06710820148131 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.120313987262238 </data>
                    <data bit_width="8"> 0.234591047866568 </data>
                    <data bit_width="16"> 0.489399780563965 </data>
                    <data bit_width="32"> 1.02566534767046 </data>
                    <data bit_width="128"> 5.06710820148131 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.187962157041945 </data>
                    <data bit_width="8"> 0.356627513756402 </data>
                    <data bit_width="16"> 0.69054949877192 </data>
                    <data bit_width="32"> 1.45313177752708 </data>
                    <data bit_width="128"> 6.62930419356067 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.181331159916986 </data>
                    <data bit_width="8"> 0.367780279316845 </data>
                    <data bit_width="16"> 0.717627987852478 </data>
                    <data bit_width="32"> 1.49768647683784 </data>
                    <data bit_width="128"> 6.57525680204109 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,4,4">
                <max>
                  <data bit_width="4"> 0.250362646846023 </data>
                  <data bit_width="8"> 0.501755096770815 </data>
                  <data bit_width="16"> 1.02648289184326 </data>
                  <data bit_width="32"> 2.11426427381428 </data>
                  <data bit_width="128"> 9.35572385617182 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.162419453647113 </data>
                  <data bit_width="8"> 0.296257055273129 </data>
                  <data bit_width="16"> 0.612858581567373 </data>
                  <data bit_width="32"> 1.29187931422669 </data>
                  <data bit_width="128"> 6.30387911787666 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.162419453647113 </data>
                    <data bit_width="8"> 0.296257055273129 </data>
                    <data bit_width="16"> 0.612858581567373 </data>
                    <data bit_width="32"> 1.29187931422669 </data>
                    <data bit_width="128"> 6.30387911787666 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.250362646846023 </data>
                    <data bit_width="8"> 0.501755096770815 </data>
                    <data bit_width="16"> 1.02648289184326 </data>
                    <data bit_width="32"> 2.11426427381428 </data>
                    <data bit_width="128"> 9.35572385617182 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.228550852516136 </data>
                    <data bit_width="8"> 0.428146031349365 </data>
                    <data bit_width="16"> 0.918309143485463 </data>
                    <data bit_width="32"> 1.80036244430799 </data>
                    <data bit_width="128"> 7.94010334866053 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,1,1">
                <max>
                  <data bit_width="4"> 0.191408538251366 </data>
                  <data bit_width="8"> 0.391737342205975 </data>
                  <data bit_width="16"> 0.85858118609699 </data>
                  <data bit_width="32"> 1.69609053711849 </data>
                  <data bit_width="128"> 7.23905796681327 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.162073174063708 </data>
                  <data bit_width="8"> 0.326599764855962 </data>
                  <data bit_width="16"> 0.683344245159079 </data>
                  <data bit_width="32"> 1.29473670912587 </data>
                  <data bit_width="128"> 6.03861134117781 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.162073174063708 </data>
                    <data bit_width="8"> 0.326599764855962 </data>
                    <data bit_width="16"> 0.683344245159079 </data>
                    <data bit_width="32"> 1.29473670912587 </data>
                    <data bit_width="128"> 6.03861134117781 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.18862224967156 </data>
                    <data bit_width="8"> 0.375259180613469 </data>
                    <data bit_width="16"> 0.85858118609699 </data>
                    <data bit_width="32"> 1.69609053711849 </data>
                    <data bit_width="128"> 7.23905796681327 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.191408538251366 </data>
                    <data bit_width="8"> 0.391737342205975 </data>
                    <data bit_width="16"> 0.734327734620437 </data>
                    <data bit_width="32"> 1.46468512214162 </data>
                    <data bit_width="128"> 6.08370351645056 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,1,2">
                <max>
                  <data bit_width="4"> 0.248567971858875 </data>
                  <data bit_width="8"> 0.498862490003998 </data>
                  <data bit_width="16"> 1.00612540507606 </data>
                  <data bit_width="32"> 2.04901391372023 </data>
                  <data bit_width="128"> 8.95851666761867 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.202542884274861 </data>
                  <data bit_width="8"> 0.404584347213496 </data>
                  <data bit_width="16"> 0.797455966422955 </data>
                  <data bit_width="32"> 1.59914015227242 </data>
                  <data bit_width="128"> 7.38864424468308 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.202542884274861 </data>
                    <data bit_width="8"> 0.404584347213496 </data>
                    <data bit_width="16"> 0.797455966422955 </data>
                    <data bit_width="32"> 1.59914015227242 </data>
                    <data bit_width="128"> 7.38864424468308 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.248567971858875 </data>
                    <data bit_width="8"> 0.498862490003998 </data>
                    <data bit_width="16"> 1.00612540507606 </data>
                    <data bit_width="32"> 2.04901391372023 </data>
                    <data bit_width="128"> 8.95851666761867 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.247373352325736 </data>
                    <data bit_width="8"> 0.476129128348661 </data>
                    <data bit_width="16"> 0.983364094838255 </data>
                    <data bit_width="32"> 1.97751953908913 </data>
                    <data bit_width="128"> 8.82623606057577 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,1,4">
                <max>
                  <data bit_width="4"> 0.426402925258468 </data>
                  <data bit_width="8"> 0.772172181127549 </data>
                  <data bit_width="16"> 1.45565611184098 </data>
                  <data bit_width="32"> 3.0985524782944 </data>
                  <data bit_width="128"> 15.1511400649264 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.28789268459283 </data>
                  <data bit_width="8"> 0.549268643494983 </data>
                  <data bit_width="16"> 1.13464135821862 </data>
                  <data bit_width="32"> 2.27591557305649 </data>
                  <data bit_width="128"> 10.5017870085299 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.28789268459283 </data>
                    <data bit_width="8"> 0.549268643494983 </data>
                    <data bit_width="16"> 1.13464135821862 </data>
                    <data bit_width="32"> 2.27591557305649 </data>
                    <data bit_width="128"> 10.5017870085299 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.426402925258468 </data>
                    <data bit_width="8"> 0.772172181127549 </data>
                    <data bit_width="16"> 1.45565611184098 </data>
                    <data bit_width="32"> 3.0985524782944 </data>
                    <data bit_width="128"> 15.1511400649264 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.363123415871747 </data>
                    <data bit_width="8"> 0.63328881614021 </data>
                    <data bit_width="16"> 1.26922026951124 </data>
                    <data bit_width="32"> 2.66094850202776 </data>
                    <data bit_width="128"> 12.2035523588184 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,2,1">
                <max>
                  <data bit_width="4"> 0.235867044134727 </data>
                  <data bit_width="8"> 0.471129675034748 </data>
                  <data bit_width="16"> 1.00493133746501 </data>
                  <data bit_width="32"> 2.03809868362179 </data>
                  <data bit_width="128"> 9.15065335484853 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.189553302964528 </data>
                  <data bit_width="8"> 0.384836358075817 </data>
                  <data bit_width="16"> 0.790783540155366 </data>
                  <data bit_width="32"> 1.52210112050418 </data>
                  <data bit_width="128"> 7.20200015232002 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.189553302964528 </data>
                    <data bit_width="8"> 0.384836358075817 </data>
                    <data bit_width="16"> 0.790783540155366 </data>
                    <data bit_width="32"> 1.52210112050418 </data>
                    <data bit_width="128"> 7.20200015232002 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.235867044134727 </data>
                    <data bit_width="8"> 0.461379924458788 </data>
                    <data bit_width="16"> 1.00493133746501 </data>
                    <data bit_width="32"> 2.03809868362179 </data>
                    <data bit_width="128"> 9.15065335484853 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.231571451419432 </data>
                    <data bit_width="8"> 0.471129675034748 </data>
                    <data bit_width="16"> 0.928847675929628 </data>
                    <data bit_width="32"> 1.85905292835247 </data>
                    <data bit_width="128"> 7.24697053845129 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,2,2">
                <max>
                  <data bit_width="4"> 0.302954147388664 </data>
                  <data bit_width="8"> 0.578898486081758 </data>
                  <data bit_width="16"> 1.16490536404486 </data>
                  <data bit_width="32"> 2.41708492388759 </data>
                  <data bit_width="128"> 10.7153567144571 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.23002299841968 </data>
                  <data bit_width="8"> 0.46258294015727 </data>
                  <data bit_width="16"> 0.958556542145047 </data>
                  <data bit_width="32"> 1.91873701590792 </data>
                  <data bit_width="128"> 8.74817762633042 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.23002299841968 </data>
                    <data bit_width="8"> 0.46258294015727 </data>
                    <data bit_width="16"> 0.958556542145047 </data>
                    <data bit_width="32"> 1.91873701590792 </data>
                    <data bit_width="128"> 8.74817762633042 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.302954147388664 </data>
                    <data bit_width="8"> 0.578898486081758 </data>
                    <data bit_width="16"> 1.16490536404486 </data>
                    <data bit_width="32"> 2.41708492388759 </data>
                    <data bit_width="128"> 10.7153567144571 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.287536236457798 </data>
                    <data bit_width="8"> 0.555521432141429 </data>
                    <data bit_width="16"> 1.14435113240418 </data>
                    <data bit_width="32"> 2.31286856543097 </data>
                    <data bit_width="128"> 10.6467717972335 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,2,4">
                <max>
                  <data bit_width="4"> 0.474503453380552 </data>
                  <data bit_width="8"> 0.865310614087698 </data>
                  <data bit_width="16"> 1.61827021881723 </data>
                  <data bit_width="32"> 3.48611113602178 </data>
                  <data bit_width="128"> 16.5338105829097 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.315372798737648 </data>
                  <data bit_width="8"> 0.607505207440833 </data>
                  <data bit_width="16"> 1.25277467608195 </data>
                  <data bit_width="32"> 2.52114788394166 </data>
                  <data bit_width="128"> 11.7432119414139 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.315372798737648 </data>
                    <data bit_width="8"> 0.607505207440833 </data>
                    <data bit_width="16"> 1.25277467608195 </data>
                    <data bit_width="32"> 2.52114788394166 </data>
                    <data bit_width="128"> 11.7432119414139 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.474503453380552 </data>
                    <data bit_width="8"> 0.865310614087698 </data>
                    <data bit_width="16"> 1.61827021881723 </data>
                    <data bit_width="32"> 3.48611113602178 </data>
                    <data bit_width="128"> 16.5338105829097 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.406606534053045 </data>
                    <data bit_width="8"> 0.712681178004988 </data>
                    <data bit_width="16"> 1.43020730707717 </data>
                    <data bit_width="32"> 3.07930887359342 </data>
                    <data bit_width="128"> 14.5173050570248 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,4,1">
                <max>
                  <data bit_width="4"> 0.341312013765922 </data>
                  <data bit_width="8"> 0.632514793130367 </data>
                  <data bit_width="16"> 1.331493769635 </data>
                  <data bit_width="32"> 2.68902135026942 </data>
                  <data bit_width="128"> 12.4182971901715 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.243766077140572 </data>
                  <data bit_width="8"> 0.498079053854649 </data>
                  <data bit_width="16"> 1.06780739156718 </data>
                  <data bit_width="32"> 2.08198761043202 </data>
                  <data bit_width="128"> 9.7907981524057 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.243766077140572 </data>
                    <data bit_width="8"> 0.498079053854649 </data>
                    <data bit_width="16"> 1.06780739156718 </data>
                    <data bit_width="32"> 2.08198761043202 </data>
                    <data bit_width="128"> 9.7907981524057 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.341312013765922 </data>
                    <data bit_width="8"> 0.595872665219626 </data>
                    <data bit_width="16"> 1.331493769635 </data>
                    <data bit_width="32"> 2.68902135026942 </data>
                    <data bit_width="128"> 12.4182971901715 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.333711265255802 </data>
                    <data bit_width="8"> 0.632514793130367 </data>
                    <data bit_width="16"> 1.25637802926448 </data>
                    <data bit_width="32"> 2.54214906299385 </data>
                    <data bit_width="128"> 9.88505174573028 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,4,2">
                <max>
                  <data bit_width="4"> 0.397163667628187 </data>
                  <data bit_width="8"> 0.73043030978085 </data>
                  <data bit_width="16"> 1.49543163567906 </data>
                  <data bit_width="32"> 3.1216150073304 </data>
                  <data bit_width="128"> 14.6825905054645 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.284235758077721 </data>
                  <data bit_width="8"> 0.576063636212182 </data>
                  <data bit_width="16"> 1.19301098393976 </data>
                  <data bit_width="32"> 2.40589218169875 </data>
                  <data bit_width="128"> 11.2082045900687 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.284235758077721 </data>
                    <data bit_width="8"> 0.576063636212182 </data>
                    <data bit_width="16"> 1.19301098393976 </data>
                    <data bit_width="32"> 2.40589218169875 </data>
                    <data bit_width="128"> 11.2082045900687 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.397163667628187 </data>
                    <data bit_width="8"> 0.73043030978085 </data>
                    <data bit_width="16"> 1.49543163567906 </data>
                    <data bit_width="32"> 3.1216150073304 </data>
                    <data bit_width="128"> 14.6681115501418 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.393092449210792 </data>
                    <data bit_width="8"> 0.716906550237048 </data>
                    <data bit_width="16"> 1.47188148550104 </data>
                    <data bit_width="32"> 3.07408031025685 </data>
                    <data bit_width="128"> 14.6825905054645 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,4,4">
                <max>
                  <data bit_width="4"> 0.563874791987967 </data>
                  <data bit_width="8"> 1.04820736800518 </data>
                  <data bit_width="16"> 1.86930947478152 </data>
                  <data bit_width="32"> 4.35725960734754 </data>
                  <data bit_width="128"> 20.9857054202129 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.401568236990918 </data>
                  <data bit_width="8"> 0.720747903457664 </data>
                  <data bit_width="16"> 1.48722900173264 </data>
                  <data bit_width="32"> 3.00830304973249 </data>
                  <data bit_width="128"> 14.6743729962777 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.401568236990918 </data>
                    <data bit_width="8"> 0.720747903457664 </data>
                    <data bit_width="16"> 1.48722900173264 </data>
                    <data bit_width="32"> 3.00830304973249 </data>
                    <data bit_width="128"> 14.6743729962777 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.563874791987967 </data>
                    <data bit_width="8"> 1.04820736800518 </data>
                    <data bit_width="16"> 1.86930947478152 </data>
                    <data bit_width="32"> 4.35725960734754 </data>
                    <data bit_width="128"> 20.9857054202129 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.495587026141924 </data>
                    <data bit_width="8"> 0.930160278745644 </data>
                    <data bit_width="16"> 1.75773766017403 </data>
                    <data bit_width="32"> 3.78515074636812 </data>
                    <data bit_width="128"> 18.0816456898193 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,1,1">
                <max>
                  <data bit_width="4"> 0.438670589383294 </data>
                  <data bit_width="8"> 0.846944285857086 </data>
                  <data bit_width="16"> 1.62765994792559 </data>
                  <data bit_width="32"> 3.44569668418347 </data>
                  <data bit_width="128"> 15.506525254422 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.33759881237981 </data>
                  <data bit_width="8"> 0.630296732735477 </data>
                  <data bit_width="16"> 1.33163264170522 </data>
                  <data bit_width="32"> 2.82382629162621 </data>
                  <data bit_width="128"> 12.8755324508292 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.33759881237981 </data>
                    <data bit_width="8"> 0.630296732735477 </data>
                    <data bit_width="16"> 1.33163264170522 </data>
                    <data bit_width="32"> 2.82382629162621 </data>
                    <data bit_width="128"> 12.8755324508292 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.438670589383294 </data>
                    <data bit_width="8"> 0.846944285857086 </data>
                    <data bit_width="16"> 1.62765994792559 </data>
                    <data bit_width="32"> 3.44569668418347 </data>
                    <data bit_width="128"> 15.506525254422 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.385347947725672 </data>
                    <data bit_width="8"> 0.776886743397879 </data>
                    <data bit_width="16"> 1.52163534705166 </data>
                    <data bit_width="32"> 3.21687824132252 </data>
                    <data bit_width="128"> 14.4906574201272 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,1,2">
                <max>
                  <data bit_width="4"> 0.537912334589974 </data>
                  <data bit_width="8"> 1.09685164719826 </data>
                  <data bit_width="16"> 2.07963131699701 </data>
                  <data bit_width="32"> 4.35208403614745 </data>
                  <data bit_width="128"> 20.624756049961 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.428807039327126 </data>
                  <data bit_width="8"> 0.800705922154948 </data>
                  <data bit_width="16"> 1.65079301707888 </data>
                  <data bit_width="32"> 3.49452713343234 </data>
                  <data bit_width="128"> 16.1336637221302 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.428807039327126 </data>
                    <data bit_width="8"> 0.800705922154948 </data>
                    <data bit_width="16"> 1.65079301707888 </data>
                    <data bit_width="32"> 3.49452713343234 </data>
                    <data bit_width="128"> 16.1336637221302 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.537912334589974 </data>
                    <data bit_width="8"> 1.09685164719826 </data>
                    <data bit_width="16"> 2.07963131699701 </data>
                    <data bit_width="32"> 4.31151804540089 </data>
                    <data bit_width="128"> 20.624756049961 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.515107851859256 </data>
                    <data bit_width="8"> 1.02757399635384 </data>
                    <data bit_width="16"> 2.06605346147255 </data>
                    <data bit_width="32"> 4.35208403614745 </data>
                    <data bit_width="128"> 19.6032914957826 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,1,4">
                <max>
                  <data bit_width="4"> 0.845668173444908 </data>
                  <data bit_width="8"> 1.62620731088517 </data>
                  <data bit_width="16"> 3.3410631283201 </data>
                  <data bit_width="32"> 6.87363493959559 </data>
                  <data bit_width="128"> 33.3224299565888 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.612929760714762 </data>
                  <data bit_width="8"> 1.17772459468594 </data>
                  <data bit_width="16"> 2.3693512735382 </data>
                  <data bit_width="32"> 5.03984325174692 </data>
                  <data bit_width="128"> 24.3454664265246 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.612929760714762 </data>
                    <data bit_width="8"> 1.17772459468594 </data>
                    <data bit_width="16"> 2.3693512735382 </data>
                    <data bit_width="32"> 5.03984325174692 </data>
                    <data bit_width="128"> 24.3454664265246 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.845668173444908 </data>
                    <data bit_width="8"> 1.62620731088517 </data>
                    <data bit_width="16"> 3.3410631283201 </data>
                    <data bit_width="32"> 6.87363493959559 </data>
                    <data bit_width="128"> 33.3224299565888 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.76074556463129 </data>
                    <data bit_width="8"> 1.39493484130157 </data>
                    <data bit_width="16"> 2.8591943989071 </data>
                    <data bit_width="32"> 5.85244836208374 </data>
                    <data bit_width="128"> 27.8678855838617 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,2,1">
                <max>
                  <data bit_width="4"> 0.529319754717161 </data>
                  <data bit_width="8"> 1.07187930732469 </data>
                  <data bit_width="16"> 2.04079175615468 </data>
                  <data bit_width="32"> 4.66131906618305 </data>
                  <data bit_width="128"> 20.6703274790084 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.40034706331753 </data>
                  <data bit_width="8"> 0.742079295900687 </data>
                  <data bit_width="16"> 1.56543827778412 </data>
                  <data bit_width="32"> 3.34281768126083 </data>
                  <data bit_width="128"> 15.7204045465147 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.40034706331753 </data>
                    <data bit_width="8"> 0.742079295900687 </data>
                    <data bit_width="16"> 1.56543827778412 </data>
                    <data bit_width="32"> 3.34281768126083 </data>
                    <data bit_width="128"> 15.7204045465147 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.529319754717161 </data>
                    <data bit_width="8"> 1.07187930732469 </data>
                    <data bit_width="16"> 2.04079175615468 </data>
                    <data bit_width="32"> 4.66131906618305 </data>
                    <data bit_width="128"> 20.6703274790084 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.480965973610556 </data>
                    <data bit_width="8"> 1.00682290321966 </data>
                    <data bit_width="16"> 1.97958344566935 </data>
                    <data bit_width="32"> 4.18704170117667 </data>
                    <data bit_width="128"> 18.9340707169513 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,2,2">
                <max>
                  <data bit_width="4"> 0.634859697787552 </data>
                  <data bit_width="8"> 1.26367142880943 </data>
                  <data bit_width="16"> 2.48928074793892 </data>
                  <data bit_width="32"> 5.2202175306068 </data>
                  <data bit_width="128"> 24.80508726557 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.491555319300851 </data>
                  <data bit_width="8"> 0.974929968488795 </data>
                  <data bit_width="16"> 1.98380701671712 </data>
                  <data bit_width="32"> 4.22499945331391 </data>
                  <data bit_width="128"> 19.915887811542 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.491555319300851 </data>
                    <data bit_width="8"> 0.974929968488795 </data>
                    <data bit_width="16"> 1.98380701671712 </data>
                    <data bit_width="32"> 4.22499945331391 </data>
                    <data bit_width="128"> 19.915887811542 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.634859697787552 </data>
                    <data bit_width="8"> 1.26367142880943 </data>
                    <data bit_width="16"> 2.48928074793892 </data>
                    <data bit_width="32"> 5.2202175306068 </data>
                    <data bit_width="128"> 24.80508726557 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.610725819910131 </data>
                    <data bit_width="8"> 1.21742725433636 </data>
                    <data bit_width="16"> 2.44345318967651 </data>
                    <data bit_width="32"> 5.18224350878696 </data>
                    <data bit_width="128"> 24.1020109813218 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,2,4">
                <max>
                  <data bit_width="4"> 1.01003729841397 </data>
                  <data bit_width="8"> 1.94142906456465 </data>
                  <data bit_width="16"> 3.77256788879686 </data>
                  <data bit_width="32"> 7.95933393761543 </data>
                  <data bit_width="128"> 38.4816980945717 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.675678040688486 </data>
                  <data bit_width="8"> 1.30103696997392 </data>
                  <data bit_width="16"> 2.622643743931 </data>
                  <data bit_width="32"> 5.59498949682032 </data>
                  <data bit_width="128"> 27.4968528212524 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.675678040688486 </data>
                    <data bit_width="8"> 1.30103696997392 </data>
                    <data bit_width="16"> 2.622643743931 </data>
                    <data bit_width="32"> 5.59498949682032 </data>
                    <data bit_width="128"> 27.4968528212524 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.01003729841397 </data>
                    <data bit_width="8"> 1.94142906456465 </data>
                    <data bit_width="16"> 3.77256788879686 </data>
                    <data bit_width="32"> 7.95933393761543 </data>
                    <data bit_width="128"> 38.4816980945717 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.898038756878201 </data>
                    <data bit_width="8"> 1.5847880992841 </data>
                    <data bit_width="16"> 3.25841761509682 </data>
                    <data bit_width="32"> 6.99275907208545 </data>
                    <data bit_width="128"> 33.0887845754555 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,4,1">
                <max>
                  <data bit_width="4"> 0.74809269006683 </data>
                  <data bit_width="8"> 1.75001358266217 </data>
                  <data bit_width="16"> 3.00266077545172 </data>
                  <data bit_width="32"> 6.44386404676225 </data>
                  <data bit_width="128"> 30.1734663277546 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.525843594466975 </data>
                  <data bit_width="8"> 1.03922949058472 </data>
                  <data bit_width="16"> 2.1575575034272 </data>
                  <data bit_width="32"> 4.62416828292492 </data>
                  <data bit_width="128"> 22.3742422673788 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.525843594466975 </data>
                    <data bit_width="8"> 1.03922949058472 </data>
                    <data bit_width="16"> 2.1575575034272 </data>
                    <data bit_width="32"> 4.62416828292492 </data>
                    <data bit_width="128"> 22.3742422673788 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.74809269006683 </data>
                    <data bit_width="8"> 1.75001358266217 </data>
                    <data bit_width="16"> 3.00266077545172 </data>
                    <data bit_width="32"> 6.44386404676225 </data>
                    <data bit_width="128"> 30.1734663277546 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.672201996820319 </data>
                    <data bit_width="8"> 1.38652941918471 </data>
                    <data bit_width="16"> 2.75461290555206 </data>
                    <data bit_width="32"> 5.84798353729937 </data>
                    <data bit_width="128"> 27.2159514170522 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,4,2">
                <max>
                  <data bit_width="4"> 0.897154100978656 </data>
                  <data bit_width="8"> 1.63819168213667 </data>
                  <data bit_width="16"> 3.30465702480912 </data>
                  <data bit_width="32"> 7.20568543415967 </data>
                  <data bit_width="128"> 36.1873107899697 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.617051821414291 </data>
                  <data bit_width="8"> 1.22155471882675 </data>
                  <data bit_width="16"> 2.49039242184079 </data>
                  <data bit_width="32"> 5.33002433336189 </data>
                  <data bit_width="128"> 26.089493518069 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.617051821414291 </data>
                    <data bit_width="8"> 1.22155471882675 </data>
                    <data bit_width="16"> 2.49039242184079 </data>
                    <data bit_width="32"> 5.33002433336189 </data>
                    <data bit_width="128"> 26.089493518069 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.897154100978656 </data>
                    <data bit_width="8"> 1.63819168213667 </data>
                    <data bit_width="16"> 3.25697404252585 </data>
                    <data bit_width="32"> 7.20568543415967 </data>
                    <data bit_width="128"> 36.1873107899697 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.801961871917899 </data>
                    <data bit_width="8"> 1.5971337703014 </data>
                    <data bit_width="16"> 3.30465702480912 </data>
                    <data bit_width="32"> 7.14729361231698 </data>
                    <data bit_width="128"> 33.0409577240532 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,4,4">
                <max>
                  <data bit_width="4"> 1.22793202742712 </data>
                  <data bit_width="8"> 2.31043743216999 </data>
                  <data bit_width="16"> 4.70574744435559 </data>
                  <data bit_width="32"> 10.395131381971 </data>
                  <data bit_width="128"> 48.4403708754593 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.801174542801927 </data>
                  <data bit_width="8"> 1.54766172031188 </data>
                  <data bit_width="16"> 3.12922914905466 </data>
                  <data bit_width="32"> 6.71124221454275 </data>
                  <data bit_width="128"> 34.7816156275585 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.801174542801927 </data>
                    <data bit_width="8"> 1.54766172031188 </data>
                    <data bit_width="16"> 3.12922914905466 </data>
                    <data bit_width="32"> 6.71124221454275 </data>
                    <data bit_width="128"> 34.7816156275585 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.22793202742712 </data>
                    <data bit_width="8"> 2.31043743216999 </data>
                    <data bit_width="16"> 4.70574744435559 </data>
                    <data bit_width="32"> 10.395131381971 </data>
                    <data bit_width="128"> 48.4403708754593 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.990754763094762 </data>
                    <data bit_width="8"> 2.07316743136079 </data>
                    <data bit_width="16"> 4.25966332229013 </data>
                    <data bit_width="32"> 9.18136465651834 </data>
                    <data bit_width="128"> 42.9256608368557 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,1,1">
                <max>
                  <data bit_width="4"> 0.865774005159841 </data>
                  <data bit_width="8"> 1.74640290836047 </data>
                  <data bit_width="16"> 3.63099551845928 </data>
                  <data bit_width="32"> 7.47150869937739 </data>
                  <data bit_width="128"> 36.6929716208755 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.673206640439062 </data>
                  <data bit_width="8"> 1.36302807734049 </data>
                  <data bit_width="16"> 2.86636647436264 </data>
                  <data bit_width="32"> 6.22512527727004 </data>
                  <data bit_width="128"> 28.3308142516803 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.673206640439062 </data>
                    <data bit_width="8"> 1.36302807734049 </data>
                    <data bit_width="16"> 2.86636647436264 </data>
                    <data bit_width="32"> 6.22512527727004 </data>
                    <data bit_width="128"> 28.3308142516803 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.858342256430761 </data>
                    <data bit_width="8"> 1.57793339592734 </data>
                    <data bit_width="16"> 3.53934319129491 </data>
                    <data bit_width="32"> 7.42045211296434 </data>
                    <data bit_width="128"> 36.6929716208755 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.865774005159841 </data>
                    <data bit_width="8"> 1.74640290836047 </data>
                    <data bit_width="16"> 3.63099551845928 </data>
                    <data bit_width="32"> 7.47150869937739 </data>
                    <data bit_width="128"> 34.7726460011234 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,1,2">
                <max>
                  <data bit_width="4"> 1.13858079339693 </data>
                  <data bit_width="8"> 2.19938298870928 </data>
                  <data bit_width="16"> 4.46625758172921 </data>
                  <data bit_width="32"> 9.52280917989947 </data>
                  <data bit_width="128"> 44.8545879267341 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.914082725243236 </data>
                  <data bit_width="8"> 1.70119150078064 </data>
                  <data bit_width="16"> 3.56260792754327 </data>
                  <data bit_width="32"> 7.699112505236 </data>
                  <data bit_width="128"> 37.5892128267741 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.914082725243236 </data>
                    <data bit_width="8"> 1.70119150078064 </data>
                    <data bit_width="16"> 3.56260792754327 </data>
                    <data bit_width="32"> 7.699112505236 </data>
                    <data bit_width="128"> 37.5892128267741 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.13858079339693 </data>
                    <data bit_width="8"> 2.19938298870928 </data>
                    <data bit_width="16"> 4.46625758172921 </data>
                    <data bit_width="32"> 9.52280917989947 </data>
                    <data bit_width="128"> 43.3595423437768 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 1.08071238575998 </data>
                    <data bit_width="8"> 2.14993267026523 </data>
                    <data bit_width="16"> 4.4317768613983 </data>
                    <data bit_width="32"> 9.47860532120485 </data>
                    <data bit_width="128"> 44.8545879267341 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,1,4">
                <max>
                  <data bit_width="4"> 2.02706608023457 </data>
                  <data bit_width="8"> 3.66975094271815 </data>
                  <data bit_width="16"> 7.38514025199444 </data>
                  <data bit_width="32"> 15.9281153609985 </data>
                  <data bit_width="128"> 78.6395040198206 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.31388490460958 </data>
                  <data bit_width="8"> 2.50162351345176 </data>
                  <data bit_width="16"> 5.19158268621123 </data>
                  <data bit_width="32"> 11.284849899326 </data>
                  <data bit_width="128"> 55.7941815833191 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.31388490460958 </data>
                    <data bit_width="8"> 2.50162351345176 </data>
                    <data bit_width="16"> 5.19158268621123 </data>
                    <data bit_width="32"> 11.284849899326 </data>
                    <data bit_width="128"> 55.7941815833191 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 2.02706608023457 </data>
                    <data bit_width="8"> 3.66975094271815 </data>
                    <data bit_width="16"> 7.38514025199444 </data>
                    <data bit_width="32"> 15.9281153609985 </data>
                    <data bit_width="128"> 78.6395040198206 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 1.49743708825993 </data>
                    <data bit_width="8"> 2.97452494073799 </data>
                    <data bit_width="16"> 6.28236986443518 </data>
                    <data bit_width="32"> 13.204494058091 </data>
                    <data bit_width="128"> 62.1504895065783 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,2,1">
                <max>
                  <data bit_width="4"> 1.08211714385674 </data>
                  <data bit_width="8"> 2.15564583309533 </data>
                  <data bit_width="16"> 4.61302597627616 </data>
                  <data bit_width="32"> 9.63228083028693 </data>
                  <data bit_width="128"> 48.4506904083605 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.800388085004094 </data>
                  <data bit_width="8"> 1.61236891029303 </data>
                  <data bit_width="16"> 3.40054524142724 </data>
                  <data bit_width="32"> 7.42333553935569 </data>
                  <data bit_width="128"> 34.8560650144704 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.800388085004094 </data>
                    <data bit_width="8"> 1.61236891029303 </data>
                    <data bit_width="16"> 3.40054524142724 </data>
                    <data bit_width="32"> 7.42333553935569 </data>
                    <data bit_width="128"> 34.8560650144704 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.08211714385674 </data>
                    <data bit_width="8"> 2.15564583309533 </data>
                    <data bit_width="16"> 4.61302597627616 </data>
                    <data bit_width="32"> 9.52723821185811 </data>
                    <data bit_width="128"> 48.4506904083605 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 1.07335925367948 </data>
                    <data bit_width="8"> 2.15502619642619 </data>
                    <data bit_width="16"> 4.47938523614364 </data>
                    <data bit_width="32"> 9.63228083028693 </data>
                    <data bit_width="128"> 44.9930035426306 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,2,2">
                <max>
                  <data bit_width="4"> 1.32844381318901 </data>
                  <data bit_width="8"> 2.6920393487843 </data>
                  <data bit_width="16"> 5.60380293573047 </data>
                  <data bit_width="32"> 12.0365228165876 </data>
                  <data bit_width="128"> 56.7168668246987 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.05388241370119 </data>
                  <data bit_width="8"> 2.06046766555283 </data>
                  <data bit_width="16"> 4.31158358823137 </data>
                  <data bit_width="32"> 9.33979272862284 </data>
                  <data bit_width="128"> 45.574024854344 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.05388241370119 </data>
                    <data bit_width="8"> 2.06046766555283 </data>
                    <data bit_width="16"> 4.31158358823137 </data>
                    <data bit_width="32"> 9.33979272862284 </data>
                    <data bit_width="128"> 45.574024854344 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.32844381318901 </data>
                    <data bit_width="8"> 2.6920393487843 </data>
                    <data bit_width="16"> 5.60380293573047 </data>
                    <data bit_width="32"> 12.0365228165876 </data>
                    <data bit_width="128"> 55.5249589152434 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 1.28829757620761 </data>
                    <data bit_width="8"> 2.52760456460273 </data>
                    <data bit_width="16"> 5.28055054026009 </data>
                    <data bit_width="32"> 11.6335850331296 </data>
                    <data bit_width="128"> 56.7168668246987 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,2,4">
                <max>
                  <data bit_width="4"> 2.24709386150302 </data>
                  <data bit_width="8"> 4.14831788641686 </data>
                  <data bit_width="16"> 8.35401516488642 </data>
                  <data bit_width="32"> 17.3860031880105 </data>
                  <data bit_width="128"> 87.622837769654 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.45368470921155 </data>
                  <data bit_width="8"> 2.77087941799471 </data>
                  <data bit_width="16"> 5.76590466860875 </data>
                  <data bit_width="32"> 12.5647648307344 </data>
                  <data bit_width="128"> 65.4926050413168 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.45368470921155 </data>
                    <data bit_width="8"> 2.77087941799471 </data>
                    <data bit_width="16"> 5.76590466860875 </data>
                    <data bit_width="32"> 12.5647648307344 </data>
                    <data bit_width="128"> 65.4926050413168 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 2.24709386150302 </data>
                    <data bit_width="8"> 4.14831788641686 </data>
                    <data bit_width="16"> 8.35401516488642 </data>
                    <data bit_width="32"> 17.3860031880105 </data>
                    <data bit_width="128"> 87.622837769654 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 1.70502227870756 </data>
                    <data bit_width="8"> 3.39537083238133 </data>
                    <data bit_width="16"> 7.17476588221854 </data>
                    <data bit_width="32"> 15.9765855562537 </data>
                    <data bit_width="128"> 73.6864629148341 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,4,1">
                <max>
                  <data bit_width="4"> 1.48852963457474 </data>
                  <data bit_width="8"> 3.07323104044097 </data>
                  <data bit_width="16"> 6.44865658641305 </data>
                  <data bit_width="32"> 15.3964548851888 </data>
                  <data bit_width="128"> 69.4973647445783 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.13354723205956 </data>
                  <data bit_width="8"> 2.24091260067402 </data>
                  <data bit_width="16"> 4.72310285338246 </data>
                  <data bit_width="32"> 10.3472413118086 </data>
                  <data bit_width="128"> 51.4079636002742 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.13354723205956 </data>
                    <data bit_width="8"> 2.24091260067402 </data>
                    <data bit_width="16"> 4.72310285338246 </data>
                    <data bit_width="32"> 10.3472413118086 </data>
                    <data bit_width="128"> 51.4079636002742 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.45319220716475 </data>
                    <data bit_width="8"> 3.07323104044097 </data>
                    <data bit_width="16"> 6.29868402353344 </data>
                    <data bit_width="32"> 15.3964548851888 </data>
                    <data bit_width="128"> 69.4973647445783 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 1.48852963457474 </data>
                    <data bit_width="8"> 3.04863382956341 </data>
                    <data bit_width="16"> 6.44865658641305 </data>
                    <data bit_width="32"> 14.4213631511681 </data>
                    <data bit_width="128"> 66.7089711734354 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,4,2">
                <max>
                  <data bit_width="4"> 1.70346784095885 </data>
                  <data bit_width="8"> 3.66314597684736 </data>
                  <data bit_width="16"> 7.4730849848156 </data>
                  <data bit_width="32"> 17.8324801031968 </data>
                  <data bit_width="128"> 79.5618954799033 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.33348190676111 </data>
                  <data bit_width="8"> 2.60002351368976 </data>
                  <data bit_width="16"> 5.46022755326441 </data>
                  <data bit_width="32"> 11.9059128581901 </data>
                  <data bit_width="128"> 62.1194267828583 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.33348190676111 </data>
                    <data bit_width="8"> 2.60002351368976 </data>
                    <data bit_width="16"> 5.46022755326441 </data>
                    <data bit_width="32"> 11.9059128581901 </data>
                    <data bit_width="128"> 62.1194267828583 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.6695574839112 </data>
                    <data bit_width="8"> 3.66314597684736 </data>
                    <data bit_width="16"> 7.4730849848156 </data>
                    <data bit_width="32"> 17.8324801031968 </data>
                    <data bit_width="128"> 79.1604861031778 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 1.70346784095885 </data>
                    <data bit_width="8"> 3.4381262376002 </data>
                    <data bit_width="16"> 7.28745146274823 </data>
                    <data bit_width="32"> 16.2890015124902 </data>
                    <data bit_width="128"> 79.5618954799033 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,4,4">
                <max>
                  <data bit_width="4"> 2.44580599688696 </data>
                  <data bit_width="8"> 5.06417922045468 </data>
                  <data bit_width="16"> 10.49837505474 </data>
                  <data bit_width="32"> 23.7791639296662 </data>
                  <data bit_width="128"> 119.655761207422 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.7325993709659 </data>
                  <data bit_width="8"> 3.43378273690524 </data>
                  <data bit_width="16"> 6.92151617781459 </data>
                  <data bit_width="32"> 15.6663487878658 </data>
                  <data bit_width="128"> 89.8658691285391 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.7325993709659 </data>
                    <data bit_width="8"> 3.43378273690524 </data>
                    <data bit_width="16"> 6.92151617781459 </data>
                    <data bit_width="32"> 15.6663487878658 </data>
                    <data bit_width="128"> 89.8658691285391 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 2.44580599688696 </data>
                    <data bit_width="8"> 5.06417922045468 </data>
                    <data bit_width="16"> 10.49837505474 </data>
                    <data bit_width="32"> 23.7791639296662 </data>
                    <data bit_width="128"> 119.655761207422 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.23931725666876 </data>
                    <data bit_width="8"> 4.45170657546505 </data>
                    <data bit_width="16"> 9.41668719416995 </data>
                    <data bit_width="32"> 21.1467979772377 </data>
                    <data bit_width="128"> 95.2176718598275 </data>
                  </priority>
                </typ>
              </parameters>
            </est_index>

            <est_index name="aspect_ratio">
              <!-- Dummy yet -->
            </est_index>

            <est_index name="height">
              <!-- Dummy yet -->
            </est_index>

            <est_index name="width">
              <!-- Dummy yet -->
            </est_index>
          </est_type>

          <est_type name="timing">
            <est_index name="delay">
              <unit> ns </unit>

              <parameters name="4,1,1">
                <max>
                  <data bit_width="4"> 1.52 </data>
                  <data bit_width="8"> 1.52 </data>
                  <data bit_width="16"> 1.53 </data>
                  <data bit_width="32"> 1.98 </data>
                  <data bit_width="128"> 4.31 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.15 </data>
                  <data bit_width="8"> 1.31 </data>
                  <data bit_width="16"> 1.39 </data>
                  <data bit_width="32"> 1.20 </data>
                  <data bit_width="128"> 1.37 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.39 </data>
                    <data bit_width="8"> 1.39 </data>
                    <data bit_width="16"> 1.39 </data>
                    <data bit_width="32"> 1.40 </data>
                    <data bit_width="128"> 4.31 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.15 </data>
                    <data bit_width="8"> 1.31 </data>
                    <data bit_width="16"> 1.39 </data>
                    <data bit_width="32"> 1.20 </data>
                    <data bit_width="128"> 1.37 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 1.52 </data>
                    <data bit_width="8"> 1.52 </data>
                    <data bit_width="16"> 1.53 </data>
                    <data bit_width="32"> 1.98 </data>
                    <data bit_width="128"> 2.80 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,1,2">
                <max>
                  <data bit_width="4"> 1.52 </data>
                  <data bit_width="8"> 1.52 </data>
                  <data bit_width="16"> 1.53 </data>
                  <data bit_width="32"> 2.05 </data>
                  <data bit_width="128"> 4.48 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.14 </data>
                  <data bit_width="8"> 1.14 </data>
                  <data bit_width="16"> 1.28 </data>
                  <data bit_width="32"> 1.31 </data>
                  <data bit_width="128"> 1.37 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.39 </data>
                    <data bit_width="8"> 1.39 </data>
                    <data bit_width="16"> 1.40 </data>
                    <data bit_width="32"> 1.40 </data>
                    <data bit_width="128"> 4.48 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.14 </data>
                    <data bit_width="8"> 1.14 </data>
                    <data bit_width="16"> 1.28 </data>
                    <data bit_width="32"> 1.31 </data>
                    <data bit_width="128"> 1.37 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 1.52 </data>
                    <data bit_width="8"> 1.52 </data>
                    <data bit_width="16"> 1.53 </data>
                    <data bit_width="32"> 2.05 </data>
                    <data bit_width="128"> 3.21 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,1,4">
                <max>
                  <data bit_width="4"> 1.52 </data>
                  <data bit_width="8"> 1.52 </data>
                  <data bit_width="16"> 1.53 </data>
                  <data bit_width="32"> 2.05 </data>
                  <data bit_width="128"> 4.88 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.14 </data>
                  <data bit_width="8"> 1.15 </data>
                  <data bit_width="16"> 1.28 </data>
                  <data bit_width="32"> 1.31 </data>
                  <data bit_width="128"> 1.37 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.39 </data>
                    <data bit_width="8"> 1.39 </data>
                    <data bit_width="16"> 1.40 </data>
                    <data bit_width="32"> 1.41 </data>
                    <data bit_width="128"> 4.88 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.14 </data>
                    <data bit_width="8"> 1.15 </data>
                    <data bit_width="16"> 1.28 </data>
                    <data bit_width="32"> 1.31 </data>
                    <data bit_width="128"> 1.37 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 1.52 </data>
                    <data bit_width="8"> 1.52 </data>
                    <data bit_width="16"> 1.53 </data>
                    <data bit_width="32"> 2.05 </data>
                    <data bit_width="128"> 3.37 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,2,1">
                <max>
                  <data bit_width="4"> 1.56 </data>
                  <data bit_width="8"> 1.56 </data>
                  <data bit_width="16"> 1.58 </data>
                  <data bit_width="32"> 2.05 </data>
                  <data bit_width="128"> 4.65 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.33 </data>
                  <data bit_width="8"> 1.37 </data>
                  <data bit_width="16"> 1.29 </data>
                  <data bit_width="32"> 1.37 </data>
                  <data bit_width="128"> 1.53 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.43 </data>
                    <data bit_width="8"> 1.43 </data>
                    <data bit_width="16"> 1.44 </data>
                    <data bit_width="32"> 1.44 </data>
                    <data bit_width="128"> 4.65 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.33 </data>
                    <data bit_width="8"> 1.37 </data>
                    <data bit_width="16"> 1.29 </data>
                    <data bit_width="32"> 1.37 </data>
                    <data bit_width="128"> 1.53 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 1.56 </data>
                    <data bit_width="8"> 1.56 </data>
                    <data bit_width="16"> 1.58 </data>
                    <data bit_width="32"> 2.05 </data>
                    <data bit_width="128"> 3.29 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,2,2">
                <max>
                  <data bit_width="4"> 1.56 </data>
                  <data bit_width="8"> 1.56 </data>
                  <data bit_width="16"> 1.58 </data>
                  <data bit_width="32"> 2.05 </data>
                  <data bit_width="128"> 4.63 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.41 </data>
                  <data bit_width="8"> 1.41 </data>
                  <data bit_width="16"> 1.39 </data>
                  <data bit_width="32"> 1.37 </data>
                  <data bit_width="128"> 1.47 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.43 </data>
                    <data bit_width="8"> 1.43 </data>
                    <data bit_width="16"> 1.44 </data>
                    <data bit_width="32"> 1.45 </data>
                    <data bit_width="128"> 4.63 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.41 </data>
                    <data bit_width="8"> 1.41 </data>
                    <data bit_width="16"> 1.39 </data>
                    <data bit_width="32"> 1.37 </data>
                    <data bit_width="128"> 1.47 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 1.56 </data>
                    <data bit_width="8"> 1.56 </data>
                    <data bit_width="16"> 1.58 </data>
                    <data bit_width="32"> 2.05 </data>
                    <data bit_width="128"> 3.15 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,2,4">
                <max>
                  <data bit_width="4"> 1.56 </data>
                  <data bit_width="8"> 1.58 </data>
                  <data bit_width="16"> 1.58 </data>
                  <data bit_width="32"> 2.04 </data>
                  <data bit_width="128"> 4.85 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.41 </data>
                  <data bit_width="8"> 1.39 </data>
                  <data bit_width="16"> 1.39 </data>
                  <data bit_width="32"> 1.45 </data>
                  <data bit_width="128"> 1.49 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.43 </data>
                    <data bit_width="8"> 1.43 </data>
                    <data bit_width="16"> 1.44 </data>
                    <data bit_width="32"> 1.45 </data>
                    <data bit_width="128"> 4.85 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.41 </data>
                    <data bit_width="8"> 1.39 </data>
                    <data bit_width="16"> 1.39 </data>
                    <data bit_width="32"> 1.46 </data>
                    <data bit_width="128"> 1.49 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 1.56 </data>
                    <data bit_width="8"> 1.58 </data>
                    <data bit_width="16"> 1.58 </data>
                    <data bit_width="32"> 2.04 </data>
                    <data bit_width="128"> 3.48 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,4,1">
                <max>
                  <data bit_width="4"> 1.66 </data>
                  <data bit_width="8"> 1.66 </data>
                  <data bit_width="16"> 1.68 </data>
                  <data bit_width="32"> 2.04 </data>
                  <data bit_width="128"> 4.88 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.34 </data>
                  <data bit_width="8"> 1.34 </data>
                  <data bit_width="16"> 1.47 </data>
                  <data bit_width="32"> 1.47 </data>
                  <data bit_width="128"> 1.61 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.51 </data>
                    <data bit_width="8"> 1.51 </data>
                    <data bit_width="16"> 1.53 </data>
                    <data bit_width="32"> 1.55 </data>
                    <data bit_width="128"> 4.88 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.34 </data>
                    <data bit_width="8"> 1.34 </data>
                    <data bit_width="16"> 1.47 </data>
                    <data bit_width="32"> 1.47 </data>
                    <data bit_width="128"> 1.61 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 1.66 </data>
                    <data bit_width="8"> 1.66 </data>
                    <data bit_width="16"> 1.68 </data>
                    <data bit_width="32"> 2.04 </data>
                    <data bit_width="128"> 3.33 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,4,2">
                <max>
                  <data bit_width="4"> 1.66 </data>
                  <data bit_width="8"> 1.68 </data>
                  <data bit_width="16"> 1.68 </data>
                  <data bit_width="32"> 2.04 </data>
                  <data bit_width="128"> 4.85 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.41 </data>
                  <data bit_width="8"> 1.46 </data>
                  <data bit_width="16"> 1.46 </data>
                  <data bit_width="32"> 1.47 </data>
                  <data bit_width="128"> 1.61 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.51 </data>
                    <data bit_width="8"> 1.51 </data>
                    <data bit_width="16"> 1.53 </data>
                    <data bit_width="32"> 1.55 </data>
                    <data bit_width="128"> 4.85 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.41 </data>
                    <data bit_width="8"> 1.46 </data>
                    <data bit_width="16"> 1.46 </data>
                    <data bit_width="32"> 1.47 </data>
                    <data bit_width="128"> 1.61 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 1.66 </data>
                    <data bit_width="8"> 1.68 </data>
                    <data bit_width="16"> 1.68 </data>
                    <data bit_width="32"> 2.04 </data>
                    <data bit_width="128"> 3.49 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,4,4">
                <max>
                  <data bit_width="4"> 1.66 </data>
                  <data bit_width="8"> 1.68 </data>
                  <data bit_width="16"> 1.71 </data>
                  <data bit_width="32"> 2.04 </data>
                  <data bit_width="128"> 4.85 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.45 </data>
                  <data bit_width="8"> 1.46 </data>
                  <data bit_width="16"> 1.50 </data>
                  <data bit_width="32"> 1.51 </data>
                  <data bit_width="128"> 1.63 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.51 </data>
                    <data bit_width="8"> 1.51 </data>
                    <data bit_width="16"> 1.53 </data>
                    <data bit_width="32"> 1.55 </data>
                    <data bit_width="128"> 4.85 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.45 </data>
                    <data bit_width="8"> 1.46 </data>
                    <data bit_width="16"> 1.50 </data>
                    <data bit_width="32"> 1.51 </data>
                    <data bit_width="128"> 1.63 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 1.66 </data>
                    <data bit_width="8"> 1.68 </data>
                    <data bit_width="16"> 1.71 </data>
                    <data bit_width="32"> 2.04 </data>
                    <data bit_width="128"> 3.49 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,1,1">
                <max>
                  <data bit_width="4"> 2.10 </data>
                  <data bit_width="8"> 2.25 </data>
                  <data bit_width="16"> 2.56 </data>
                  <data bit_width="32"> 3.03 </data>
                  <data bit_width="128"> 5.15 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.66 </data>
                  <data bit_width="8"> 1.71 </data>
                  <data bit_width="16"> 1.57 </data>
                  <data bit_width="32"> 1.58 </data>
                  <data bit_width="128"> 1.60 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.84 </data>
                    <data bit_width="8"> 1.76 </data>
                    <data bit_width="16"> 1.98 </data>
                    <data bit_width="32"> 2.40 </data>
                    <data bit_width="128"> 5.15 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.66 </data>
                    <data bit_width="8"> 1.71 </data>
                    <data bit_width="16"> 1.57 </data>
                    <data bit_width="32"> 1.58 </data>
                    <data bit_width="128"> 1.60 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.10 </data>
                    <data bit_width="8"> 2.25 </data>
                    <data bit_width="16"> 2.56 </data>
                    <data bit_width="32"> 3.03 </data>
                    <data bit_width="128"> 4.37 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,1,2">
                <max>
                  <data bit_width="4"> 2.10 </data>
                  <data bit_width="8"> 2.25 </data>
                  <data bit_width="16"> 2.64 </data>
                  <data bit_width="32"> 3.11 </data>
                  <data bit_width="128"> 5.72 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.65 </data>
                  <data bit_width="8"> 1.49 </data>
                  <data bit_width="16"> 1.56 </data>
                  <data bit_width="32"> 1.58 </data>
                  <data bit_width="128"> 1.64 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.84 </data>
                    <data bit_width="8"> 1.76 </data>
                    <data bit_width="16"> 1.98 </data>
                    <data bit_width="32"> 2.40 </data>
                    <data bit_width="128"> 5.72 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.65 </data>
                    <data bit_width="8"> 1.49 </data>
                    <data bit_width="16"> 1.56 </data>
                    <data bit_width="32"> 1.58 </data>
                    <data bit_width="128"> 1.64 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.10 </data>
                    <data bit_width="8"> 2.25 </data>
                    <data bit_width="16"> 2.64 </data>
                    <data bit_width="32"> 3.11 </data>
                    <data bit_width="128"> 4.45 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,1,4">
                <max>
                  <data bit_width="4"> 2.12 </data>
                  <data bit_width="8"> 2.25 </data>
                  <data bit_width="16"> 2.64 </data>
                  <data bit_width="32"> 3.11 </data>
                  <data bit_width="128"> 5.92 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.45 </data>
                  <data bit_width="8"> 1.52 </data>
                  <data bit_width="16"> 1.56 </data>
                  <data bit_width="32"> 1.58 </data>
                  <data bit_width="128"> 3.30 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.84 </data>
                    <data bit_width="8"> 1.76 </data>
                    <data bit_width="16"> 2.03 </data>
                    <data bit_width="32"> 2.46 </data>
                    <data bit_width="128"> 5.92 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.45 </data>
                    <data bit_width="8"> 1.52 </data>
                    <data bit_width="16"> 1.56 </data>
                    <data bit_width="32"> 1.58 </data>
                    <data bit_width="128"> 3.30 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.12 </data>
                    <data bit_width="8"> 2.25 </data>
                    <data bit_width="16"> 2.64 </data>
                    <data bit_width="32"> 3.11 </data>
                    <data bit_width="128"> 4.57 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,2,1">
                <max>
                  <data bit_width="4"> 2.26 </data>
                  <data bit_width="8"> 2.28 </data>
                  <data bit_width="16"> 2.58 </data>
                  <data bit_width="32"> 3.05 </data>
                  <data bit_width="128"> 5.93 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.79 </data>
                  <data bit_width="8"> 1.78 </data>
                  <data bit_width="16"> 1.61 </data>
                  <data bit_width="32"> 1.64 </data>
                  <data bit_width="128"> 1.72 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.85 </data>
                    <data bit_width="8"> 1.99 </data>
                    <data bit_width="16"> 2.21 </data>
                    <data bit_width="32"> 2.42 </data>
                    <data bit_width="128"> 5.93 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.79 </data>
                    <data bit_width="8"> 1.78 </data>
                    <data bit_width="16"> 1.61 </data>
                    <data bit_width="32"> 1.64 </data>
                    <data bit_width="128"> 1.72 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.26 </data>
                    <data bit_width="8"> 2.28 </data>
                    <data bit_width="16"> 2.58 </data>
                    <data bit_width="32"> 3.05 </data>
                    <data bit_width="128"> 4.52 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,2,2">
                <max>
                  <data bit_width="4"> 2.26 </data>
                  <data bit_width="8"> 2.28 </data>
                  <data bit_width="16"> 2.58 </data>
                  <data bit_width="32"> 3.05 </data>
                  <data bit_width="128"> 5.90 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.79 </data>
                  <data bit_width="8"> 1.78 </data>
                  <data bit_width="16"> 1.59 </data>
                  <data bit_width="32"> 1.58 </data>
                  <data bit_width="128"> 1.76 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.85 </data>
                    <data bit_width="8"> 1.99 </data>
                    <data bit_width="16"> 2.28 </data>
                    <data bit_width="32"> 2.47 </data>
                    <data bit_width="128"> 5.90 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.79 </data>
                    <data bit_width="8"> 1.78 </data>
                    <data bit_width="16"> 1.59 </data>
                    <data bit_width="32"> 1.58 </data>
                    <data bit_width="128"> 1.76 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.26 </data>
                    <data bit_width="8"> 2.28 </data>
                    <data bit_width="16"> 2.58 </data>
                    <data bit_width="32"> 3.05 </data>
                    <data bit_width="128"> 4.72 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,2,4">
                <max>
                  <data bit_width="4"> 2.28 </data>
                  <data bit_width="8"> 2.28 </data>
                  <data bit_width="16"> 2.58 </data>
                  <data bit_width="32"> 3.10 </data>
                  <data bit_width="128"> 6.11 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.57 </data>
                  <data bit_width="8"> 1.56 </data>
                  <data bit_width="16"> 1.59 </data>
                  <data bit_width="32"> 1.65 </data>
                  <data bit_width="128"> 1.71 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.85 </data>
                    <data bit_width="8"> 1.99 </data>
                    <data bit_width="16"> 2.28 </data>
                    <data bit_width="32"> 2.47 </data>
                    <data bit_width="128"> 6.11 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.57 </data>
                    <data bit_width="8"> 1.56 </data>
                    <data bit_width="16"> 1.59 </data>
                    <data bit_width="32"> 1.65 </data>
                    <data bit_width="128"> 1.71 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.28 </data>
                    <data bit_width="8"> 2.28 </data>
                    <data bit_width="16"> 2.58 </data>
                    <data bit_width="32"> 3.10 </data>
                    <data bit_width="128"> 4.94 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,4,1">
                <max>
                  <data bit_width="4"> 2.40 </data>
                  <data bit_width="8"> 2.40 </data>
                  <data bit_width="16"> 2.58 </data>
                  <data bit_width="32"> 3.05 </data>
                  <data bit_width="128"> 6.11 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.85 </data>
                  <data bit_width="8"> 1.88 </data>
                  <data bit_width="16"> 1.66 </data>
                  <data bit_width="32"> 1.72 </data>
                  <data bit_width="128"> 1.82 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.85 </data>
                    <data bit_width="8"> 2.01 </data>
                    <data bit_width="16"> 2.28 </data>
                    <data bit_width="32"> 2.47 </data>
                    <data bit_width="128"> 6.11 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.86 </data>
                    <data bit_width="8"> 1.88 </data>
                    <data bit_width="16"> 1.66 </data>
                    <data bit_width="32"> 1.72 </data>
                    <data bit_width="128"> 1.82 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.40 </data>
                    <data bit_width="8"> 2.40 </data>
                    <data bit_width="16"> 2.58 </data>
                    <data bit_width="32"> 3.05 </data>
                    <data bit_width="128"> 4.59 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,4,2">
                <max>
                  <data bit_width="4"> 2.40 </data>
                  <data bit_width="8"> 2.40 </data>
                  <data bit_width="16"> 2.58 </data>
                  <data bit_width="32"> 3.10 </data>
                  <data bit_width="128"> 6.11 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.85 </data>
                  <data bit_width="8"> 1.90 </data>
                  <data bit_width="16"> 1.71 </data>
                  <data bit_width="32"> 1.73 </data>
                  <data bit_width="128"> 1.87 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.85 </data>
                    <data bit_width="8"> 2.01 </data>
                    <data bit_width="16"> 2.28 </data>
                    <data bit_width="32"> 2.47 </data>
                    <data bit_width="128"> 6.11 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.92 </data>
                    <data bit_width="8"> 1.90 </data>
                    <data bit_width="16"> 1.71 </data>
                    <data bit_width="32"> 1.73 </data>
                    <data bit_width="128"> 1.87 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.40 </data>
                    <data bit_width="8"> 2.40 </data>
                    <data bit_width="16"> 2.58 </data>
                    <data bit_width="32"> 3.10 </data>
                    <data bit_width="128"> 4.94 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,4,4">
                <max>
                  <data bit_width="4"> 2.40 </data>
                  <data bit_width="8"> 2.43 </data>
                  <data bit_width="16"> 2.58 </data>
                  <data bit_width="32"> 3.10 </data>
                  <data bit_width="128"> 6.96 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.67 </data>
                  <data bit_width="8"> 1.69 </data>
                  <data bit_width="16"> 1.74 </data>
                  <data bit_width="32"> 1.74 </data>
                  <data bit_width="128"> 1.89 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.89 </data>
                    <data bit_width="8"> 2.01 </data>
                    <data bit_width="16"> 2.28 </data>
                    <data bit_width="32"> 2.47 </data>
                    <data bit_width="128"> 6.96 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.67 </data>
                    <data bit_width="8"> 1.69 </data>
                    <data bit_width="16"> 1.74 </data>
                    <data bit_width="32"> 1.74 </data>
                    <data bit_width="128"> 1.89 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.40 </data>
                    <data bit_width="8"> 2.43 </data>
                    <data bit_width="16"> 2.58 </data>
                    <data bit_width="32"> 3.10 </data>
                    <data bit_width="128"> 4.83 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,1,1">
                <max>
                  <data bit_width="4"> 2.25 </data>
                  <data bit_width="8"> 2.31 </data>
                  <data bit_width="16"> 2.67 </data>
                  <data bit_width="32"> 3.08 </data>
                  <data bit_width="128"> 9.43 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.69 </data>
                  <data bit_width="8"> 1.62 </data>
                  <data bit_width="16"> 1.81 </data>
                  <data bit_width="32"> 1.79 </data>
                  <data bit_width="128"> 2.07 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.84 </data>
                    <data bit_width="8"> 2.04 </data>
                    <data bit_width="16"> 2.19 </data>
                    <data bit_width="32"> 2.69 </data>
                    <data bit_width="128"> 9.43 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.69 </data>
                    <data bit_width="8"> 1.62 </data>
                    <data bit_width="16"> 1.81 </data>
                    <data bit_width="32"> 1.79 </data>
                    <data bit_width="128"> 2.07 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.25 </data>
                    <data bit_width="8"> 2.31 </data>
                    <data bit_width="16"> 2.67 </data>
                    <data bit_width="32"> 3.08 </data>
                    <data bit_width="128"> 6.27 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,1,2">
                <max>
                  <data bit_width="4"> 2.25 </data>
                  <data bit_width="8"> 2.36 </data>
                  <data bit_width="16"> 2.72 </data>
                  <data bit_width="32"> 3.16 </data>
                  <data bit_width="128"> 9.43 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.74 </data>
                  <data bit_width="8"> 1.75 </data>
                  <data bit_width="16"> 1.79 </data>
                  <data bit_width="32"> 1.82 </data>
                  <data bit_width="128"> 2.40 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.84 </data>
                    <data bit_width="8"> 2.04 </data>
                    <data bit_width="16"> 2.19 </data>
                    <data bit_width="32"> 2.69 </data>
                    <data bit_width="128"> 9.43 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.74 </data>
                    <data bit_width="8"> 1.75 </data>
                    <data bit_width="16"> 1.79 </data>
                    <data bit_width="32"> 1.82 </data>
                    <data bit_width="128"> 2.40 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.25 </data>
                    <data bit_width="8"> 2.36 </data>
                    <data bit_width="16"> 2.72 </data>
                    <data bit_width="32"> 3.16 </data>
                    <data bit_width="128"> 5.97 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,1,4">
                <max>
                  <data bit_width="4"> 1.84 </data>
                  <data bit_width="8"> 2.36 </data>
                  <data bit_width="16"> 2.70 </data>
                  <data bit_width="32"> 3.16 </data>
                  <data bit_width="128"> 9.83 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.74 </data>
                  <data bit_width="8"> 1.75 </data>
                  <data bit_width="16"> 1.79 </data>
                  <data bit_width="32"> 1.80 </data>
                  <data bit_width="128"> 1.91 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.84 </data>
                    <data bit_width="8"> 2.10 </data>
                    <data bit_width="16"> 2.24 </data>
                    <data bit_width="32"> 2.76 </data>
                    <data bit_width="128"> 9.83 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.74 </data>
                    <data bit_width="8"> 1.75 </data>
                    <data bit_width="16"> 1.79 </data>
                    <data bit_width="32"> 1.80 </data>
                    <data bit_width="128"> 1.91 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 1.79 </data>
                    <data bit_width="8"> 2.36 </data>
                    <data bit_width="16"> 2.70 </data>
                    <data bit_width="32"> 3.16 </data>
                    <data bit_width="128"> 5.25 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,2,1">
                <max>
                  <data bit_width="4"> 2.32 </data>
                  <data bit_width="8"> 2.36 </data>
                  <data bit_width="16"> 2.72 </data>
                  <data bit_width="32"> 3.15 </data>
                  <data bit_width="128"> 6.81 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.72 </data>
                  <data bit_width="8"> 1.78 </data>
                  <data bit_width="16"> 2.03 </data>
                  <data bit_width="32"> 1.85 </data>
                  <data bit_width="128"> 2.10 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.84 </data>
                    <data bit_width="8"> 2.04 </data>
                    <data bit_width="16"> 2.19 </data>
                    <data bit_width="32"> 2.69 </data>
                    <data bit_width="128"> 6.81 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.72 </data>
                    <data bit_width="8"> 1.78 </data>
                    <data bit_width="16"> 2.03 </data>
                    <data bit_width="32"> 1.85 </data>
                    <data bit_width="128"> 2.10 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.32 </data>
                    <data bit_width="8"> 2.36 </data>
                    <data bit_width="16"> 2.72 </data>
                    <data bit_width="32"> 3.15 </data>
                    <data bit_width="128"> 5.81 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,2,2">
                <max>
                  <data bit_width="4"> 2.32 </data>
                  <data bit_width="8"> 2.36 </data>
                  <data bit_width="16"> 2.66 </data>
                  <data bit_width="32"> 3.15 </data>
                  <data bit_width="128"> 9.84 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.78 </data>
                  <data bit_width="8"> 1.77 </data>
                  <data bit_width="16"> 1.80 </data>
                  <data bit_width="32"> 1.92 </data>
                  <data bit_width="128"> 2.40 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.84 </data>
                    <data bit_width="8"> 2.10 </data>
                    <data bit_width="16"> 2.24 </data>
                    <data bit_width="32"> 2.76 </data>
                    <data bit_width="128"> 9.84 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.78 </data>
                    <data bit_width="8"> 1.77 </data>
                    <data bit_width="16"> 1.80 </data>
                    <data bit_width="32"> 1.92 </data>
                    <data bit_width="128"> 2.40 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.32 </data>
                    <data bit_width="8"> 2.36 </data>
                    <data bit_width="16"> 2.66 </data>
                    <data bit_width="32"> 3.15 </data>
                    <data bit_width="128"> 6.50 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,2,4">
                <max>
                  <data bit_width="4"> 1.84 </data>
                  <data bit_width="8"> 2.36 </data>
                  <data bit_width="16"> 2.70 </data>
                  <data bit_width="32"> 3.23 </data>
                  <data bit_width="128"> 7.08 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.79 </data>
                  <data bit_width="8"> 1.78 </data>
                  <data bit_width="16"> 1.81 </data>
                  <data bit_width="32"> 1.82 </data>
                  <data bit_width="128"> 3.14 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.84 </data>
                    <data bit_width="8"> 2.10 </data>
                    <data bit_width="16"> 2.24 </data>
                    <data bit_width="32"> 2.76 </data>
                    <data bit_width="128"> 7.08 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.79 </data>
                    <data bit_width="8"> 1.78 </data>
                    <data bit_width="16"> 1.81 </data>
                    <data bit_width="32"> 1.82 </data>
                    <data bit_width="128"> 3.14 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 1.82 </data>
                    <data bit_width="8"> 2.36 </data>
                    <data bit_width="16"> 2.70 </data>
                    <data bit_width="32"> 3.23 </data>
                    <data bit_width="128"> 5.86 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,4,1">
                <max>
                  <data bit_width="4"> 2.42 </data>
                  <data bit_width="8"> 2.45 </data>
                  <data bit_width="16"> 2.67 </data>
                  <data bit_width="32"> 3.16 </data>
                  <data bit_width="128"> 7.09 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.83 </data>
                  <data bit_width="8"> 2.10 </data>
                  <data bit_width="16"> 1.89 </data>
                  <data bit_width="32"> 1.95 </data>
                  <data bit_width="128"> 2.35 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.84 </data>
                    <data bit_width="8"> 2.10 </data>
                    <data bit_width="16"> 2.24 </data>
                    <data bit_width="32"> 2.76 </data>
                    <data bit_width="128"> 7.09 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.83 </data>
                    <data bit_width="8"> 2.13 </data>
                    <data bit_width="16"> 1.89 </data>
                    <data bit_width="32"> 1.95 </data>
                    <data bit_width="128"> 2.35 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.42 </data>
                    <data bit_width="8"> 2.45 </data>
                    <data bit_width="16"> 2.67 </data>
                    <data bit_width="32"> 3.16 </data>
                    <data bit_width="128"> 5.86 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,4,2">
                <max>
                  <data bit_width="4"> 2.42 </data>
                  <data bit_width="8"> 2.45 </data>
                  <data bit_width="16"> 2.70 </data>
                  <data bit_width="32"> 3.22 </data>
                  <data bit_width="128"> 7.09 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.75 </data>
                  <data bit_width="8"> 1.86 </data>
                  <data bit_width="16"> 1.86 </data>
                  <data bit_width="32"> 1.98 </data>
                  <data bit_width="128"> 2.46 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.84 </data>
                    <data bit_width="8"> 2.10 </data>
                    <data bit_width="16"> 2.24 </data>
                    <data bit_width="32"> 2.76 </data>
                    <data bit_width="128"> 7.09 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.75 </data>
                    <data bit_width="8"> 1.86 </data>
                    <data bit_width="16"> 1.86 </data>
                    <data bit_width="32"> 1.98 </data>
                    <data bit_width="128"> 2.46 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.42 </data>
                    <data bit_width="8"> 2.45 </data>
                    <data bit_width="16"> 2.70 </data>
                    <data bit_width="32"> 3.22 </data>
                    <data bit_width="128"> 5.83 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,4,4">
                <max>
                  <data bit_width="4"> 1.85 </data>
                  <data bit_width="8"> 2.48 </data>
                  <data bit_width="16"> 2.77 </data>
                  <data bit_width="32"> 3.32 </data>
                  <data bit_width="128"> 7.20 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.80 </data>
                  <data bit_width="8"> 1.93 </data>
                  <data bit_width="16"> 1.90 </data>
                  <data bit_width="32"> 2.00 </data>
                  <data bit_width="128"> 3.73 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.84 </data>
                    <data bit_width="8"> 2.10 </data>
                    <data bit_width="16"> 2.24 </data>
                    <data bit_width="32"> 2.82 </data>
                    <data bit_width="128"> 7.20 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.85 </data>
                    <data bit_width="8"> 1.93 </data>
                    <data bit_width="16"> 1.90 </data>
                    <data bit_width="32"> 2.00 </data>
                    <data bit_width="128"> 3.73 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 1.80 </data>
                    <data bit_width="8"> 2.48 </data>
                    <data bit_width="16"> 2.77 </data>
                    <data bit_width="32"> 3.32 </data>
                    <data bit_width="128"> 6.00 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,1,1">
                <max>
                  <data bit_width="4"> 2.90 </data>
                  <data bit_width="8"> 3.10 </data>
                  <data bit_width="16"> 3.45 </data>
                  <data bit_width="32"> 4.07 </data>
                  <data bit_width="128"> 8.13 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.98 </data>
                  <data bit_width="8"> 2.16 </data>
                  <data bit_width="16"> 1.93 </data>
                  <data bit_width="32"> 2.10 </data>
                  <data bit_width="128"> 2.34 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 2.39 </data>
                    <data bit_width="8"> 2.66 </data>
                    <data bit_width="16"> 2.94 </data>
                    <data bit_width="32"> 3.54 </data>
                    <data bit_width="128"> 8.13 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.98 </data>
                    <data bit_width="8"> 2.16 </data>
                    <data bit_width="16"> 1.93 </data>
                    <data bit_width="32"> 2.10 </data>
                    <data bit_width="128"> 2.34 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.90 </data>
                    <data bit_width="8"> 3.10 </data>
                    <data bit_width="16"> 3.45 </data>
                    <data bit_width="32"> 4.07 </data>
                    <data bit_width="128"> 6.98 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,1,2">
                <max>
                  <data bit_width="4"> 2.93 </data>
                  <data bit_width="8"> 3.13 </data>
                  <data bit_width="16"> 3.45 </data>
                  <data bit_width="32"> 4.16 </data>
                  <data bit_width="128"> 8.39 </data>
                </max>
                <min>
                  <data bit_width="4"> 2.04 </data>
                  <data bit_width="8"> 1.85 </data>
                  <data bit_width="16"> 2.03 </data>
                  <data bit_width="32"> 2.11 </data>
                  <data bit_width="128"> 2.89 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 2.44 </data>
                    <data bit_width="8"> 2.66 </data>
                    <data bit_width="16"> 2.94 </data>
                    <data bit_width="32"> 3.54 </data>
                    <data bit_width="128"> 8.39 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 2.04 </data>
                    <data bit_width="8"> 1.85 </data>
                    <data bit_width="16"> 2.03 </data>
                    <data bit_width="32"> 2.11 </data>
                    <data bit_width="128"> 2.89 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.93 </data>
                    <data bit_width="8"> 3.13 </data>
                    <data bit_width="16"> 3.45 </data>
                    <data bit_width="32"> 4.16 </data>
                    <data bit_width="128"> 7.04 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,1,4">
                <max>
                  <data bit_width="4"> 2.92 </data>
                  <data bit_width="8"> 3.03 </data>
                  <data bit_width="16"> 3.52 </data>
                  <data bit_width="32"> 4.35 </data>
                  <data bit_width="128"> 8.44 </data>
                </max>
                <min>
                  <data bit_width="4"> 2.08 </data>
                  <data bit_width="8"> 2.02 </data>
                  <data bit_width="16"> 2.02 </data>
                  <data bit_width="32"> 2.10 </data>
                  <data bit_width="128"> 3.84 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 2.44 </data>
                    <data bit_width="8"> 2.83 </data>
                    <data bit_width="16"> 2.99 </data>
                    <data bit_width="32"> 3.78 </data>
                    <data bit_width="128"> 8.44 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 2.08 </data>
                    <data bit_width="8"> 2.02 </data>
                    <data bit_width="16"> 2.02 </data>
                    <data bit_width="32"> 2.10 </data>
                    <data bit_width="128"> 3.84 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.92 </data>
                    <data bit_width="8"> 3.03 </data>
                    <data bit_width="16"> 3.52 </data>
                    <data bit_width="32"> 4.35 </data>
                    <data bit_width="128"> 5.58 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,2,1">
                <max>
                  <data bit_width="4"> 2.93 </data>
                  <data bit_width="8"> 3.13 </data>
                  <data bit_width="16"> 3.45 </data>
                  <data bit_width="32"> 4.16 </data>
                  <data bit_width="128"> 8.31 </data>
                </max>
                <min>
                  <data bit_width="4"> 2.01 </data>
                  <data bit_width="8"> 2.04 </data>
                  <data bit_width="16"> 1.93 </data>
                  <data bit_width="32"> 2.20 </data>
                  <data bit_width="128"> 2.42 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 2.39 </data>
                    <data bit_width="8"> 2.66 </data>
                    <data bit_width="16"> 2.94 </data>
                    <data bit_width="32"> 3.54 </data>
                    <data bit_width="128"> 8.31 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 2.01 </data>
                    <data bit_width="8"> 2.04 </data>
                    <data bit_width="16"> 1.93 </data>
                    <data bit_width="32"> 2.20 </data>
                    <data bit_width="128"> 2.42 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.93 </data>
                    <data bit_width="8"> 3.13 </data>
                    <data bit_width="16"> 3.45 </data>
                    <data bit_width="32"> 4.16 </data>
                    <data bit_width="128"> 7.11 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,2,2">
                <max>
                  <data bit_width="4"> 2.92 </data>
                  <data bit_width="8"> 3.01 </data>
                  <data bit_width="16"> 3.45 </data>
                  <data bit_width="32"> 4.23 </data>
                  <data bit_width="128"> 8.82 </data>
                </max>
                <min>
                  <data bit_width="4"> 2.08 </data>
                  <data bit_width="8"> 2.04 </data>
                  <data bit_width="16"> 2.03 </data>
                  <data bit_width="32"> 2.09 </data>
                  <data bit_width="128"> 3.62 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 2.44 </data>
                    <data bit_width="8"> 2.83 </data>
                    <data bit_width="16"> 2.99 </data>
                    <data bit_width="32"> 3.62 </data>
                    <data bit_width="128"> 7.64 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 2.08 </data>
                    <data bit_width="8"> 2.04 </data>
                    <data bit_width="16"> 2.03 </data>
                    <data bit_width="32"> 2.09 </data>
                    <data bit_width="128"> 3.62 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.92 </data>
                    <data bit_width="8"> 3.01 </data>
                    <data bit_width="16"> 3.45 </data>
                    <data bit_width="32"> 4.23 </data>
                    <data bit_width="128"> 8.82 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,2,4">
                <max>
                  <data bit_width="4"> 2.93 </data>
                  <data bit_width="8"> 3.03 </data>
                  <data bit_width="16"> 3.52 </data>
                  <data bit_width="32"> 4.50 </data>
                  <data bit_width="128"> 10.84 </data>
                </max>
                <min>
                  <data bit_width="4"> 2.08 </data>
                  <data bit_width="8"> 2.06 </data>
                  <data bit_width="16"> 2.09 </data>
                  <data bit_width="32"> 2.47 </data>
                  <data bit_width="128"> 4.08 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 2.44 </data>
                    <data bit_width="8"> 2.79 </data>
                    <data bit_width="16"> 2.99 </data>
                    <data bit_width="32"> 3.76 </data>
                    <data bit_width="128"> 10.84 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 2.08 </data>
                    <data bit_width="8"> 2.06 </data>
                    <data bit_width="16"> 2.09 </data>
                    <data bit_width="32"> 2.47 </data>
                    <data bit_width="128"> 4.08 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.93 </data>
                    <data bit_width="8"> 3.03 </data>
                    <data bit_width="16"> 3.52 </data>
                    <data bit_width="32"> 4.50 </data>
                    <data bit_width="128"> 7.45 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,4,1">
                <max>
                  <data bit_width="4"> 2.93 </data>
                  <data bit_width="8"> 3.03 </data>
                  <data bit_width="16"> 3.52 </data>
                  <data bit_width="32"> 4.77 </data>
                  <data bit_width="128"> 8.49 </data>
                </max>
                <min>
                  <data bit_width="4"> 2.16 </data>
                  <data bit_width="8"> 2.02 </data>
                  <data bit_width="16"> 2.29 </data>
                  <data bit_width="32"> 2.17 </data>
                  <data bit_width="128"> 2.89 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 2.44 </data>
                    <data bit_width="8"> 2.83 </data>
                    <data bit_width="16"> 2.99 </data>
                    <data bit_width="32"> 3.77 </data>
                    <data bit_width="128"> 7.67 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 2.16 </data>
                    <data bit_width="8"> 2.02 </data>
                    <data bit_width="16"> 2.29 </data>
                    <data bit_width="32"> 2.17 </data>
                    <data bit_width="128"> 2.89 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.93 </data>
                    <data bit_width="8"> 3.03 </data>
                    <data bit_width="16"> 3.52 </data>
                    <data bit_width="32"> 4.77 </data>
                    <data bit_width="128"> 8.49 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,4,2">
                <max>
                  <data bit_width="4"> 2.93 </data>
                  <data bit_width="8"> 3.03 </data>
                  <data bit_width="16"> 3.52 </data>
                  <data bit_width="32"> 4.50 </data>
                  <data bit_width="128"> 9.78 </data>
                </max>
                <min>
                  <data bit_width="4"> 2.16 </data>
                  <data bit_width="8"> 2.08 </data>
                  <data bit_width="16"> 2.18 </data>
                  <data bit_width="32"> 2.11 </data>
                  <data bit_width="128"> 3.41 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 2.44 </data>
                    <data bit_width="8"> 2.83 </data>
                    <data bit_width="16"> 2.99 </data>
                    <data bit_width="32"> 3.77 </data>
                    <data bit_width="128"> 9.78 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 2.16 </data>
                    <data bit_width="8"> 2.08 </data>
                    <data bit_width="16"> 2.18 </data>
                    <data bit_width="32"> 2.11 </data>
                    <data bit_width="128"> 3.41 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.93 </data>
                    <data bit_width="8"> 3.03 </data>
                    <data bit_width="16"> 3.52 </data>
                    <data bit_width="32"> 4.50 </data>
                    <data bit_width="128"> 8.58 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,4,4">
                <max>
                  <data bit_width="4"> 2.96 </data>
                  <data bit_width="8"> 3.08 </data>
                  <data bit_width="16"> 3.58 </data>
                  <data bit_width="32"> 4.56 </data>
                  <data bit_width="128"> 10.94 </data>
                </max>
                <min>
                  <data bit_width="4"> 2.30 </data>
                  <data bit_width="8"> 2.11 </data>
                  <data bit_width="16"> 2.25 </data>
                  <data bit_width="32"> 2.27 </data>
                  <data bit_width="128"> 3.79 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 2.44 </data>
                    <data bit_width="8"> 2.86 </data>
                    <data bit_width="16"> 2.99 </data>
                    <data bit_width="32"> 4.31 </data>
                    <data bit_width="128"> 10.94 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 2.30 </data>
                    <data bit_width="8"> 2.11 </data>
                    <data bit_width="16"> 2.25 </data>
                    <data bit_width="32"> 2.27 </data>
                    <data bit_width="128"> 3.79 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.96 </data>
                    <data bit_width="8"> 3.08 </data>
                    <data bit_width="16"> 3.58 </data>
                    <data bit_width="32"> 4.56 </data>
                    <data bit_width="128"> 8.57 </data>
                  </priority>
                </typ>
              </parameters>
            </est_index>

            <est_index name="delay_fullpath">
            <!-- Dummy yet -->
            </est_index>
          </est_type>

          <est_type name="power">
            <est_index name="static_power">
              <unit> mW </unit>
              <parameters name="4,1,1">
                <max>
                  <data bit_width="4"> 20.5804 </data>
                  <data bit_width="8"> 44.9130 </data>
                  <data bit_width="16"> 77.4691 </data>
                  <data bit_width="32"> 168.8547 </data>
                  <data bit_width="128"> 557.2665 </data>
                </max>
                <min>
                  <data bit_width="4"> 13.5633 </data>
                  <data bit_width="8"> 24.9273 </data>
                  <data bit_width="16"> 50.3200 </data>
                  <data bit_width="32"> 97.6542 </data>
                  <data bit_width="128"> 443.6625 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 14.3665 </data>
                    <data bit_width="8"> 27.7890 </data>
                    <data bit_width="16"> 57.2970 </data>
                    <data bit_width="32"> 117.4755 </data>
                    <data bit_width="128"> 456.2700 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 20.5804 </data>
                    <data bit_width="8"> 44.9130 </data>
                    <data bit_width="16"> 77.4691 </data>
                    <data bit_width="32"> 168.8547 </data>
                    <data bit_width="128"> 557.2665 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 13.5633 </data>
                    <data bit_width="8"> 24.9273 </data>
                    <data bit_width="16"> 50.3200 </data>
                    <data bit_width="32"> 97.6542 </data>
                    <data bit_width="128"> 443.6625 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,1,2">
                <max>
                  <data bit_width="4"> 29.2949 </data>
                  <data bit_width="8"> 53.8455 </data>
                  <data bit_width="16"> 108.4822 </data>
                  <data bit_width="32"> 208.4122 </data>
                  <data bit_width="128"> 821.4230 </data>
                </max>
                <min>
                  <data bit_width="4"> 21.9914 </data>
                  <data bit_width="8"> 39.8052 </data>
                  <data bit_width="16"> 81.0126 </data>
                  <data bit_width="32"> 163.0881 </data>
                  <data bit_width="128"> 708.6562 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 25.4518 </data>
                    <data bit_width="8"> 45.4762 </data>
                    <data bit_width="16"> 92.6619 </data>
                    <data bit_width="32"> 178.8640 </data>
                    <data bit_width="128"> 775.7109 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 29.2949 </data>
                    <data bit_width="8"> 53.8455 </data>
                    <data bit_width="16"> 108.4822 </data>
                    <data bit_width="32"> 208.4122 </data>
                    <data bit_width="128"> 821.4230 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 21.9914 </data>
                    <data bit_width="8"> 39.8052 </data>
                    <data bit_width="16"> 81.0126 </data>
                    <data bit_width="32"> 163.0881 </data>
                    <data bit_width="128"> 708.6562 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,1,4">
                <max>
                  <data bit_width="4"> 60.2832 </data>
                  <data bit_width="8"> 111.9424 </data>
                  <data bit_width="16"> 202.6993 </data>
                  <data bit_width="32"> 401.5742 </data>
                  <data bit_width="128"> 1597.7 </data>
                </max>
                <min>
                  <data bit_width="4"> 35.7398 </data>
                  <data bit_width="8"> 59.5589 </data>
                  <data bit_width="16"> 120.3938 </data>
                  <data bit_width="32"> 246.6424 </data>
                  <data bit_width="128"> 1081.9 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 45.4382 </data>
                    <data bit_width="8"> 79.4766 </data>
                    <data bit_width="16"> 157.1879 </data>
                    <data bit_width="32"> 316.8700 </data>
                    <data bit_width="128"> 1355.3 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 60.2832 </data>
                    <data bit_width="8"> 111.9424 </data>
                    <data bit_width="16"> 202.6993 </data>
                    <data bit_width="32"> 401.5742 </data>
                    <data bit_width="128"> 1597.7 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 35.7398 </data>
                    <data bit_width="8"> 59.5589 </data>
                    <data bit_width="16"> 120.3938 </data>
                    <data bit_width="32"> 246.6424 </data>
                    <data bit_width="128"> 1081.9 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,2,1">
                <max>
                  <data bit_width="4"> 27.6226 </data>
                  <data bit_width="8"> 53.1672 </data>
                  <data bit_width="16"> 94.5212 </data>
                  <data bit_width="32"> 169.6517 </data>
                  <data bit_width="128"> 675.3947 </data>
                </max>
                <min>
                  <data bit_width="4"> 15.3800 </data>
                  <data bit_width="8"> 27.8183 </data>
                  <data bit_width="16"> 55.9045 </data>
                  <data bit_width="32"> 114.8690 </data>
                  <data bit_width="128"> 516.5344 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 15.6968 </data>
                    <data bit_width="8"> 30.3632 </data>
                    <data bit_width="16"> 65.3162 </data>
                    <data bit_width="32"> 128.5209 </data>
                    <data bit_width="128"> 516.5344 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 27.6226 </data>
                    <data bit_width="8"> 53.1672 </data>
                    <data bit_width="16"> 94.5212 </data>
                    <data bit_width="32"> 169.6517 </data>
                    <data bit_width="128"> 675.3947 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 15.3800 </data>
                    <data bit_width="8"> 27.8183 </data>
                    <data bit_width="16"> 55.9045 </data>
                    <data bit_width="32"> 114.8690 </data>
                    <data bit_width="128"> 525.3261 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,2,2">
                <max>
                  <data bit_width="4"> 35.7524 </data>
                  <data bit_width="8"> 60.1887 </data>
                  <data bit_width="16"> 115.4595 </data>
                  <data bit_width="32"> 229.7784 </data>
                  <data bit_width="128"> 983.6292 </data>
                </max>
                <min>
                  <data bit_width="4"> 23.8484 </data>
                  <data bit_width="8"> 42.6764 </data>
                  <data bit_width="16"> 86.1885 </data>
                  <data bit_width="32"> 174.2150 </data>
                  <data bit_width="128"> 762.7571 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 26.7726 </data>
                    <data bit_width="8"> 48.0502 </data>
                    <data bit_width="16"> 97.6634 </data>
                    <data bit_width="32"> 199.2864 </data>
                    <data bit_width="128"> 835.0687 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 35.7524 </data>
                    <data bit_width="8"> 60.1887 </data>
                    <data bit_width="16"> 115.4595 </data>
                    <data bit_width="32"> 229.7784 </data>
                    <data bit_width="128"> 983.6292 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 23.8484 </data>
                    <data bit_width="8"> 42.6764 </data>
                    <data bit_width="16"> 86.1885 </data>
                    <data bit_width="32"> 174.2150 </data>
                    <data bit_width="128"> 762.7571 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,2,4">
                <max>
                  <data bit_width="4"> 63.7339 </data>
                  <data bit_width="8"> 117.3557 </data>
                  <data bit_width="16"> 213.2360 </data>
                  <data bit_width="32"> 420.9263 </data>
                  <data bit_width="128"> 1767.7 </data>
                </max>
                <min>
                  <data bit_width="4"> 37.6432 </data>
                  <data bit_width="8"> 66.5866 </data>
                  <data bit_width="16"> 126.1164 </data>
                  <data bit_width="32"> 258.2926 </data>
                  <data bit_width="128"> 1187.1 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 46.5972 </data>
                    <data bit_width="8"> 82.3066 </data>
                    <data bit_width="16"> 162.5665 </data>
                    <data bit_width="32"> 328.1465 </data>
                    <data bit_width="128"> 1420.5 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 63.7339 </data>
                    <data bit_width="8"> 117.3557 </data>
                    <data bit_width="16"> 213.2360 </data>
                    <data bit_width="32"> 420.9263 </data>
                    <data bit_width="128"> 1767.7 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 37.6432 </data>
                    <data bit_width="8"> 66.5866 </data>
                    <data bit_width="16"> 126.1164 </data>
                    <data bit_width="32"> 258.2926 </data>
                    <data bit_width="128"> 1187.1 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,4,1">
                <max>
                  <data bit_width="4"> 35.5045 </data>
                  <data bit_width="8"> 64.8772 </data>
                  <data bit_width="16"> 113.0330 </data>
                  <data bit_width="32"> 208.7905 </data>
                  <data bit_width="128"> 870.6218 </data>
                </max>
                <min>
                  <data bit_width="4"> 18.2331 </data>
                  <data bit_width="8"> 33.6470 </data>
                  <data bit_width="16"> 66.6919 </data>
                  <data bit_width="32"> 137.6970 </data>
                  <data bit_width="128"> 652.3039 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 18.2331 </data>
                    <data bit_width="8"> 35.5331 </data>
                    <data bit_width="16"> 75.9454 </data>
                    <data bit_width="32"> 156.5947 </data>
                    <data bit_width="128"> 684.0002 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 35.5045 </data>
                    <data bit_width="8"> 64.8772 </data>
                    <data bit_width="16"> 113.0330 </data>
                    <data bit_width="32"> 208.7905 </data>
                    <data bit_width="128"> 870.6218 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 19.0642 </data>
                    <data bit_width="8"> 33.6470 </data>
                    <data bit_width="16"> 66.6919 </data>
                    <data bit_width="32"> 137.6970 </data>
                    <data bit_width="128"> 652.3039 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,4,2">
                <max>
                  <data bit_width="4"> 53.2471 </data>
                  <data bit_width="8"> 76.9154 </data>
                  <data bit_width="16"> 140.3746 </data>
                  <data bit_width="32"> 275.0448 </data>
                  <data bit_width="128"> 1179.7 </data>
                </max>
                <min>
                  <data bit_width="4"> 27.4772 </data>
                  <data bit_width="8"> 51.6926 </data>
                  <data bit_width="16"> 97.4092 </data>
                  <data bit_width="32"> 197.3078 </data>
                  <data bit_width="128"> 904.7524 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 29.2896 </data>
                    <data bit_width="8"> 53.3593 </data>
                    <data bit_width="16"> 108.7367 </data>
                    <data bit_width="32"> 221.5021 </data>
                    <data bit_width="128"> 997.1841 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 53.2471 </data>
                    <data bit_width="8"> 76.9154 </data>
                    <data bit_width="16"> 140.3746 </data>
                    <data bit_width="32"> 275.0448 </data>
                    <data bit_width="128"> 1179.7 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 27.4772 </data>
                    <data bit_width="8"> 51.6926 </data>
                    <data bit_width="16"> 97.4092 </data>
                    <data bit_width="32"> 197.3078 </data>
                    <data bit_width="128"> 904.7524 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,4,4">
                <max>
                  <data bit_width="4"> 71.2574 </data>
                  <data bit_width="8"> 131.5429 </data>
                  <data bit_width="16"> 241.0484 </data>
                  <data bit_width="32"> 482.5485 </data>
                  <data bit_width="128"> 1995.8 </data>
                </max>
                <min>
                  <data bit_width="4"> 41.1960 </data>
                  <data bit_width="8"> 72.8358 </data>
                  <data bit_width="16"> 146.0583 </data>
                  <data bit_width="32"> 281.1491 </data>
                  <data bit_width="128"> 1278.6 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 49.1700 </data>
                    <data bit_width="8"> 87.2682 </data>
                    <data bit_width="16"> 172.9416 </data>
                    <data bit_width="32"> 351.5620 </data>
                    <data bit_width="128"> 1552.2 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 71.2574 </data>
                    <data bit_width="8"> 131.5429 </data>
                    <data bit_width="16"> 241.0484 </data>
                    <data bit_width="32"> 482.5485 </data>
                    <data bit_width="128"> 1995.8 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 41.1960 </data>
                    <data bit_width="8"> 72.8358 </data>
                    <data bit_width="16"> 146.0583 </data>
                    <data bit_width="32"> 281.1491 </data>
                    <data bit_width="128"> 1278.6 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,1,1">
                <max>
                  <data bit_width="4"> 44.2818 </data>
                  <data bit_width="8"> 79.1006 </data>
                  <data bit_width="16"> 137.9136 </data>
                  <data bit_width="32"> 255.6437 </data>
                  <data bit_width="128"> 3691.7 </data>
                </max>
                <min>
                  <data bit_width="4"> 24.5136 </data>
                  <data bit_width="8"> 44.6187 </data>
                  <data bit_width="16"> 82.4628 </data>
                  <data bit_width="32"> 170.2826 </data>
                  <data bit_width="128"> 3384.6 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 31.4604 </data>
                    <data bit_width="8"> 56.9668 </data>
                    <data bit_width="16"> 92.3513 </data>
                    <data bit_width="32"> 221.6048 </data>
                    <data bit_width="128"> 3534.3 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 44.2818 </data>
                    <data bit_width="8"> 79.1006 </data>
                    <data bit_width="16"> 137.9136 </data>
                    <data bit_width="32"> 255.6437 </data>
                    <data bit_width="128"> 3691.7 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 24.5136 </data>
                    <data bit_width="8"> 44.6187 </data>
                    <data bit_width="16"> 82.4628 </data>
                    <data bit_width="32"> 170.2826 </data>
                    <data bit_width="128"> 3384.6 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,1,2">
                <max>
                  <data bit_width="4"> 53.5259 </data>
                  <data bit_width="8"> 102.3034 </data>
                  <data bit_width="16"> 187.9554 </data>
                  <data bit_width="32"> 378.1707 </data>
                  <data bit_width="128"> 4159.1 </data>
                </max>
                <min>
                  <data bit_width="4"> 36.6340 </data>
                  <data bit_width="8"> 68.8426 </data>
                  <data bit_width="16"> 141.1915 </data>
                  <data bit_width="32"> 284.8900 </data>
                  <data bit_width="128"> 3838.8 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 46.7843 </data>
                    <data bit_width="8"> 85.0703 </data>
                    <data bit_width="16"> 153.6584 </data>
                    <data bit_width="32"> 321.0623 </data>
                    <data bit_width="128"> 3998 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 53.5259 </data>
                    <data bit_width="8"> 102.3034 </data>
                    <data bit_width="16"> 187.9554 </data>
                    <data bit_width="32"> 378.1707 </data>
                    <data bit_width="128"> 4159.1 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 36.6340 </data>
                    <data bit_width="8"> 68.8426 </data>
                    <data bit_width="16"> 141.1915 </data>
                    <data bit_width="32"> 284.8900 </data>
                    <data bit_width="128"> 3838.8 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,1,4">
                <max>
                  <data bit_width="4"> 108.0861 </data>
                  <data bit_width="8"> 190.0581 </data>
                  <data bit_width="16"> 335.4138 </data>
                  <data bit_width="32"> 673.9583 </data>
                  <data bit_width="128"> 6041.6 </data>
                </max>
                <min>
                  <data bit_width="4"> 67.6213 </data>
                  <data bit_width="8"> 117.9681 </data>
                  <data bit_width="16"> 215.0509 </data>
                  <data bit_width="32"> 438.7869 </data>
                  <data bit_width="128"> 4584.1 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 81.2691 </data>
                    <data bit_width="8"> 153.6523 </data>
                    <data bit_width="16"> 274.3612 </data>
                    <data bit_width="32"> 567.1193 </data>
                    <data bit_width="128"> 5030.4 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 108.0861 </data>
                    <data bit_width="8"> 190.0581 </data>
                    <data bit_width="16"> 335.4138 </data>
                    <data bit_width="32"> 673.9583 </data>
                    <data bit_width="128"> 6041.6 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 67.6213 </data>
                    <data bit_width="8"> 117.9681 </data>
                    <data bit_width="16"> 215.0509 </data>
                    <data bit_width="32"> 438.7869 </data>
                    <data bit_width="128"> 4584.1 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,2,1">
                <max>
                  <data bit_width="4"> 50.1762 </data>
                  <data bit_width="8"> 86.6701 </data>
                  <data bit_width="16"> 162.2519 </data>
                  <data bit_width="32"> 303.3904 </data>
                  <data bit_width="128"> 3909.1 </data>
                </max>
                <min>
                  <data bit_width="4"> 28.2866 </data>
                  <data bit_width="8"> 50.4696 </data>
                  <data bit_width="16"> 96.3225 </data>
                  <data bit_width="32"> 195.7934 </data>
                  <data bit_width="128"> 3479.7 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 36.5484 </data>
                    <data bit_width="8"> 64.1097 </data>
                    <data bit_width="16"> 103.9959 </data>
                    <data bit_width="32"> 243.2387 </data>
                    <data bit_width="128"> 3636.3 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 50.1762 </data>
                    <data bit_width="8"> 86.6701 </data>
                    <data bit_width="16"> 162.2519 </data>
                    <data bit_width="32"> 303.3904 </data>
                    <data bit_width="128"> 3909.1 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 28.2866 </data>
                    <data bit_width="8"> 50.4696 </data>
                    <data bit_width="16"> 96.3225 </data>
                    <data bit_width="32"> 195.7934 </data>
                    <data bit_width="128"> 3479.7 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,2,2">
                <max>
                  <data bit_width="4"> 69.5422 </data>
                  <data bit_width="8"> 109.6688 </data>
                  <data bit_width="16"> 211.7064 </data>
                  <data bit_width="32"> 417.0823 </data>
                  <data bit_width="128"> 4350.5 </data>
                </max>
                <min>
                  <data bit_width="4"> 40.5411 </data>
                  <data bit_width="8"> 74.4291 </data>
                  <data bit_width="16"> 150.9996 </data>
                  <data bit_width="32"> 303.7450 </data>
                  <data bit_width="128"> 3943.4 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 51.8509 </data>
                    <data bit_width="8"> 92.5234 </data>
                    <data bit_width="16"> 173.0006 </data>
                    <data bit_width="32"> 356.8834 </data>
                    <data bit_width="128"> 4120.7 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 69.5422 </data>
                    <data bit_width="8"> 109.6688 </data>
                    <data bit_width="16"> 211.7064 </data>
                    <data bit_width="32"> 417.0823 </data>
                    <data bit_width="128"> 4350.5 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 40.5411 </data>
                    <data bit_width="8"> 74.4291 </data>
                    <data bit_width="16"> 150.9996 </data>
                    <data bit_width="32"> 303.7450 </data>
                    <data bit_width="128"> 3943.4 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,2,4">
                <max>
                  <data bit_width="4"> 118.9161 </data>
                  <data bit_width="8"> 203.8159 </data>
                  <data bit_width="16"> 359.6348 </data>
                  <data bit_width="32"> 715.5589 </data>
                  <data bit_width="128"> 5775.1 </data>
                </max>
                <min>
                  <data bit_width="4"> 71.7925 </data>
                  <data bit_width="8"> 123.5696 </data>
                  <data bit_width="16"> 224.7163 </data>
                  <data bit_width="32"> 471.9748 </data>
                  <data bit_width="128"> 4766.6 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 86.5228 </data>
                    <data bit_width="8"> 161.1237 </data>
                    <data bit_width="16"> 286.7791 </data>
                    <data bit_width="32"> 589.6545 </data>
                    <data bit_width="128"> 5139.3 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 118.9161 </data>
                    <data bit_width="8"> 203.8159 </data>
                    <data bit_width="16"> 359.6348 </data>
                    <data bit_width="32"> 715.5589 </data>
                    <data bit_width="128"> 5775.1 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 71.7925 </data>
                    <data bit_width="8"> 123.5696 </data>
                    <data bit_width="16"> 224.7163 </data>
                    <data bit_width="32"> 471.9748 </data>
                    <data bit_width="128"> 4766.6 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,4,1">
                <max>
                  <data bit_width="4"> 67.0058 </data>
                  <data bit_width="8"> 103.3606 </data>
                  <data bit_width="16"> 207.7953 </data>
                  <data bit_width="32"> 356.8437 </data>
                  <data bit_width="128"> 4113.2 </data>
                </max>
                <min>
                  <data bit_width="4"> 37.8930 </data>
                  <data bit_width="8"> 61.5822 </data>
                  <data bit_width="16"> 114.9500 </data>
                  <data bit_width="32"> 231.9924 </data>
                  <data bit_width="128"> 3688.1 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 46.3938 </data>
                    <data bit_width="8"> 78.0463 </data>
                    <data bit_width="16"> 132.8532 </data>
                    <data bit_width="32"> 298.5559 </data>
                    <data bit_width="128"> 3840.5 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 67.0058 </data>
                    <data bit_width="8"> 103.3606 </data>
                    <data bit_width="16"> 207.7953 </data>
                    <data bit_width="32"> 356.8437 </data>
                    <data bit_width="128"> 4113.2 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 37.8930 </data>
                    <data bit_width="8"> 61.5822 </data>
                    <data bit_width="16"> 114.9500 </data>
                    <data bit_width="32"> 231.9924 </data>
                    <data bit_width="128"> 3688.1 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,4,2">
                <max>
                  <data bit_width="4"> 83.7888 </data>
                  <data bit_width="8"> 148.2602 </data>
                  <data bit_width="16"> 257.7296 </data>
                  <data bit_width="32"> 496.2325 </data>
                  <data bit_width="128"> 4698.5 </data>
                </max>
                <min>
                  <data bit_width="4"> 50.9473 </data>
                  <data bit_width="8"> 85.5244 </data>
                  <data bit_width="16"> 169.1122 </data>
                  <data bit_width="32"> 347.4869 </data>
                  <data bit_width="128"> 4182.9 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 61.9036 </data>
                    <data bit_width="8"> 106.4697 </data>
                    <data bit_width="16"> 196.1122 </data>
                    <data bit_width="32"> 401.6104 </data>
                    <data bit_width="128"> 4318 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 83.7888 </data>
                    <data bit_width="8"> 148.2602 </data>
                    <data bit_width="16"> 257.7296 </data>
                    <data bit_width="32"> 496.2325 </data>
                    <data bit_width="128"> 4698.5 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 50.9473 </data>
                    <data bit_width="8"> 85.5244 </data>
                    <data bit_width="16"> 169.1122 </data>
                    <data bit_width="32"> 347.4869 </data>
                    <data bit_width="128"> 4182.9 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,4,4">
                <max>
                  <data bit_width="4"> 139.8267 </data>
                  <data bit_width="8"> 231.4904 </data>
                  <data bit_width="16"> 391.4349 </data>
                  <data bit_width="32"> 816.1765 </data>
                  <data bit_width="128"> 6110.7 </data>
                </max>
                <min>
                  <data bit_width="4"> 79.5438 </data>
                  <data bit_width="8"> 143.0618 </data>
                  <data bit_width="16"> 244.0108 </data>
                  <data bit_width="32"> 508.1832 </data>
                  <data bit_width="128"> 4948.8 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 101.2938 </data>
                    <data bit_width="8"> 174.8891 </data>
                    <data bit_width="16"> 311.2664 </data>
                    <data bit_width="32"> 635.7241 </data>
                    <data bit_width="128"> 5393.2 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 139.8267 </data>
                    <data bit_width="8"> 231.4904 </data>
                    <data bit_width="16"> 391.4349 </data>
                    <data bit_width="32"> 816.1765 </data>
                    <data bit_width="128"> 6110.7 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 79.5438 </data>
                    <data bit_width="8"> 143.0618 </data>
                    <data bit_width="16"> 244.0108 </data>
                    <data bit_width="32"> 508.1832 </data>
                    <data bit_width="128"> 4948.8 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,1,1">
                <max>
                  <data bit_width="4"> 78.9290 </data>
                  <data bit_width="8"> 142.9744 </data>
                  <data bit_width="16"> 244.0664 </data>
                  <data bit_width="32"> 477.0008 </data>
                  <data bit_width="128"> 4571.1 </data>
                </max>
                <min>
                  <data bit_width="4"> 44.7475 </data>
                  <data bit_width="8"> 86.6901 </data>
                  <data bit_width="16"> 159.1180 </data>
                  <data bit_width="32"> 333.8986 </data>
                  <data bit_width="128"> 3898.3 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 54.8174 </data>
                    <data bit_width="8"> 86.6901 </data>
                    <data bit_width="16"> 195.8404 </data>
                    <data bit_width="32"> 422.3318 </data>
                    <data bit_width="128"> 4242.3 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 78.9290 </data>
                    <data bit_width="8"> 142.9744 </data>
                    <data bit_width="16"> 244.0664 </data>
                    <data bit_width="32"> 477.0008 </data>
                    <data bit_width="128"> 4571.1 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 44.7475 </data>
                    <data bit_width="8"> 89.0959 </data>
                    <data bit_width="16"> 159.1180 </data>
                    <data bit_width="32"> 333.8986 </data>
                    <data bit_width="128"> 3898.3 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,1,2">
                <max>
                  <data bit_width="4"> 98.7029 </data>
                  <data bit_width="8"> 201.7215 </data>
                  <data bit_width="16"> 351.2638 </data>
                  <data bit_width="32"> 713.3400 </data>
                  <data bit_width="128"> 5413.3 </data>
                </max>
                <min>
                  <data bit_width="4"> 68.9929 </data>
                  <data bit_width="8"> 129.8528 </data>
                  <data bit_width="16"> 253.2118 </data>
                  <data bit_width="32"> 536.8629 </data>
                  <data bit_width="128"> 4797.2 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 83.1462 </data>
                    <data bit_width="8"> 144.3853 </data>
                    <data bit_width="16"> 289.4995 </data>
                    <data bit_width="32"> 598.5710 </data>
                    <data bit_width="128"> 5053.4 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 98.7029 </data>
                    <data bit_width="8"> 201.7215 </data>
                    <data bit_width="16"> 351.2638 </data>
                    <data bit_width="32"> 713.3400 </data>
                    <data bit_width="128"> 5413.3 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 68.9929 </data>
                    <data bit_width="8"> 129.8528 </data>
                    <data bit_width="16"> 253.2118 </data>
                    <data bit_width="32"> 536.8629 </data>
                    <data bit_width="128"> 4797.2 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,1,4">
                <max>
                  <data bit_width="4"> 180.3970 </data>
                  <data bit_width="8"> 324.6187 </data>
                  <data bit_width="16"> 629.2366 </data>
                  <data bit_width="32"> 1290.1 </data>
                  <data bit_width="128"> 8062.7 </data>
                </max>
                <min>
                  <data bit_width="4"> 112.1778 </data>
                  <data bit_width="8"> 208.7989 </data>
                  <data bit_width="16"> 395.7309 </data>
                  <data bit_width="32"> 803.9778 </data>
                  <data bit_width="128"> 6193.1 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 141.2339 </data>
                    <data bit_width="8"> 258.0294 </data>
                    <data bit_width="16"> 496.5216 </data>
                    <data bit_width="32"> 1032.2 </data>
                    <data bit_width="128"> 6980.1 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 180.3970 </data>
                    <data bit_width="8"> 324.6187 </data>
                    <data bit_width="16"> 629.2366 </data>
                    <data bit_width="32"> 1290.1 </data>
                    <data bit_width="128"> 8062.7 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 112.1778 </data>
                    <data bit_width="8"> 208.7989 </data>
                    <data bit_width="16"> 395.7309 </data>
                    <data bit_width="32"> 803.9778 </data>
                    <data bit_width="128"> 6193.1 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,2,1">
                <max>
                  <data bit_width="4"> 95.3404 </data>
                  <data bit_width="8"> 168.8513 </data>
                  <data bit_width="16"> 294.3015 </data>
                  <data bit_width="32"> 680.7032 </data>
                  <data bit_width="128"> 5015.2 </data>
                </max>
                <min>
                  <data bit_width="4"> 51.1008 </data>
                  <data bit_width="8"> 96.2636 </data>
                  <data bit_width="16"> 180.4914 </data>
                  <data bit_width="32"> 377.6214 </data>
                  <data bit_width="128"> 4062.3 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 61.8121 </data>
                    <data bit_width="8"> 96.2636 </data>
                    <data bit_width="16"> 210.9292 </data>
                    <data bit_width="32"> 453.2034 </data>
                    <data bit_width="128"> 4371.7 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 95.3404 </data>
                    <data bit_width="8"> 168.8513 </data>
                    <data bit_width="16"> 294.3015 </data>
                    <data bit_width="32"> 680.7032 </data>
                    <data bit_width="128"> 5015.2 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 51.1008 </data>
                    <data bit_width="8"> 103.0963 </data>
                    <data bit_width="16"> 180.4914 </data>
                    <data bit_width="32"> 377.6214 </data>
                    <data bit_width="128"> 4062.3 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,2,2">
                <max>
                  <data bit_width="4"> 111.0486 </data>
                  <data bit_width="8"> 200.6019 </data>
                  <data bit_width="16"> 403.3046 </data>
                  <data bit_width="32"> 772.2564 </data>
                  <data bit_width="128"> 5631.3 </data>
                </max>
                <min>
                  <data bit_width="4"> 75.1689 </data>
                  <data bit_width="8"> 138.7840 </data>
                  <data bit_width="16"> 267.8338 </data>
                  <data bit_width="32"> 562.1494 </data>
                  <data bit_width="128"> 4976.7 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 89.9178 </data>
                    <data bit_width="8"> 161.9066 </data>
                    <data bit_width="16"> 315.9150 </data>
                    <data bit_width="32"> 655.9431 </data>
                    <data bit_width="128"> 5264.5 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 111.0486 </data>
                    <data bit_width="8"> 200.6019 </data>
                    <data bit_width="16"> 403.3046 </data>
                    <data bit_width="32"> 772.2564 </data>
                    <data bit_width="128"> 5631.3 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 75.1689 </data>
                    <data bit_width="8"> 138.7840 </data>
                    <data bit_width="16"> 267.8338 </data>
                    <data bit_width="32"> 562.1494 </data>
                    <data bit_width="128"> 4976.7 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,2,4">
                <max>
                  <data bit_width="4"> 205.0537 </data>
                  <data bit_width="8"> 360.9079 </data>
                  <data bit_width="16"> 679.4906 </data>
                  <data bit_width="32"> 1381 </data>
                  <data bit_width="128"> 8321 </data>
                </max>
                <min>
                  <data bit_width="4"> 126.1937 </data>
                  <data bit_width="8"> 217.6192 </data>
                  <data bit_width="16"> 410.4709 </data>
                  <data bit_width="32"> 869.6191 </data>
                  <data bit_width="128"> 6451.2 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 147.9144 </data>
                    <data bit_width="8"> 269.4358 </data>
                    <data bit_width="16"> 514.3333 </data>
                    <data bit_width="32"> 1057.3 </data>
                    <data bit_width="128"> 7140.4 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 205.0537 </data>
                    <data bit_width="8"> 360.9079 </data>
                    <data bit_width="16"> 679.4906 </data>
                    <data bit_width="32"> 1381 </data>
                    <data bit_width="128"> 8321 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 126.1937 </data>
                    <data bit_width="8"> 217.6192 </data>
                    <data bit_width="16"> 410.4709 </data>
                    <data bit_width="32"> 869.6191 </data>
                    <data bit_width="128"> 6451.2 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,4,1">
                <max>
                  <data bit_width="4"> 127.5667 </data>
                  <data bit_width="8"> 453.3206 </data>
                  <data bit_width="16"> 386.7081 </data>
                  <data bit_width="32"> 734.3495 </data>
                  <data bit_width="128"> 5397 </data>
                </max>
                <min>
                  <data bit_width="4"> 63.7425 </data>
                  <data bit_width="8"> 120.6093 </data>
                  <data bit_width="16"> 207.9501 </data>
                  <data bit_width="32"> 428.4631 </data>
                  <data bit_width="128"> 4336.7 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 76.2537 </data>
                    <data bit_width="8"> 122.0686 </data>
                    <data bit_width="16"> 252.0859 </data>
                    <data bit_width="32"> 537.1251 </data>
                    <data bit_width="128"> 4692 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 127.5667 </data>
                    <data bit_width="8"> 453.3206 </data>
                    <data bit_width="16"> 386.7081 </data>
                    <data bit_width="32"> 734.3495 </data>
                    <data bit_width="128"> 5397 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 63.7425 </data>
                    <data bit_width="8"> 120.6093 </data>
                    <data bit_width="16"> 207.9501 </data>
                    <data bit_width="32"> 428.4631 </data>
                    <data bit_width="128"> 4336.7 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,4,2">
                <max>
                  <data bit_width="4"> 151.9785 </data>
                  <data bit_width="8"> 240.0016 </data>
                  <data bit_width="16"> 460.9129 </data>
                  <data bit_width="32"> 984.0888 </data>
                  <data bit_width="128"> 6400.7 </data>
                </max>
                <min>
                  <data bit_width="4"> 87.9286 </data>
                  <data bit_width="8"> 156.2693 </data>
                  <data bit_width="16"> 304.2787 </data>
                  <data bit_width="32"> 642.4151 </data>
                  <data bit_width="128"> 5271.6 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 104.2400 </data>
                    <data bit_width="8"> 182.1753 </data>
                    <data bit_width="16"> 348.5039 </data>
                    <data bit_width="32"> 718.4535 </data>
                    <data bit_width="128"> 5466.9 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 151.9785 </data>
                    <data bit_width="8"> 240.0016 </data>
                    <data bit_width="16"> 460.9129 </data>
                    <data bit_width="32"> 984.0888 </data>
                    <data bit_width="128"> 6400.7 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 87.9286 </data>
                    <data bit_width="8"> 156.2693 </data>
                    <data bit_width="16"> 304.2787 </data>
                    <data bit_width="32"> 642.4151 </data>
                    <data bit_width="128"> 5271.6 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,4,4">
                <max>
                  <data bit_width="4"> 230.4246 </data>
                  <data bit_width="8"> 384.0279 </data>
                  <data bit_width="16"> 768.4489 </data>
                  <data bit_width="32"> 1729 </data>
                  <data bit_width="128"> 8966.3 </data>
                </max>
                <min>
                  <data bit_width="4"> 141.3295 </data>
                  <data bit_width="8"> 246.7914 </data>
                  <data bit_width="16"> 462.5402 </data>
                  <data bit_width="32"> 972.9071 </data>
                  <data bit_width="128"> 6848.6 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 162.3209 </data>
                    <data bit_width="8"> 289.6004 </data>
                    <data bit_width="16"> 544.8672 </data>
                    <data bit_width="32"> 1130.9 </data>
                    <data bit_width="128"> 7532.2 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 230.4246 </data>
                    <data bit_width="8"> 384.0279 </data>
                    <data bit_width="16"> 768.4489 </data>
                    <data bit_width="32"> 1729 </data>
                    <data bit_width="128"> 8966.3 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 141.3295 </data>
                    <data bit_width="8"> 246.7914 </data>
                    <data bit_width="16"> 462.5402 </data>
                    <data bit_width="32"> 972.9071 </data>
                    <data bit_width="128"> 6848.6 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,1,1">
                <max>
                  <data bit_width="4"> 140.8920 </data>
                  <data bit_width="8"> 221.7878 </data>
                  <data bit_width="16"> 517.5786 </data>
                  <data bit_width="32"> 3603.8 </data>
                  <data bit_width="128"> 7049.9 </data>
                </max>
                <min>
                  <data bit_width="4"> 88.6583 </data>
                  <data bit_width="8"> 168.1806 </data>
                  <data bit_width="16"> 343.8908 </data>
                  <data bit_width="32"> 3295.7 </data>
                  <data bit_width="128"> 5147.5 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 101.9873 </data>
                    <data bit_width="8"> 195.2877 </data>
                    <data bit_width="16"> 394.8924 </data>
                    <data bit_width="32"> 3435.8 </data>
                    <data bit_width="128"> 5617.2 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 140.8920 </data>
                    <data bit_width="8"> 221.7878 </data>
                    <data bit_width="16"> 517.5786 </data>
                    <data bit_width="32"> 3603.8 </data>
                    <data bit_width="128"> 7049.9 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 88.6583 </data>
                    <data bit_width="8"> 168.1806 </data>
                    <data bit_width="16"> 343.8908 </data>
                    <data bit_width="32"> 3295.7 </data>
                    <data bit_width="128"> 5147.5 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,1,2">
                <max>
                  <data bit_width="4"> 210.7749 </data>
                  <data bit_width="8"> 348.5937 </data>
                  <data bit_width="16"> 671.4823 </data>
                  <data bit_width="32"> 3997.1 </data>
                  <data bit_width="128"> 7845.2 </data>
                </max>
                <min>
                  <data bit_width="4"> 130.2411 </data>
                  <data bit_width="8"> 245.3770 </data>
                  <data bit_width="16"> 507.0766 </data>
                  <data bit_width="32"> 3644.7 </data>
                  <data bit_width="128"> 6832.7 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 152.2326 </data>
                    <data bit_width="8"> 266.5857 </data>
                    <data bit_width="16"> 551.9550 </data>
                    <data bit_width="32"> 3755.4 </data>
                    <data bit_width="128"> 7204.4 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 210.7749 </data>
                    <data bit_width="8"> 348.5937 </data>
                    <data bit_width="16"> 671.4823 </data>
                    <data bit_width="32"> 3997.1 </data>
                    <data bit_width="128"> 7845.2 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 130.2411 </data>
                    <data bit_width="8"> 245.3770 </data>
                    <data bit_width="16"> 507.0766 </data>
                    <data bit_width="32"> 3644.7 </data>
                    <data bit_width="128"> 6832.7 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,1,4">
                <max>
                  <data bit_width="4"> 388.9868 </data>
                  <data bit_width="8"> 649.0566 </data>
                  <data bit_width="16"> 1198.6 </data>
                  <data bit_width="32"> 5124.6 </data>
                  <data bit_width="128"> 13279.9 </data>
                </max>
                <min>
                  <data bit_width="4"> 202.3507 </data>
                  <data bit_width="8"> 391.2351 </data>
                  <data bit_width="16"> 754.3760 </data>
                  <data bit_width="32"> 4161.3 </data>
                  <data bit_width="128"> 10236.2 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 253.4321 </data>
                    <data bit_width="8"> 464.5366 </data>
                    <data bit_width="16"> 920.6589 </data>
                    <data bit_width="32"> 4521.1 </data>
                    <data bit_width="128"> 10800.2 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 388.9868 </data>
                    <data bit_width="8"> 649.0566 </data>
                    <data bit_width="16"> 1198.6 </data>
                    <data bit_width="32"> 5124.6 </data>
                    <data bit_width="128"> 13279.9 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 202.3507 </data>
                    <data bit_width="8"> 391.2351 </data>
                    <data bit_width="16"> 754.3760 </data>
                    <data bit_width="32"> 4161.3 </data>
                    <data bit_width="128"> 10236.2 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,2,1">
                <max>
                  <data bit_width="4"> 160.8217 </data>
                  <data bit_width="8"> 300.0117 </data>
                  <data bit_width="16"> 622.6309 </data>
                  <data bit_width="32"> 3739.6 </data>
                  <data bit_width="128"> 7623.9 </data>
                </max>
                <min>
                  <data bit_width="4"> 99.3635 </data>
                  <data bit_width="8"> 182.1013 </data>
                  <data bit_width="16"> 365.0015 </data>
                  <data bit_width="32"> 3355.5 </data>
                  <data bit_width="128"> 5398.2 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 113.8838 </data>
                    <data bit_width="8"> 210.6943 </data>
                    <data bit_width="16"> 418.4265 </data>
                    <data bit_width="32"> 3477 </data>
                    <data bit_width="128"> 5790.8 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 160.8217 </data>
                    <data bit_width="8"> 300.0117 </data>
                    <data bit_width="16"> 622.6309 </data>
                    <data bit_width="32"> 3739.6 </data>
                    <data bit_width="128"> 7623.9 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 99.3635 </data>
                    <data bit_width="8"> 182.1013 </data>
                    <data bit_width="16"> 365.0015 </data>
                    <data bit_width="32"> 3355.5 </data>
                    <data bit_width="128"> 5398.2 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,2,2">
                <max>
                  <data bit_width="4"> 235.5584 </data>
                  <data bit_width="8"> 425.1257 </data>
                  <data bit_width="16"> 832.0634 </data>
                  <data bit_width="32"> 4299.3 </data>
                  <data bit_width="128"> 8102.7 </data>
                </max>
                <min>
                  <data bit_width="4"> 141.0872 </data>
                  <data bit_width="8"> 259.5631 </data>
                  <data bit_width="16"> 528.1114 </data>
                  <data bit_width="32"> 3706.9 </data>
                  <data bit_width="128"> 7216.7 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 164.7980 </data>
                    <data bit_width="8"> 294.8267 </data>
                    <data bit_width="16"> 600.1563 </data>
                    <data bit_width="32"> 3838.1 </data>
                    <data bit_width="128"> 7445.7 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 235.5584 </data>
                    <data bit_width="8"> 425.1257 </data>
                    <data bit_width="16"> 832.0634 </data>
                    <data bit_width="32"> 4299.3 </data>
                    <data bit_width="128"> 8102.7 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 141.0872 </data>
                    <data bit_width="8"> 259.5631 </data>
                    <data bit_width="16"> 528.1114 </data>
                    <data bit_width="32"> 3706.9 </data>
                    <data bit_width="128"> 7216.7 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,2,4">
                <max>
                  <data bit_width="4"> 419.4192 </data>
                  <data bit_width="8"> 654.6131 </data>
                  <data bit_width="16"> 1271.4 </data>
                  <data bit_width="32"> 4951.5 </data>
                  <data bit_width="128"> 13401.7 </data>
                </max>
                <min>
                  <data bit_width="4"> 213.2508 </data>
                  <data bit_width="8"> 405.4702 </data>
                  <data bit_width="16"> 777.9342 </data>
                  <data bit_width="32"> 4281 </data>
                  <data bit_width="128"> 10325.8 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 265.6632 </data>
                    <data bit_width="8"> 479.3258 </data>
                    <data bit_width="16"> 943.7398 </data>
                    <data bit_width="32"> 4568.2 </data>
                    <data bit_width="128"> 11208.1 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 419.4192 </data>
                    <data bit_width="8"> 654.6131 </data>
                    <data bit_width="16"> 1271.4 </data>
                    <data bit_width="32"> 4951.5 </data>
                    <data bit_width="128"> 13401.7 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 213.2508 </data>
                    <data bit_width="8"> 405.4702 </data>
                    <data bit_width="16"> 777.9342 </data>
                    <data bit_width="32"> 4281 </data>
                    <data bit_width="128"> 10325.8 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,4,1">
                <max>
                  <data bit_width="4"> 193.7529 </data>
                  <data bit_width="8"> 425.1550 </data>
                  <data bit_width="16"> 619.9796 </data>
                  <data bit_width="32"> 4400.9 </data>
                  <data bit_width="128"> 8222.9 </data>
                </max>
                <min>
                  <data bit_width="4"> 120.8241 </data>
                  <data bit_width="8"> 216.6663 </data>
                  <data bit_width="16"> 425.8960 </data>
                  <data bit_width="32"> 3489 </data>
                  <data bit_width="128"> 5898.6 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 145.0569 </data>
                    <data bit_width="8"> 251.8188 </data>
                    <data bit_width="16"> 483.2270 </data>
                    <data bit_width="32"> 3593.2 </data>
                    <data bit_width="128"> 6252.3 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 193.7529 </data>
                    <data bit_width="8"> 425.1550 </data>
                    <data bit_width="16"> 619.9796 </data>
                    <data bit_width="32"> 4400.9 </data>
                    <data bit_width="128"> 8222.9 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 120.8241 </data>
                    <data bit_width="8"> 216.6663 </data>
                    <data bit_width="16"> 425.8960 </data>
                    <data bit_width="32"> 3489 </data>
                    <data bit_width="128"> 5898.6 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,4,2">
                <max>
                  <data bit_width="4"> 294.8621 </data>
                  <data bit_width="8"> 575.7906 </data>
                  <data bit_width="16"> 981.5940 </data>
                  <data bit_width="32"> 4995.4 </data>
                  <data bit_width="128"> 8921.3 </data>
                </max>
                <min>
                  <data bit_width="4"> 162.4859 </data>
                  <data bit_width="8"> 298.2977 </data>
                  <data bit_width="16"> 596.0532 </data>
                  <data bit_width="32"> 3840.6 </data>
                  <data bit_width="128"> 7756.9 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 189.9802 </data>
                    <data bit_width="8"> 326.9024 </data>
                    <data bit_width="16"> 646.6494 </data>
                    <data bit_width="32"> 3930.2 </data>
                    <data bit_width="128"> 7946 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 294.8621 </data>
                    <data bit_width="8"> 575.7906 </data>
                    <data bit_width="16"> 981.5940 </data>
                    <data bit_width="32"> 4995.4 </data>
                    <data bit_width="128"> 8921.3 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 162.4859 </data>
                    <data bit_width="8"> 298.2977 </data>
                    <data bit_width="16"> 596.0532 </data>
                    <data bit_width="32"> 3840.6 </data>
                    <data bit_width="128"> 7756.9 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,4,4">
                <max>
                  <data bit_width="4"> 403.1370 </data>
                  <data bit_width="8"> 721.5023 </data>
                  <data bit_width="16"> 1406.6 </data>
                  <data bit_width="32"> 5664.3 </data>
                  <data bit_width="128"> 15397.2 </data>
                </max>
                <min>
                  <data bit_width="4"> 246.9478 </data>
                  <data bit_width="8"> 457.6314 </data>
                  <data bit_width="16"> 863.1900 </data>
                  <data bit_width="32"> 4450.7 </data>
                  <data bit_width="128"> 10877.1 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 289.8372 </data>
                    <data bit_width="8"> 524.6943 </data>
                    <data bit_width="16"> 994.2303 </data>
                    <data bit_width="32"> 4692.1 </data>
                    <data bit_width="128"> 11970.1 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 403.1370 </data>
                    <data bit_width="8"> 721.5023 </data>
                    <data bit_width="16"> 1406.6 </data>
                    <data bit_width="32"> 5664.3 </data>
                    <data bit_width="128"> 15397.2 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 246.9478 </data>
                    <data bit_width="8"> 457.6314 </data>
                    <data bit_width="16"> 863.1900 </data>
                    <data bit_width="32"> 4450.7 </data>
                    <data bit_width="128"> 10877.1 </data>
                  </priority>
                </typ>
              </parameters>
            </est_index>
          </est_type>

          <est_type name="function_cycle">
            <!-- Dummy yet -->
          </est_type>

          <est_type name="function_power">
            <!-- Dummy yet -->
          </est_type>
        </library>
      </estimation_data>

      <estimation_method>
         
        <est_type name="shape">

          <est_index name="area">

            <parameters name="4,1,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(4,1,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,1,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(4,1,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,1,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(4,1,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,2,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(4,2,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,2,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(4,2,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,2,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(4,2,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,4,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(4,4,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,4,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(4,4,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,4,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(4,4,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,1,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(16,1,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,1,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(16,1,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,1,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(16,1,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,2,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(16,2,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,2,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(16,2,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,2,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(16,2,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,4,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(16,4,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,4,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(16,4,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,4,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(16,4,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,1,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(32,1,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,1,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(32,1,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,1,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(32,1,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,2,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(32,2,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,2,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(32,2,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,2,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(32,2,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,4,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(32,4,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,4,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(32,4,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,4,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(32,4,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

          </est_index>

           <est_index name="aspect_ratio">

             <!-- Dummy yet -->

           </est_index>
		
           <est_index name="height">

             <!-- Dummy yet -->

           </est_index>
		
           <est_index name="width">

             <!-- Dummy yet -->

           </est_index>
		
        </est_type>

        <est_type name="timing">

          <est_index name="delay">

            <parameters name="4,1,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(4,1,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,1,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(4,1,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,1,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(4,1,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,2,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(4,2,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,2,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(4,2,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,2,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(4,2,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,4,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(4,4,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,4,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(4,4,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,4,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(4,4,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,1,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(16,1,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,1,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(16,1,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,1,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(16,1,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,2,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(16,2,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,2,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(16,2,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,2,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(16,2,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,4,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(16,4,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,4,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(16,4,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,4,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(16,4,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,1,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(32,1,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,1,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(32,1,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,1,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(32,1,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,2,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(32,2,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,2,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(32,2,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,2,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(32,2,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,4,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(32,4,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,4,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(32,4,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,4,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(32,4,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

          </est_index>

          <est_index name="delay_fullpath">

            <parameters name="4,1,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(4,1,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="4,1,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(4,1,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="4,1,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(4,1,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="4,2,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(4,2,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="4,2,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(4,2,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="4,2,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(4,2,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="4,4,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(4,4,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="4,4,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(4,4,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="4,4,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(4,4,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="16,1,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(16,1,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="16,1,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(16,1,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="16,1,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(16,1,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="16,2,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(16,2,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="16,2,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(16,2,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="16,2,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(16,2,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="16,4,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(16,4,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="16,4,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(16,4,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="16,4,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(16,4,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="32,1,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(32,1,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="32,1,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(32,1,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="32,1,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(32,1,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="32,2,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(32,2,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="32,2,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(32,2,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="32,2,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(32,2,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="32,4,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(32,4,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="32,4,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(32,4,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="32,4,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(32,4,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

          </est_index>

        </est_type>

        <est_type name="power">

          <est_index name="static_power">

            <parameters name="4,1,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(4,1,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,1,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(4,1,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,1,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(4,1,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,2,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(4,2,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,2,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(4,2,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,2,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(4,2,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,4,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(4,4,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,4,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(4,4,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,4,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(4,4,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,1,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(16,1,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,1,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(16,1,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,1,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(16,1,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,2,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(16,2,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,2,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(16,2,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,2,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(16,2,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,4,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(16,4,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,4,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(16,4,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,4,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(16,4,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,1,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(32,1,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,1,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(32,1,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,1,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(32,1,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,2,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(32,2,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,2,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(32,2,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,2,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(32,2,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,4,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(32,4,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,4,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(32,4,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,4,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(32,4,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

          </est_index>

        </est_type>

        <est_type name="function_cycle">

        </est_type>

        <est_type name="function_power">

        </est_type>

    
      </estimation_method>

    </estimation>

  </model>

  <model>
    <design_level> synthesis </design_level>
    <version> 1.0 </version>
    <author> <![CDATA[ Kyoko UEDA ]]> </author>
    <affiliation> <![CDATA[ Osaka Univ. ]]> </affiliation>
    <model_info> <![CDATA[
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                %
%    Copyright 2008 ASIP Solutions, Inc. All rights reserved.    %
%              Copyright 2002-2005 PEAS Project                  %
%                                                                %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
]]> </model_info>

    <parameter>
      <parameter_value key="bit_width">
        <value> 4 </value>
        <value> 8 </value>
        <value> 16 </value>
        <value> 20 </value>
        <value> 24 </value>
        <value> 28 </value>
        <value> 32 </value>
        <value> 36 </value>
        <value> 40 </value>
        <value> 44 </value>
        <value> 48 </value>
        <value> 52 </value>
        <value> 56 </value>
        <value> 60 </value>
        <value> 64 </value>
        <value> 128 </value>
      </parameter_value>
      <parameter_value key="num_register">
        <value> 4 </value>
        <value> 8 </value>
        <value> 16 </value>
        <value> 32 </value>
      </parameter_value>
      <parameter_value key="num_read_port">
        <value> 1 </value>
        <value> 2 </value>
        <value> 4 </value>
      </parameter_value>
      <parameter_value key="num_write_port">
        <value> 1 </value>
        <value> 2 </value>
        <value> 4 </value>
      </parameter_value>
    </parameter>


    <function_description>
      <script>
        <![CDATA[
#!/usr/bin/perl
# this script generates function definition for registerfile in behavior level
# parameter : bit_width num_register num_read_port num_write_port

if ($#ARGV != 3){
    print "number of parameters is wrong.\n";
    print "usage : this_script bit_width num_register num_read_port num_write_port\n";
    exit (100);
}

$bit_width = $ARGV[0];
$n_reg     = $ARGV[1];
$n_read    = $ARGV[2];
$n_write   = $ARGV[3];

@bit_widths = (1,4,8,16,20,24,28,32,36,40,44,48,52,56,60,64,128);
if (! grep($_ eq $bit_width, @bit_widths)){
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}
@n_regs = (4,8,16,32,64,128);
if (! grep($_ eq $n_reg, @n_regs)){
    print "num_register $n_reg is not supported.\n";
    exit (100);
}
@n_reads = (1,2,4,8,16,32,64,128);
if (! grep($_ eq $n_read, @n_reads)){
    print "num_read $n_read is not supported.\n";
    exit (100);
}
@n_writes = (1,2,4,8,16,32,64,128);
if (! grep($_ eq $n_write, @n_writes)){
    print "num_write $n_write is not supported.\n";
    exit (100);
}
if ($n_write > $n_reg){
    print <<FHM_DL_ERROR;
******************************************************************
* num_register should be equal or grater than num_write_port *
******************************************************************
FHM_DL_ERROR
    exit(0);
#    exit (100); 
}

$w_1 = $bit_width - 1;
$n_sel = &log2u($n_reg);
$n_sel_1 = $n_sel - 1;
{
    print <<FHM_DL_MODEL
/** $bit_width-bit registerfile with $n_reg registers, $n_read read port, $n_write write port */
model regfile${bit_width}_${n_reg}_${n_read}_${n_write}{
  port{
    clock clock;
    in async_reset;
    in reset;
FHM_DL_MODEL
}
print "    in  ";
for ($i=0; $i<=$n_write-1; $i++){
    if ($i == $n_write - 1){print "w_enb$i;\n";}
    else{print "w_enb$i, ";}
}
print "    in  ";
for ($i=0; $i<=$n_write-1; $i++){
    if ($i == $n_write - 1){print "w_sel${i}[$n_sel_1:0];\n";}
    else{print "w_sel${i}[$n_sel_1:0], ";}
}
print "    in  ";
for ($i=0; $i<=$n_write-1; $i++){
    if ($i == $n_write - 1){print "data_in${i}[$w_1:0];\n";}
    else{print "data_in${i}[$w_1:0], ";}
}
print "    in  ";
for ($i=0; $i<=$n_read-1; $i++){
    if ($i == $n_read - 1){print "r_sel${i}[$n_sel_1:0];\n";}
    else{print "r_sel${i}[$n_sel_1:0], ";}
}
print "    out ";
for ($i=0; $i<=$n_read-1; $i++){
    if ($i == $n_read - 1){print "data_out${i}[$w_1:0];\n";}
    else{print "data_out${i}[$w_1:0], ";}
}
print "  }\n\n";
{
  print <<FHM_DL_NOP1
  /** no operation */
  function nop : idle{
    control{
      in reset;
FHM_DL_NOP1
}
for ($i=0; $i<=$n_write-1; $i++){
    print "      in w_enb$i;\n";
}
{
    print <<FHM_DL_NOP2
    }
    protocol{
FHM_DL_NOP2
}
print "      [reset == '0' && ";
for ($i=0; $i<=$n_write-1; $i++){
    if ($i == $n_write - 1){print "w_enb$i == '0']{\n";}
    else{print "w_enb$i == '0' && ";}
}
{
    print <<FHM_DL_NOP_RESET
    }
  }

  /** reset */
  function reset : reset{
    control{
      in reset;
    }
    protocol{
      [reset == '1']{
      }
    }
  }

FHM_DL_NOP_RESET
}
for ($i=0; $i<=$n_write-1; $i++){
    {
        print <<FHM_DL_WRITE1
  /** write$i */
  function write${i}{
    input{
      bit_vector w_sel$i;
      bit_vector data_in$i;
    }
    assignment{
FHM_DL_WRITE1
    }
    for ($j=0; $j<=$n_reg-1; $j++){print "      reg$j = data_in$i;\n";}
    {
        print <<FHM_DL_WRITE2
    }
    control{
      in w_enb$i;
    }
    protocol{
FHM_DL_WRITE2
    }
    for ($j=0; $j<=$n_reg-1; $j++){
	$j2 = &to_comp($j, $n_sel);
	print "      [w_enb$i == '1' && w_sel$i == \"$j2\" && hold data_in$i]{\n";
	print "        store reg$j;\n      }\n";
    }
    print "    }\n  }\n\n";
}

for ($i=0; $i<=$n_read-1; $i++){
    print <<FHM_DL_READ
  /** read$i */
  function read${i}{
    input{
      bit_vector r_sel$i;
    }
    output{
      bit_vector data_out$i;
    }
  }

FHM_DL_READ
}
print "  priority{ ( reset > ( nop | ";
for ($i=0; $i<=$n_write-1; $i++){
    if ($i == $n_write - 1){print "write$i ) ), ";}
    else{print "write$i | ";}
}
for ($i=0; $i<=$n_read-1; $i++){
    if ($i == $n_read - 1){print "read$i }\n}\n";}
    else{print "read$i, ";}
}
exit (0);

# ---------------------------------

sub log2u{
    $num = $_[0];

    for ($i=1, $N=2; $N<$num; $i++, $N*=2){};
    return($i);
}

# ---------------------------------

sub to_comp{
  @buf = ();
  $num = $_[0];
  $width = $_[1];

  for ($x=1; $x<$width; $x++){
    $buf[$x] = $num % 2;
    $num = ($num - $buf[$x]) / 2;
  }
  $buf[$x] = $num % 2;
  return (join("", reverse(@buf)));
}
        ]]>
      </script>
    </function_description>

    <function_conv>
      <script>
        <![CDATA[
#!/usr/bin/perl
# this script generates AUTOGEN description for registerfile in synthesis level
# parameter : bit_width num_register num_read_port num_write_port

if ($#ARGV != 3){
    print "number of parameters is wrong.\n";
    print "usage : this_script bit_width num_register num_read_port num_write_port\n";
    exit (100);
}

$bit_width     = $ARGV[0];
$n_reg         = $ARGV[1];
$n_read        = $ARGV[2];
$n_write       = $ARGV[3];

@bit_widths = (1,4,8,16,20,24,28,32,36,40,44,48,52,56,60,64,128);
if (! grep($_ eq $bit_width, @bit_widths)){
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

@n_regs = (4,8,16,32,64,128);
if (! grep($_ eq $n_reg, @n_regs)){
    print "num_register $n_reg is not supported.\n";
    exit (100);
}
@n_reads = (1,2,4,8,16,32,64,128);
if (! grep($_ eq $n_read, @n_reads)){
    print "num_read $n_read is not supported.\n";
    exit (100);
}
@n_writes = (1,2,4,8,16,32,64,128);
if (! grep($_ eq $n_write, @n_writes)){
    print "num_write $n_write is not supported.\n";
    exit (100);
}
if ($n_write > $n_reg){
   print "num_register should be equal or grater than num_write_port\n";
   exit(100);
}

$w_1 = $bit_width - 1;
$n_sel = &log2u($n_reg);
$n_sel_1 = $n_sel - 1;

{
    print <<FHM_DL_NOP1
/** no operation */
function nop{
  input{
  }

  output{
  }

  control{
    in bit reset;
FHM_DL_NOP1
}
for ($i=0; $i<=$n_write-1; $i++){
    print "    in bit w_enb$i;\n";
}
 {
    print <<FHM_DL_NOP2
  }

  protocol{
    single_cycle_protocol{
      reset = '0';
FHM_DL_NOP2
}
for ($i=0; $i<=$n_write-1; $i++){
    print "      w_enb$i = '0';\n";
}
{
    print <<FHM_DL_NOP_RESET
    }
  }
}

/** reset */
function reset{
  input{
  }

  output{
  }

  control{
    in bit reset;
  }

  protocol{
    single_cycle_protocol{
      reset = '1';
    }
  }
}

FHM_DL_NOP_RESET
}
for ($i=0; $i<=$n_write-1; $i++){
    print <<FHM_DL_WRITE
/** write$i */
function write${i}{
  input{
    bit [$n_sel_1:0] w_sel$i;
    bit [$w_1:0] data_in$i;
  }

  output{
  }

  control{
    in bit w_enb$i;
  }

  protocol{
    single_cycle_protocol{
      w_enb$i = '1';
    }
  }
}

FHM_DL_WRITE
}

for ($i=0; $i<=$n_read-1; $i++){
    print <<FHM_DL_READ
/** read$i */
function read${i}{
  input{
    bit [$n_sel_1:0] r_sel$i;
  }

  output{
    bit [$w_1:0] data_out$i;
  }

  control{
  }

  protocol{
  }
}

FHM_DL_READ
}
exit (0);

# ---------------------------------

sub log2u{
    $num = $_[0];

    for ($i=1, $N=2; $N<$num; $i++, $N*=2){};
    return($i);
}
        ]]>
      </script>
    </function_conv>

    <function_port>
      <script>
        <![CDATA[
#!/usr/bin/perl
# this script generates port information for registerfile in synthesis level
# parameter : bit_width num_register num_read_port num_write_port

if ($#ARGV != 3){
    print "number of parameters is wrong.\n";
    print "usage : this_script bit_width num_register num_read_port num_write_port\n";
    exit (100);
}

$bit_width     = $ARGV[0];
$n_reg         = $ARGV[1];
$n_read        = $ARGV[2];
$n_write       = $ARGV[3];

@bit_widths = (1,4,8,16,20,24,28,32,36,40,44,48,52,56,60,64,128);
if (! grep($_ eq $bit_width, @bit_widths)){
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

@n_regs = (4,8,16,32,64,128);
if (! grep($_ eq $n_reg, @n_regs)){
    print "num_register $n_reg is not supported.\n";
    exit (100);
}
@n_reads = (1,2,4,8,16,32,64,128);
if (! grep($_ eq $n_read, @n_reads)){
    print "num_read $n_read is not supported.\n";
    exit (100);
}
@n_writes = (1,2,4,8,16,32,64,128);
if (! grep($_ eq $n_write, @n_writes)){
    print "num_write $n_write is not supported.\n";
    exit (100);
}
if ($n_write > $n_reg){
   print "num_register should be equal or grater than num_write_port\n";
   exit(100);
}

$w_1 = $bit_width - 1;
$n_sel = &log2u($n_reg);
$n_sel_1 = $n_sel - 1;

{
print <<FHM_DL_TOP
clock	in	bit		clock
async_reset	in	bit		reset
reset	in	bit		ctrl
FHM_DL_TOP
}
for ($i=0; $i<=$n_write-1; $i++){
    print "w_enb$i	in	bit		ctrl\n";
}
for ($i=0; $i<=$n_write-1; $i++){
    print "w_sel$i	in	bit_vector   $n_sel_1   0	data\n";
}
for ($i=0; $i<=$n_write-1; $i++){
    print "data_in$i	in	bit_vector   $w_1   0	data\n";
}
for ($i=0; $i<=$n_read-1; $i++){
    print "r_sel$i	in	bit_vector   $n_sel_1   0	data\n";
}
for ($i=0; $i<=$n_read-1; $i++){
    print "data_out$i	out	bit_vector   $w_1   0	data\n";
}
exit (0);

# ---------------------------------

sub log2u{
    $num = $_[0];

    for ($i=1, $N=2; $N<$num; $i++, $N*=2){};
    return($i);
}
        ]]>
      </script>
    </function_port>

    <design>
      <design_lang> vhdl </design_lang>

      <instance>
        <script>
          <![CDATA[
#!/usr/bin/perl
# this script generates instance for registerfile in synthesis level
# parameter : instance_name bit_width num_register num_read_port num_write_port

if ($#ARGV != 4){
    print "number of parameters is wrong.\n";
    print "usage : this_script instance_name bit_width num_register num_read_port num_write_port\n";
    exit (100);
}

$instance_name = $ARGV[0];
$bit_width     = $ARGV[1];
$n_reg         = $ARGV[2];
$n_read        = $ARGV[3];
$n_write       = $ARGV[4];

@bit_widths = (1,4,8,16,20,24,28,32,36,40,44,48,52,56,60,64,128);
if (! grep($_ eq $bit_width, @bit_widths)){
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

@n_regs = (4,8,16,32,64,128);
if (! grep($_ eq $n_reg, @n_regs)){
    print "num_register $n_reg is not supported.\n";
    exit (100);
}
@n_reads = (1,2,4,8,16,32,64,128);
if (! grep($_ eq $n_read, @n_reads)){
    print "num_read $n_read is not supported.\n";
    exit (100);
}
@n_writes = (1,2,4,8,16,32,64,128);
if (! grep($_ eq $n_write, @n_writes)){
    print "num_write $n_write is not supported.\n";
    exit (100);
}
if ($n_write > $n_reg){
   print "num_register should be equal or grater than num_write_port\n";
   exit(100);
}

$w_1 = $bit_width - 1;
$n_sel = &log2u($n_reg);
$n_sel_1 = $n_sel - 1;
if ($bit_width == 1){
   $zeors = "'0'";
}
else{
    $zeros = "\"" . 0 x $bit_width . "\"";
}

{
print <<FHM_DL_TOP
-- Module     : $bit_width-bit positive edge trigger register
-- References :
-- Author     : Designed by T.Morifuji (c)1997.
-- Version    : 1.0  :

-- Functionality : synthesis level
--  port
--   clock       : clock
--   async_reset : asynchronous reset
--   reset       : synchronous reset
--   enb         : '1' then register data
--   data_in     : data to register
--   data_out    : registered data

library IEEE;
  use IEEE.std_logic_1164.all;
  use IEEE.std_logic_unsigned.all;

entity ${instance_name}_reg$bit_width is
  port (clock       : in  std_logic;
        async_reset : in  std_logic;
        reset       : in  std_logic;
        enb         : in  std_logic;
        data_in     : in  std_logic_vector($w_1 downto 0);
        data_out    : out std_logic_vector($w_1 downto 0) );
end ${instance_name}_reg$bit_width;

architecture synthesis of ${instance_name}_reg$bit_width is
begin

  process (clock, async_reset)
  begin
    if (async_reset = '1') then
      data_out <= $zeros;
    elsif (clock'event and clock = '1') then
      if (reset = '1') then
        data_out <= (others => '0');
      elsif (enb = '1') then
        data_out <= data_in;
      end if;
    end if;
  end process;

end synthesis;

--%%

-- Module       : $bit_width-bit registerfile
--                with $n_reg registers, $n_read read ports, $n_write write ports
-- Refereces    :
-- Author       : Designed by K.Ueda (c)2002.
--                Modified by T.Yoshimura (c)2004.
-- Version      : 1.1 :

-- Functionality : synthesis level
-- port
--  clock       : clock 
--  async_reset : '1' then asynchronously reset registers
--  reset       : '1' then synchronously reset registers
--  w_enb*      : '1' then update register value
--  w_sel*      : selected register to write
--  data_in*    : data to register
--  r_sel*      : selected register to read
--  data_out*   : registered data

library IEEE;
use IEEE.std_logic_1164.all;

entity $instance_name is
  
  port (
    clock	: in  std_logic;
    async_reset	: in  std_logic;
    reset	: in  std_logic;
FHM_DL_TOP
}
for ($i=0; $i<=$n_write-1; $i++){
    print "    w_enb$i	: in  std_logic;\n";
}
for ($i=0; $i<=$n_write-1; $i++){
    print "    w_sel$i	: in  std_logic_vector($n_sel_1 downto 0);\n";
}
for ($i=0; $i<=$n_write-1; $i++){
    print "    data_in$i	: in  std_logic_vector($w_1 downto 0);\n";
}
for ($i=0; $i<=$n_read-1; $i++){
    print "    r_sel$i	: in  std_logic_vector($n_sel_1 downto 0);\n";
}
for ($i=0; $i<=$n_read-1; $i++){
    if ($i == $n_read - 1){
	print "    data_out$i	: out std_logic_vector($w_1 downto 0) );\n";
    }
    else{
	print "    data_out$i	: out std_logic_vector($w_1 downto 0);\n";
    }
}
{
    print <<FHM_DL_COMP

end $instance_name;

architecture synthesis of $instance_name is

  component ${instance_name}_reg$bit_width
    port (
      clock       : in  std_logic;
      async_reset : in  std_logic;
      reset       : in  std_logic;
      enb         : in  std_logic;
      data_in     : in  std_logic_vector($w_1 downto 0);
      data_out    : out std_logic_vector($w_1 downto 0));
  end component;

FHM_DL_COMP
}
for ($i=0; $i<=$n_reg-1; $i++){
    print "  signal data_in_tmp$i  : std_logic_vector($w_1 downto 0);\n";
    print "  signal data_out_tmp$i : std_logic_vector($w_1 downto 0);\n";
    print "  signal w_enb_tmp$i    : std_logic;\n";
}

print "\nbegin  -- synthesis\n\n";
  
for ($i=0; $i<=$n_reg-1; $i++){
    print <<FHM_DL_REGS
  REG$i : ${instance_name}_reg$bit_width
  port map (
    clock       => clock,
    async_reset => async_reset,
    reset       => reset,
    enb         => w_enb_tmp$i,
    data_in     => data_in_tmp$i,
    data_out    => data_out_tmp$i);
    
FHM_DL_REGS
}

for ($i=0; $i<=$n_reg-1; $i++){
    $i2 = &to_comp($i, $n_sel);
    print "  w_enb_tmp$i <= '1' when\n";
    for ($j=0; $j<=$n_write-1; $j++){
        if ($j == $n_write - 1){
	    print "                 (w_enb$j = '1' and w_sel$j = \"$i2\") else\n";
	}
        elsif ($j == 0){
	    print "                 (w_enb$j = '1' and w_sel$j = \"$i2\") or\n";
	}
        else{
	    print "(w_enb$j = '1' and w_sel$j = \"$i2\") or\n";
	}
    }
    print "                '0';\n\n";
}
for ($i=0; $i<=$n_reg-1; $i++){
    $i2 = &to_comp($i, $n_sel);
    print "  data_in_tmp$i <= ";
    for ($j=0; $j<=$n_write-1; $j++){
        if ($j == 0){
	    print "data_in0";
	    if ($n_write > 1) {
	      print " when ((w_sel0 = \"$i2\") and (w_enb$j = '1'))";
	    }
	}
	elsif ($j == $n_write-1) {
	    print " else\n";
	    print "                  data_in$j";
	}
        else{
            print " else\n";
	    print "                  data_in$j when ((w_sel$j = \"$i2\") and (w_enb$j = '1'))";
	}
    }
    print ";\n"
}

for ($i=0; $i<=$n_read-1; $i++){
    print "  data_out$i <= ";
    for ($j=0; $j<=$n_reg-1; $j++){
        $j2 = &to_comp($j, $n_sel);
        if ($j == 0){
	    print "data_out_tmp0 when r_sel$i = \"$j2\"";
	}
	elsif ($j == $n_reg-1) {
	    print " else\n";
	    print "               data_out_tmp$j";
	}
        else {
	    print " else\n";
	    print "               data_out_tmp$j when r_sel$i = \"$j2\"";
	}
    }
    print ";\n"
}

print "end synthesis;\n";

exit (0);

# ---------------------------------

sub log2u{
    $num = $_[0];

    for ($i=1, $N=2; $N<$num; $i++, $N*=2){};
    return($i);
}

# ---------------------------------

sub to_comp{
  @buf = ();
  $num = $_[0];
  $width = $_[1];

  for ($x=1; $x<$width; $x++){
    $buf[$x] = $num % 2;
    $num = ($num - $buf[$x]) / 2;
  }
  $buf[$x] = $num % 2;
  return (join("", reverse(@buf)));
}
          ]]>
        </script>
      </instance>

      <entity></entity>

      <testvector>
        <testvector_script>
          <![CDATA[ ]]>
        </testvector_script>
      </testvector>

      <synthesis>
        <parameter></parameter>
        <synthesis_script>
          <script>
            <![CDATA[
#!/usr/bin/perl
# this script generates synthesis script for registerfile in synthesis level
# parameter : instance_name priority bit_width num_register num_read_port num_write_port

if ($#ARGV != 5){
    print "number of parameters is wrong.\n";
    print "usage : this_script instance_name priority bit_width num_register num_read_port num_write_port\n";
    exit (100);
}

$instance_name = $ARGV[0];
$priority      = $ARGV[1];
$bit_width     = $ARGV[2];
$n_reg         = $ARGV[3];
$n_read        = $ARGV[4];
$n_write       = $ARGV[5];

if ($priority eq "area"){
    $priority_const = "set_max_area 0";
}
elsif ($priority eq "performance"){
    $priority_const = "set_max_delay -from all_inputs() -to all_outputs() 0";
}
elsif ($priority eq "power"){
    $priority_const = "";
}
elsif ($priority eq "none"){
    $priority_const = "";
}
else{
    print "priority $priority is not supported.\n";
    exit (100);
}

@bit_widths = (1,4,8,16,20,24,28,32,36,40,44,48,52,56,60,64,128);
if (! grep($_ eq $bit_width, @bit_widths)){
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

@n_regs = (4,8,16,32,64,128);
if (! grep($_ eq $n_reg, @n_regs)){
    print "num_register $n_reg is not supported.\n";
    exit (100);
}
@n_reads = (1,2,4,8,16,32,64,128);
if (! grep($_ eq $n_read, @n_reads)){
    print "num_read $n_read is not supported.\n";
    exit (100);
}
@n_writes = (1,2,4,8,16,32,64,128);
if (! grep($_ eq $n_write, @n_writes)){
    print "num_write $n_write is not supported.\n";
    exit (100);
}
if ($n_write > $n_reg){
   print "num_register should be equal or grater than num_write_port\n";
   exit(100);
}

{
print <<FHM_DL_SCRIPT
hdlin_auto_save_templates = TRUE

analyze -f vhdl $instance_name.vhd

elaborate $instance_name
uniquify

$priority_const

create_clock -period 10 -waveform{0 5} clock

compile 

write -hierarchy -output $instance_name.db

report_area
report_timing

quit
FHM_DL_SCRIPT
}
exit (0);
            ]]>
          </script>
        </synthesis_script>
      </synthesis>
    </design>

    <design>
      <design_lang> Verilog </design_lang>

      <instance>
        <script>
          <![CDATA[
#!/usr/bin/perl
# this script generates instance for registerfile in sythesis level
# parameter : instance_name bit_width num_register num_read_port num_write_port


if ($#ARGV != 4){
    print "number of parameters is wrong.\n";
    print "usage : this_script instance_name bit_width num_register num_read_port num_write_port\n";
    exit (100);
}

$instance_name = $ARGV[0];
$bit_width     = $ARGV[1];
$n_reg         = $ARGV[2];
$n_read        = $ARGV[3];
$n_write       = $ARGV[4];
@bit_widths = (1,4,8,16,20,24,28,32,36,40,44,48,52,56,60,64,128);
if (! grep($_ eq $bit_width, @bit_widths)){
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}
@n_regs = (4,8,16,32,64,128);
if (! grep($_ eq $n_reg, @n_regs)){
    print "num_register $n_reg is not supported.\n";
    exit (100);
}
@n_reads = (1,2,4,8,16,32,64,128);
if (! grep($_ eq $n_read, @n_reads)){
    print "num_read $n_read is not supported.\n";
    exit (100);
}
@n_writes = (1,2,4,8,16,32,64,128);
if (! grep($_ eq $n_write, @n_writes)){
    print "num_write $n_write is not supported.\n";
    exit (100);
}
if ($n_write > $n_reg){
   print "num_register should be equal or grater than num_write_port\n";
   exit(100);
}

$w_1 = $bit_width - 1;
$n_sel = &log2u($n_reg);
$n_sel_1 = $n_sel - 1;
$zeros = 0 x $bit_width;
$dont_care = "x";
$W1 = $bit_width - 1;
{
print <<FHM_DL_COMMON
// Module     : $bit_width-bit Positive Edge Trigger Register
// Feature    : positive edge trigger
// References : Started from scratch
// Author     : Designed by T.Morifuji (c)1997.
\n
// Version    : 1.0  :
\n
// Functionality :
//  port
//   clock       : clock port
//   async_reset : asynchronous reset port
//   reset       : synchronous reset port
//   enb         : write enable control
//   data_in     : input data
//   data_out    : output data
\n
// Comment :
\n
module ${instance_name}_reg$bit_width (
    clock      ,
    async_reset,
    reset      ,
    enb        ,
    data_in    ,
    data_out   );
\n
input         clock      ;
input         async_reset;
input         reset      ;
input         enb        ;
FHM_DL_COMMON
}
if ("$bit_width" == "1"){
 print <<FHM_DL_ONE
input         data_in    ;
output        data_out   ;
\n
FHM_DL_ONE
}
else{
print <<FHM_DL_MULTIPLE
input  [$W1:0] data_in    ;
output [$W1:0] data_out   ;
\n
FHM_DL_MULTIPLE
}
{
print <<FHM_DL_COMMON
wire        clock      ;
wire        async_reset;
wire        reset      ;
wire        enb        ;
FHM_DL_COMMON
}
if ("$bit_width" == "1"){
 print <<FHM_DL_ONE
wire         data_in    ;
reg        data_out   ;
\n
FHM_DL_ONE
}
else{
print <<FHM_DL_MULTIPLE
wire  [$W1:0] data_in    ;
reg [$W1:0] data_out   ;
\n
FHM_DL_MULTIPLE
}
{
print <<FHM_DL_COMMON
always@ (posedge clock or posedge async_reset)
begin
  if (async_reset == 1'b1)
FHM_DL_COMMON
}
if ("$bit_width" == "1"){
  print <<FHM_DL_ONE_BIT
    data_out <= 1'b0;
FHM_DL_ONE_BIT
}
else{
  print "    data_out <= {$bit_width\{1'b0}};\n";
}
{
print <<FHM_DL_COMMON
  else
  begin
    if (reset == 1'b1)
FHM_DL_COMMON
}
if ("$bit_width" == "1"){
  print <<FHM_DL_ONE_BIT
      data_out <= 1'b0;
FHM_DL_ONE_BIT
}
else{
  print "      data_out <= {$bit_width\{1'b0}};\n";
}
{
print <<FHM_DL_COMMON
    else if (enb == 1'b1)
      data_out <= data_in;
  end
end

endmodule
FHM_DL_COMMON
}

{
print <<FHM_DL_COMMON
//%%
\n
// Module       : $bit_width-bit registerfile
//                with $n_reg registers, $n_read read ports, $n_write write ports
// Refereces    :
// Author       : Designed by K.Ueda (c)2002.
//                Modified by T.Yoshimura (c)2004.
// Version      : 1.1 :
\n
// Functionality : synthesis level
// port
//  clock       : clock 
//  async_reset : '1' then asynchronously reset registers
//  reset       : '1' then synchronously reset registers
//  w_enb*      : '1' then update register value
//  w_sel*      : selected register to write
//  data_in*    : data to register
//  r_sel*      : selected register to read
//  data_out*   : registered data
\n
module $instance_name (
  clock      ,
  async_reset,
  reset      ,
FHM_DL_COMMON
}
for ($i=0; $i<=$n_write-1; $i++){
    print "  w_enb$i     ,\n";}
for ($i=0; $i<=$n_write-1; $i++){
    print "  w_sel$i     ,\n";}
for ($i=0; $i<=$n_write-1; $i++){
    print "  data_in$i   ,\n";}
for ($i=0; $i<=$n_read-1; $i++){
    print "  r_sel$i     ,\n";}
for ($i=0; $i<=$n_read-1; $i++){
    if ($i == $n_read - 1){
	print "  data_out$i  );\n";}
    else{
	print "  data_out$i  ,\n";}
}
{
print <<FHM_DL_COMMON
\n
input         clock      ;
input         async_reset;
input         reset      ;
FHM_DL_COMMON
}
for ($i=0; $i<=$n_write-1; $i++){
    print "input         w_enb$i     ;\n";}
for ($i=0; $i<=$n_write-1; $i++){
    print "input  [ ${n_sel_1}:0] w_sel$i     ;\n";}
for ($i=0; $i<=$n_write-1; $i++){
    print "input  [${w_1}:0] data_in$i   ;\n";}
for ($i=0; $i<=$n_read-1; $i++){
    print "input  [ ${n_sel_1}:0] r_sel$i     ;\n";}
for ($i=0; $i<=$n_read-1; $i++){
    print "output [${w_1}:0] data_out$i  ;\n";}

{
print <<FHM_DL_COMMON
\n
wire          clock      ;
wire          async_reset;
wire          reset      ;
FHM_DL_COMMON
}
for ($i=0; $i<=$n_write-1; $i++){
    print "wire        w_enb$i       ;\n";}
for ($i=0; $i<=$n_write-1; $i++){
    print "wire [ ${n_sel_1}:0] w_sel$i       ;\n";}
for ($i=0; $i<=$n_write-1; $i++){
    print "wire [${w_1}:0] data_in$i     ;\n";}
for ($i=0; $i<=$n_read-1; $i++){
    print "wire [ ${n_sel_1}:0] r_sel$i       ;\n";}
for ($i=0; $i<=$n_read-1; $i++){
    print "wire [${w_1}:0] data_out$i    ;\n";}

print " \n";
for ($i=0; $i<=$n_reg-1 ; $i++){
print <<FHM_DL_DATA_TMP
wire [${w_1}:0] data_in_tmp$i  ;
wire [${w_1}:0] data_out_tmp$i ;
wire        w_enb_tmp$i    ;
FHM_DL_DATA_TMP
}

print " \n";
print "// synthesis\n";
print " \n";
for ($i=0; $i<=$n_reg-1 ; $i++){
print <<FHM_DL_MAPPING
${instance_name}_reg${bit_width} REG$i (
  .clock      (clock)        ,
  .async_reset(async_reset)  ,
  .reset      (reset)        ,
  .enb        (w_enb_tmp$i)   ,
  .data_in    (data_in_tmp$i) ,
  .data_out   (data_out_tmp$i));
\n
FHM_DL_MAPPING
}

print " \n";
for ($i=0; $i<=$n_reg-1; $i++){
 $i2 = &to_comp($i, $n_sel);
 print "assign w_enb_tmp$i = ( ";
 for ($j=0; $j<=$n_write-1; $j++){
   if ($j == 0){
     print "(w_enb$j == 1'b1 && w_sel$j == ${n_sel}'b${i2})\n";
   }
   elsif ($j != $n_write-1){
     print "                      || (w_enb$j == 1'b1 && w_sel$j == ${n_sel}'b${i2})\n";
   }
   else{
     print "                      || (w_enb$j == 1'b1 && w_sel$j == ${n_sel}'b${i2}) ";
   }
 }
 print ") ? 1'b1 : 1'b0;\n";
 print " \n";
}

print " \n";
for ($i=0; $i<=$n_reg-1; $i++){
 $i2 = &to_comp($i, $n_sel);
 print "assign data_in_tmp$i = ";
 for ($j=0; $j<$n_write-1; $j++){
   if ($j == 0){
     print "((w_sel$j == ${n_sel}'b${i2}) && (w_enb$j == 1'b1)) ? data_in$j :\n";
   }
   else{
     print "                      ((w_sel$j == ${n_sel}'b${i2}) && (w_enb$j == 1'b1)) ? data_in$j :\n";
   }
#   else{
#     print "                      data_in$j;\n";
#   }
 }
    print "                      data_in$j;\n";
 print " \n";
}

print " \n";
for ($i=0; $i<=$n_read-1; $i++){
 for ($j=0; $j<=$n_reg-1; $j++){
   $j2 = &to_comp($j, $n_sel);
   if ($j == 0){
     print "assign data_out$i  = (r_sel$i == ${n_sel}'b${j2}) ? data_out_tmp$j  :\n";
   }
   elsif ($j == $n_reg-1){
     print "                    data_out_tmp$j  ;\n";
     print " \n"
   }
   else{
     print "                    (r_sel$i == ${n_sel}'b${j2}) ? data_out_tmp$j  :\n";
   }
 }
}

print "endmodule\n";

exit(0);
# ---------------------------------

sub log2u{
    $num = $_[0];

    for ($i=1, $N=2; $N<$num; $i++, $N*=2){};
    return($i);
}

# ---------------------------------

sub to_comp{
  @buf = ();
  $num = $_[0];
  $width = $_[1];

  for ($x=1; $x<$width; $x++){
    $buf[$x] = $num % 2;
    $num = ($num - $buf[$x]) / 2;
  }
  $buf[$x] = $num % 2;
  return (join("", reverse(@buf)));
}

          ]]>
        </script>
      </instance>

      <entity></entity>

      <testvector></testvector>

      <synthesis></synthesis>
    </design>

    <design>
      <design_lang> SystemC Header </design_lang>

      <instance>
        <script>
          <![CDATA[
#!/usr/bin/perl
# this script generates instance for registerfile in sythesis level
# parameter : name_space instance_name bit_width num_register num_read_port num_write_port


if ($#ARGV != 5){
    print "number of parameters is wrong.\n";
    print "usage : this_script name_space instance_name bit_width num_register num_read_port num_write_port\n";
    exit (100);
}

$name_space    = $ARGV[0];
$instance_name = $ARGV[1];
$bit_width     = $ARGV[2];
$n_reg         = $ARGV[3];
$n_read        = $ARGV[4];
$n_write       = $ARGV[5];

@bit_widths = (1,4,8,16,20,24,28,32,36,40,44,48,52,56,60,64,128);
if (! grep($_ eq $bit_width, @bit_widths)){
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}
@n_regs = (4,8,16,32,64,128);
if (! grep($_ eq $n_reg, @n_regs)){
    print "num_register $n_reg is not supported.\n";
    exit (100);
}
@n_reads = (1,2,4,8,16,32,64,128);
if (! grep($_ eq $n_read, @n_reads)){
    print "num_read $n_read is not supported.\n";
    exit (100);
}
@n_writes = (1,2,4,8,16,32,64,128);
if (! grep($_ eq $n_write, @n_writes)){
    print "num_write $n_write is not supported.\n";
    exit (100);
}
if ($n_write > $n_reg){
   print "num_register should be equal or grater than num_write_port\n";
   exit(100);
}

$n_sel = &log2u($n_reg);
$zeros = 0 x $bit_width;
$dont_care = "1";

if (n_sel <= 64) {
  $n_sel_type = "sc_dt::sc_uint<" . $n_sel . ">";
} else {
  $n_sel_type = "sc_dt::sc_biguint<" . $n_sel . ">";
}

if (bit_width <= 64) {
  $data_type = "sc_dt::sc_uint<" . $bit_width . ">";
} else {
  $data_type = "sc_dt::sc_biguint<" . $bit_width . ">";
}

$macro = "__" . uc($name_space) . "_" . uc($instance_name) . "_H__";

{
print <<FHM_DL_COMMON
#ifndef $macro
#define $macro 1

// Module     : $bit_width-bit Positive Edge Trigger Register
// Feature    : positive edge trigger
// References : Started from scratch
// Author     : Designed by T.Morifuji (c)1997.

// Version    : 1.0  :

// Functionality :
//  port
//   clock       : clock port
//   async_reset : asynchronous reset port
//   reset       : synchronous reset port
//   enb         : write enable control
//   data_in     : input data
//   data_out    : output data

// Comment :

#include <systemc>

namespace $name_space {
  SC_MODULE(${instance_name}_reg${bit_width}) {
    sc_core::sc_in< bool > clock;
    sc_core::sc_in< bool > async_reset;
    sc_core::sc_in< bool > reset;
    sc_core::sc_in< bool > enb;
FHM_DL_COMMON
}
if ("$bit_width" == "1"){
 print <<FHM_DL_ONE
    sc_core::sc_in< bool > data_in;
    sc_core::sc_out< bool > data_out;

FHM_DL_ONE
}
else{
print <<FHM_DL_MULTIPLE
    sc_core::sc_in< $data_type > data_in;
    sc_core::sc_out< $data_type > data_out;
  
    SC_CTOR(${instance_name}_reg${bit_width}) :
      clock("clock"),
      async_reset("async_reset"),
      reset("reset"),
      enb("enb"),
      data_in("data_in"),
      data_out("data_out")
    {
FHM_DL_MULTIPLE
}
{
print <<FHM_DL_COMMON
      SC_METHOD(process);
      sensitive << clock.pos() << async_reset.pos();
    }
    
    void process();
  };
};

FHM_DL_COMMON
}
{
print <<FHM_DL_COMMON
//%%

// Module       : $bit_width-bit registerfile
//                with $n_reg registers, $n_read read ports, $n_write write ports
// Refereces    :
// Author       : Designed by K.Ueda (c)2002.
//                Modified by T.Yoshimura (c)2004.
// Version      : 1.1 :

// Functionality : synthesis level
// port
//  clock       : clock 
//  async_reset : '1' then asynchronously reset registers
//  reset       : '1' then synchronously reset registers
//  w_enb*      : '1' then update register value
//  w_sel*      : selected register to write
//  data_in*    : data to register
//  r_sel*      : selected register to read
//  data_out*   : registered data

#include <systemc>

namespace $name_space {
  SC_MODULE($instance_name) {
    sc_core::sc_in< bool > clock;
    sc_core::sc_in< bool > async_reset;
    sc_core::sc_in< bool > reset;
FHM_DL_COMMON
}
for ($i=0; $i<=$n_write-1; $i++){
    print "    sc_core::sc_in< bool > w_enb$i;\n";}
for ($i=0; $i<=$n_write-1; $i++){
    print "    sc_core::sc_in< $n_sel_type > w_sel$i;\n";}
for ($i=0; $i<=$n_write-1; $i++){
    print "    sc_core::sc_in< $data_type > data_in$i;\n";}
for ($i=0; $i<=$n_read-1; $i++){
    print "    sc_core::sc_in< $n_sel_type > r_sel$i;\n";}
for ($i=0; $i<=$n_read-1; $i++){
    print "    sc_core::sc_out< $data_type > data_out$i;\n";}
print "\n";
for ($i=0; $i<=$n_reg-1 ; $i++){
    print "    sc_core::sc_signal< $data_type > data_in_tmp$i;\n";
    print "    sc_core::sc_signal< $data_type > data_out_tmp$i;\n";
    print "    sc_core::sc_signal< bool > w_enb_tmp$i;\n";
}
print "\n";
for ($i=0; $i<=$n_reg-1 ; $i++){
print "    ${instance_name}_reg${bit_width} REG$i;\n";
}
{
print <<FHM_DL_DATA_TMP

    SC_CTOR($instance_name) :
      clock("clock"),
      async_reset("async_reset"),
      reset("reset"),
FHM_DL_DATA_TMP
}

for ($i=0; $i<=$n_write-1; $i++){
    print "      w_enb$i(\"w_enb$i\"),\n";}
for ($i=0; $i<=$n_write-1; $i++){
    print "      w_sel$i(\"w_sel$i\"),\n";}
for ($i=0; $i<=$n_write-1; $i++){
    print "      data_in$i(\"data_in$i\"),\n";}
for ($i=0; $i<=$n_read-1; $i++){
    print "      r_sel$i(\"r_sel$i\"),\n";}
for ($i=0; $i<=$n_read-1; $i++){
    print "      data_out$i(\"data_out$i\"),\n";}
for ($i=0; $i<=$n_reg-1 ; $i++){
    print "      data_in_tmp$i(\"data_in_tmp$i\"),\n";
    print "      data_out_tmp$i(\"data_out_tmp$i\"),\n";
    print "      w_enb_tmp$i(\"w_enb_tmp$i\"),\n";
}
for ($i=0; $i<=$n_reg-1 ; $i++){
    print "    REG$i(\"REG$i\")";
    if ( $i != $n_reg - 1) {
        print ",";
    }
    print "\n";
}
print "    {\n";
print "      // synthesis\n";
print "\n";
for ($i=0; $i<=$n_reg-1 ; $i++){
print <<FHM_DL_MAPPING
      REG$i.clock       ( clock );
      REG$i.async_reset ( async_reset );
      REG$i.reset       ( reset );
      REG$i.enb         ( w_enb_tmp$i );
      REG$i.data_in     ( data_in_tmp$i );
      REG$i.data_out    ( data_out_tmp$i );
  
FHM_DL_MAPPING
}
print "    SC_METHOD(w_enb);\n      sensitive";
for ($i=0; $i<=$n_write-1; $i++){
    print " << w_enb$i << w_sel$i";
}
print ";\n\n";

print "      SC_METHOD(data_in_tmp);\n      sensitive";
for ($j=0; $j<=$n_write-1; $j++){
    print " << w_sel$j << w_enb$j << data_in$j";
}
print ";\n\n";

print "      SC_METHOD(data_read);\n      sensitive";
for ($i=0; $i<=$n_read-1; $i++){
 print " << r_sel$i";
}
for ($i=0; $i<=$n_reg-1; $i++){
  print " << data_out_tmp$i";
}
print ";\n";
{
    print <<FHM_DL_END
  }
    
    void w_enb();
    void data_in_tmp();
    void data_read();
  };
};
  
#endif // $macro
FHM_DL_END
}

exit(0);
# ---------------------------------

sub log2u{
    $num = $_[0];

    for ($i=1, $N=2; $N<$num; $i++, $N*=2){};
    return($i);
}

# ---------------------------------

sub to_comp{
  @buf = ();
  $num = $_[0];
  $width = $_[1];

  for ($x=1; $x<$width; $x++){
    $buf[$x] = $num % 2;
    $num = ($num - $buf[$x]) / 2;
  }
  $buf[$x] = $num % 2;
  return (join("", reverse(@buf)));
}
          ]]>
        </script>
      </instance>

      <entity>
        <script>
          <![CDATA[
          ]]>
        </script>
      </entity>

      <testvector>
        <testvector_script>
          <![CDATA[ ]]>
        </testvector_script>
      </testvector>
    </design>

    <design>
      <design_lang> SystemC Program </design_lang>

      <instance>
        <script>
          <![CDATA[
#!/usr/bin/perl
# this script generates instance for registerfile in sythesis level
# parameter : name_space instance_name bit_width num_register num_read_port num_write_port


if ($#ARGV != 5){
    print "number of parameters is wrong.\n";
    print "usage : this_script name_space instance_name bit_width num_register num_read_port num_write_port\n";
    exit (100);
}

$name_space    = $ARGV[0];
$instance_name = $ARGV[1];
$bit_width     = $ARGV[2];
$n_reg         = $ARGV[3];
$n_read        = $ARGV[4];
$n_write       = $ARGV[5];

@bit_widths = (1,4,8,16,20,24,28,32,36,40,44,48,52,56,60,64,128);
if (! grep($_ eq $bit_width, @bit_widths)){
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}
@n_regs = (4,8,16,32,64,128);
if (! grep($_ eq $n_reg, @n_regs)){
    print "num_register $n_reg is not supported.\n";
    exit (100);
}
@n_reads = (1,2,4,8,16,32,64,128);
if (! grep($_ eq $n_read, @n_reads)){
    print "num_read $n_read is not supported.\n";
    exit (100);
}
@n_writes = (1,2,4,8,16,32,64,128);
if (! grep($_ eq $n_write, @n_writes)){
    print "num_write $n_write is not supported.\n";
    exit (100);
}
if ($n_write > $n_reg){
   print "num_register should be equal or grater than num_write_port\n";
   exit(100);
}

$w_1 = $bit_width - 1;
$n_sel = &log2u($n_reg);
$n_sel_1 = $n_sel - 1;
$zeros = 0 x $bit_width;
$dont_care = "x";
$W1 = $bit_width - 1;
{
print <<FHM_DL_COMMON
#include "$instance_name.h"

// Module     : $bit_width-bit Positive Edge Trigger Register
// Feature    : positive edge trigger
// References : Started from scratch
// Author     : Designed by T.Morifuji (c)1997.

// Version    : 1.0  :

// Functionality :
//  port
//   clock       : clock port
//   async_reset : asynchronous reset port
//   reset       : synchronous reset port
//   enb         : write enable control
//   data_in     : input data
//   data_out    : output data

// Comment :

void ${name_space}::${instance_name}_reg${bit_width}::process()
{
  if (async_reset.read() == 1) {
FHM_DL_COMMON
}
if ("$bit_width" == "1"){
  print <<FHM_DL_ONE_BIT
    data_out.write( false );
FHM_DL_ONE_BIT
}
else{
  print "    data_out.write( 0 );\n";
}
{
print <<FHM_DL_COMMON
  } else if (reset.read() == 1) {
FHM_DL_COMMON
}
if ("$bit_width" == "1"){
  print "    data_out.write( false );\n";
}
else{
  print "    data_out.write( 0 );\n";
}
{
print <<FHM_DL_COMMON
  } else if (enb.read() == 1) {
    data_out.write( data_in.read() );
  }
}

FHM_DL_COMMON
}

{
print <<FHM_DL_COMMON
//

// Module       : $bit_width-bit registerfile
//                with $n_reg registers, $n_read read ports, $n_write write ports
// Refereces    :
// Author       : Designed by K.Ueda (c)2002.
//                Modified by T.Yoshimura (c)2004.
// Version      : 1.1 :

// Functionality : synthesis level
// port
//  clock       : clock 
//  async_reset : '1' then asynchronously reset registers
//  reset       : '1' then synchronously reset registers
//  w_enb*      : '1' then update register value
//  w_sel*      : selected register to write
//  data_in*    : data to register
//  r_sel*      : selected register to read
//  data_out*   : registered data

FHM_DL_COMMON
}
print "// synthesis\n";
print "\n";
{
print <<FHM_DL_PROCESS
void ${name_space}::${instance_name}::w_enb()
{
FHM_DL_PROCESS
}
for ($i=0; $i<=$n_reg-1; $i++){
 $i2 = &to_comp($i, $n_sel);
 for ($j=0; $j<=$n_write-1; $j++){
   if ($j == 0){
     print "  if ( (w_enb$j.read() == 1 && w_sel$j.read() == $i)";
   }
   elsif ($j != $n_write-1){
     print "\n";
     print "      || (w_enb$j.read() == 1 && w_sel$j.read() == $i)";
   }
   else{
     print "\n";
     print "      || (w_enb$j.read() == 1 && w_sel$j.read() == $i)";
   }
 }
 print " ) {\n";
 print "    w_enb_tmp$i.write( true );\n";
 print "  } else {\n";
 print "    w_enb_tmp$i.write( false );\n";
 print "  }\n";

 if ( $i != $n_reg - 1 ) {
   print "\n";
 }
}
print "}\n\n";

{
print <<FHM_DL_PROCESS
void ${name_space}::${instance_name}::data_in_tmp()
{
FHM_DL_PROCESS
}
for ($i=0; $i<=$n_reg-1; $i++){
 $i2 = &to_comp($i, $n_sel);
 for ($j=0; $j<=$n_write-1; $j++){
   if ($j == 0){
     print "  if ((w_sel$j.read() == $i) && (w_enb$j.read() == 1)) {\n";
     print "    data_in_tmp$i.write( data_in$j.read() );\n";
   } elsif ($j == $n_write - 1) {
     print "  } else {\n";
     print "    data_in_tmp$i.write( data_in$j.read() );\n";
   } else{
     print "  } else if ((w_sel$j.read() == $i) && (w_enb$j.read() == 1)) {\n";
     print "    data_in_tmp$i.write( data_in$j.read() );\n";
   }
 }

 print "  }\n";

 if ( $i != $n_reg - 1 ) {
   print "\n";
 }
}
print "}\n\n";

{
print <<FHM_DL_END
void ${name_space}::${instance_name}::data_read()
{
FHM_DL_END
}

for ($i=0; $i<=$n_read-1; $i++){
 for ($j=0; $j<=$n_reg-1; $j++){
   $j2 = &to_comp($j, $n_sel);
   if ($j == 0){
     print "  if (r_sel$i.read() == $j) {\n";
     print "    data_out$i.write( data_out_tmp$j.read() );\n";
   }
   elsif ($j == $n_reg-1){
     print "  } else {\n";
     print "    data_out$i.write( data_out_tmp$j.read() );\n";
     print "  }\n";
   }
   else{
     print "  } else if (r_sel$i.read() == $j) {\n";
     print "    data_out$i.write( data_out_tmp$j.read() );\n";
   }
 }
 if ($i != $n_read - 1) {
   print "\n";
 }
}

print "}\n";

exit(0);
# ---------------------------------

sub log2u{
    $num = $_[0];

    for ($i=1, $N=2; $N<$num; $i++, $N*=2){};
    return($i);
}

# ---------------------------------

sub to_comp{
  @buf = ();
  $num = $_[0];
  $width = $_[1];

  for ($x=1; $x<$width; $x++){
    $buf[$x] = $num % 2;
    $num = ($num - $buf[$x]) / 2;
  }
  $buf[$x] = $num % 2;
  return (join("", reverse(@buf)));
}
          ]]>
        </script>
      </instance>

      <entity></entity>

      <testvector></testvector>

      <synthesis></synthesis>
    </design>

    <estimation>
      <estimation_data>
        <library name="OSAKA">

          <est_type name="shape">
            <est_index name="area">
              <unit> mm2 </unit>
              <translate>
                <translate_value key="gate"> 4201.68 </translate_value>
                <translate_value key="mm2">  1 </translate_value>
              </translate>

              <parameters name="4,1,1">
                <max>
                  <data bit_width="4"> 0.100640431208469 </data>
                  <data bit_width="8"> 0.190091621208659 </data>
                  <data bit_width="16"> 0.384275175168028 </data>
                  <data bit_width="32"> 0.800327887892462 </data>
                  <data bit_width="128"> 3.44180733587517 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.0745055530168885 </data>
                  <data bit_width="8"> 0.142227654890425 </data>
                  <data bit_width="16"> 0.281444516241123 </data>
                  <data bit_width="32"> 0.59009506316521 </data>
                  <data bit_width="128"> 2.99197633994021 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.0745055530168885 </data>
                    <data bit_width="8"> 0.142227654890425 </data>
                    <data bit_width="16"> 0.281444516241123 </data>
                    <data bit_width="32"> 0.59009506316521 </data>
                    <data bit_width="128"> 2.99197633994021 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.100640431208469 </data>
                    <data bit_width="8"> 0.190091621208659 </data>
                    <data bit_width="16"> 0.377288398212144 </data>
                    <data bit_width="32"> 0.800327887892462 </data>
                    <data bit_width="128"> 3.44180733587517 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.0961412223205956 </data>
                    <data bit_width="8"> 0.186560696435711 </data>
                    <data bit_width="16"> 0.384275175168028 </data>
                    <data bit_width="32"> 0.761449570647931 </data>
                    <data bit_width="128"> 3.02224487800118 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,1,2">
                <max>
                  <data bit_width="4"> 0.119810111193618 </data>
                  <data bit_width="8"> 0.228457012195122 </data>
                  <data bit_width="16"> 0.47214675320348 </data>
                  <data bit_width="32"> 0.974615385512462 </data>
                  <data bit_width="128"> 4.14543260076922 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.0946044413187106 </data>
                  <data bit_width="8"> 0.183171970497515 </data>
                  <data bit_width="16"> 0.377247695445631 </data>
                  <data bit_width="32"> 0.738064788608366 </data>
                  <data bit_width="128"> 3.38248257244721 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.0946044413187106 </data>
                    <data bit_width="8"> 0.183171970497515 </data>
                    <data bit_width="16"> 0.377247695445631 </data>
                    <data bit_width="32"> 0.738064788608366 </data>
                    <data bit_width="128"> 3.38248257244721 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.118333287637326 </data>
                    <data bit_width="8"> 0.22334325079492 </data>
                    <data bit_width="16"> 0.449920943051351 </data>
                    <data bit_width="32"> 0.949724974295996 </data>
                    <data bit_width="128"> 3.8010718795815 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.119810111193618 </data>
                    <data bit_width="8"> 0.228457012195122 </data>
                    <data bit_width="16"> 0.47214675320348 </data>
                    <data bit_width="32"> 0.974615385512462 </data>
                    <data bit_width="128"> 4.14543260076922 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,1,4">
                <max>
                  <data bit_width="4"> 0.188410208297633 </data>
                  <data bit_width="8"> 0.385435541735687 </data>
                  <data bit_width="16"> 0.701086229793797 </data>
                  <data bit_width="32"> 1.45377488885398 </data>
                  <data bit_width="128"> 6.10816778193484 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.136709900563584 </data>
                  <data bit_width="8"> 0.244837977904076 </data>
                  <data bit_width="16"> 0.500706467413035 </data>
                  <data bit_width="32"> 1.04709906394585 </data>
                  <data bit_width="128"> 4.76463246558519 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.136709900563584 </data>
                    <data bit_width="8"> 0.244837977904076 </data>
                    <data bit_width="16"> 0.500706467413035 </data>
                    <data bit_width="32"> 1.04709906394585 </data>
                    <data bit_width="128"> 4.76463246558519 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.188410208297633 </data>
                    <data bit_width="8"> 0.385435541735687 </data>
                    <data bit_width="16"> 0.701086229793797 </data>
                    <data bit_width="32"> 1.45377488885398 </data>
                    <data bit_width="128"> 6.10816778193484 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.167029803792769 </data>
                    <data bit_width="8"> 0.282177052036328 </data>
                    <data bit_width="16"> 0.617657629091221 </data>
                    <data bit_width="32"> 1.27741035276366 </data>
                    <data bit_width="128"> 5.49910151272824 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,2,1">
                <max>
                  <data bit_width="4"> 0.116648243321719 </data>
                  <data bit_width="8"> 0.225228192532511 </data>
                  <data bit_width="16"> 0.466102243864359 </data>
                  <data bit_width="32"> 0.973668789151006 </data>
                  <data bit_width="128"> 4.17702850026656 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.083075406504065 </data>
                  <data bit_width="8"> 0.159367347346776 </data>
                  <data bit_width="16"> 0.335328166352507 </data>
                  <data bit_width="32"> 0.664886342605815 </data>
                  <data bit_width="128"> 3.46141630776261 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.083075406504065 </data>
                    <data bit_width="8"> 0.159367347346776 </data>
                    <data bit_width="16"> 0.335328166352507 </data>
                    <data bit_width="32"> 0.664886342605815 </data>
                    <data bit_width="128"> 3.46141630776261 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.1072900001904 </data>
                    <data bit_width="8"> 0.209257088355134 </data>
                    <data bit_width="16"> 0.4192449984292 </data>
                    <data bit_width="32"> 0.941684338169494 </data>
                    <data bit_width="128"> 4.17702850026656 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.116648243321719 </data>
                    <data bit_width="8"> 0.225228192532511 </data>
                    <data bit_width="16"> 0.466102243864359 </data>
                    <data bit_width="32"> 0.973668789151006 </data>
                    <data bit_width="128"> 3.83279491393919 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,2,2">
                <max>
                  <data bit_width="4"> 0.143745326393252 </data>
                  <data bit_width="8"> 0.267124508291921 </data>
                  <data bit_width="16"> 0.563402336208374 </data>
                  <data bit_width="32"> 1.14897237723958 </data>
                  <data bit_width="128"> 4.90745851944936 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.103174287665886 </data>
                  <data bit_width="8"> 0.200311662953866 </data>
                  <data bit_width="16"> 0.414631743017079 </data>
                  <data bit_width="32"> 0.862478553102568 </data>
                  <data bit_width="128"> 3.85802152353344 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.103174287665886 </data>
                    <data bit_width="8"> 0.200311662953866 </data>
                    <data bit_width="16"> 0.414631743017079 </data>
                    <data bit_width="32"> 0.862478553102568 </data>
                    <data bit_width="128"> 3.85802152353344 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.143745326393252 </data>
                    <data bit_width="8"> 0.257860170931627 </data>
                    <data bit_width="16"> 0.563402336208374 </data>
                    <data bit_width="32"> 1.11186831077093 </data>
                    <data bit_width="128"> 4.90745851944936 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.140317117676739 </data>
                    <data bit_width="8"> 0.267124508291921 </data>
                    <data bit_width="16"> 0.553973792625807 </data>
                    <data bit_width="32"> 1.14897237723958 </data>
                    <data bit_width="128"> 4.86539154790465 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,2,4">
                <max>
                  <data bit_width="4"> 0.208448681479789 </data>
                  <data bit_width="8"> 0.434037694446031 </data>
                  <data bit_width="16"> 0.800635091439615 </data>
                  <data bit_width="32"> 1.62166369499819 </data>
                  <data bit_width="128"> 7.33554978294397 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.145279746672759 </data>
                  <data bit_width="8"> 0.261977670360427 </data>
                  <data bit_width="16"> 0.538090544020487 </data>
                  <data bit_width="32"> 1.12869240327678 </data>
                  <data bit_width="128"> 5.27837228203957 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.145279746672759 </data>
                    <data bit_width="8"> 0.261977670360427 </data>
                    <data bit_width="16"> 0.538090544020487 </data>
                    <data bit_width="32"> 1.12869240327678 </data>
                    <data bit_width="128"> 5.27837228203957 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.208448681479789 </data>
                    <data bit_width="8"> 0.434037694446031 </data>
                    <data bit_width="16"> 0.800635091439615 </data>
                    <data bit_width="32"> 1.62166369499819 </data>
                    <data bit_width="128"> 7.33554978294397 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.187536825031892 </data>
                    <data bit_width="8"> 0.344102965242474 </data>
                    <data bit_width="16"> 0.699484726585556 </data>
                    <data bit_width="32"> 1.45164834447173 </data>
                    <data bit_width="128"> 6.49535758601321 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,4,1">
                <max>
                  <data bit_width="4"> 0.157662271043963 </data>
                  <data bit_width="8"> 0.302563213762114 </data>
                  <data bit_width="16"> 0.629756409817026 </data>
                  <data bit_width="32"> 1.32238283067725 </data>
                  <data bit_width="128"> 5.33526916614307 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.100215098960416 </data>
                  <data bit_width="8"> 0.193646732259477 </data>
                  <data bit_width="16"> 0.410096232935397 </data>
                  <data bit_width="32"> 0.867497820395651 </data>
                  <data bit_width="128"> 4.54581095395175 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.100215098960416 </data>
                    <data bit_width="8"> 0.193646732259477 </data>
                    <data bit_width="16"> 0.410096232935397 </data>
                    <data bit_width="32"> 0.867497820395651 </data>
                    <data bit_width="128"> 4.54581095395175 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.153725973658156 </data>
                    <data bit_width="8"> 0.289835818767731 </data>
                    <data bit_width="16"> 0.568727006102321 </data>
                    <data bit_width="32"> 1.29619341334895 </data>
                    <data bit_width="128"> 5.33526916614307 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.157662271043963 </data>
                    <data bit_width="8"> 0.302563213762114 </data>
                    <data bit_width="16"> 0.629756409817026 </data>
                    <data bit_width="32"> 1.32238283067725 </data>
                    <data bit_width="128"> 5.24263880757221 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,4,2">
                <max>
                  <data bit_width="4"> 0.187962157041945 </data>
                  <data bit_width="8"> 0.367780279316845 </data>
                  <data bit_width="16"> 0.717627987852478 </data>
                  <data bit_width="32"> 1.49768647683784 </data>
                  <data bit_width="128"> 6.62930419356067 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.120313987262238 </data>
                  <data bit_width="8"> 0.234591047866568 </data>
                  <data bit_width="16"> 0.489399780563965 </data>
                  <data bit_width="32"> 1.02566534767046 </data>
                  <data bit_width="128"> 5.06710820148131 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.120313987262238 </data>
                    <data bit_width="8"> 0.234591047866568 </data>
                    <data bit_width="16"> 0.489399780563965 </data>
                    <data bit_width="32"> 1.02566534767046 </data>
                    <data bit_width="128"> 5.06710820148131 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.187962157041945 </data>
                    <data bit_width="8"> 0.356627513756402 </data>
                    <data bit_width="16"> 0.69054949877192 </data>
                    <data bit_width="32"> 1.45313177752708 </data>
                    <data bit_width="128"> 6.62930419356067 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.181331159916986 </data>
                    <data bit_width="8"> 0.367780279316845 </data>
                    <data bit_width="16"> 0.717627987852478 </data>
                    <data bit_width="32"> 1.49768647683784 </data>
                    <data bit_width="128"> 6.57525680204109 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,4,4">
                <max>
                  <data bit_width="4"> 0.250362646846023 </data>
                  <data bit_width="8"> 0.501755096770815 </data>
                  <data bit_width="16"> 1.02648289184326 </data>
                  <data bit_width="32"> 2.11426427381428 </data>
                  <data bit_width="128"> 9.35572385617182 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.162419453647113 </data>
                  <data bit_width="8"> 0.296257055273129 </data>
                  <data bit_width="16"> 0.612858581567373 </data>
                  <data bit_width="32"> 1.29187931422669 </data>
                  <data bit_width="128"> 6.30387911787666 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.162419453647113 </data>
                    <data bit_width="8"> 0.296257055273129 </data>
                    <data bit_width="16"> 0.612858581567373 </data>
                    <data bit_width="32"> 1.29187931422669 </data>
                    <data bit_width="128"> 6.30387911787666 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.250362646846023 </data>
                    <data bit_width="8"> 0.501755096770815 </data>
                    <data bit_width="16"> 1.02648289184326 </data>
                    <data bit_width="32"> 2.11426427381428 </data>
                    <data bit_width="128"> 9.35572385617182 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.228550852516136 </data>
                    <data bit_width="8"> 0.428146031349365 </data>
                    <data bit_width="16"> 0.918309143485463 </data>
                    <data bit_width="32"> 1.80036244430799 </data>
                    <data bit_width="128"> 7.94010334866053 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,1,1">
                <max>
                  <data bit_width="4"> 0.191408538251366 </data>
                  <data bit_width="8"> 0.391737342205975 </data>
                  <data bit_width="16"> 0.85858118609699 </data>
                  <data bit_width="32"> 1.69609053711849 </data>
                  <data bit_width="128"> 7.23905796681327 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.162073174063708 </data>
                  <data bit_width="8"> 0.326599764855962 </data>
                  <data bit_width="16"> 0.683344245159079 </data>
                  <data bit_width="32"> 1.29473670912587 </data>
                  <data bit_width="128"> 6.03861134117781 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.162073174063708 </data>
                    <data bit_width="8"> 0.326599764855962 </data>
                    <data bit_width="16"> 0.683344245159079 </data>
                    <data bit_width="32"> 1.29473670912587 </data>
                    <data bit_width="128"> 6.03861134117781 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.18862224967156 </data>
                    <data bit_width="8"> 0.375259180613469 </data>
                    <data bit_width="16"> 0.85858118609699 </data>
                    <data bit_width="32"> 1.69609053711849 </data>
                    <data bit_width="128"> 7.23905796681327 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.191408538251366 </data>
                    <data bit_width="8"> 0.391737342205975 </data>
                    <data bit_width="16"> 0.734327734620437 </data>
                    <data bit_width="32"> 1.46468512214162 </data>
                    <data bit_width="128"> 6.08370351645056 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,1,2">
                <max>
                  <data bit_width="4"> 0.248567971858875 </data>
                  <data bit_width="8"> 0.498862490003998 </data>
                  <data bit_width="16"> 1.00612540507606 </data>
                  <data bit_width="32"> 2.04901391372023 </data>
                  <data bit_width="128"> 8.95851666761867 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.202542884274861 </data>
                  <data bit_width="8"> 0.404584347213496 </data>
                  <data bit_width="16"> 0.797455966422955 </data>
                  <data bit_width="32"> 1.59914015227242 </data>
                  <data bit_width="128"> 7.38864424468308 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.202542884274861 </data>
                    <data bit_width="8"> 0.404584347213496 </data>
                    <data bit_width="16"> 0.797455966422955 </data>
                    <data bit_width="32"> 1.59914015227242 </data>
                    <data bit_width="128"> 7.38864424468308 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.248567971858875 </data>
                    <data bit_width="8"> 0.498862490003998 </data>
                    <data bit_width="16"> 1.00612540507606 </data>
                    <data bit_width="32"> 2.04901391372023 </data>
                    <data bit_width="128"> 8.95851666761867 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.247373352325736 </data>
                    <data bit_width="8"> 0.476129128348661 </data>
                    <data bit_width="16"> 0.983364094838255 </data>
                    <data bit_width="32"> 1.97751953908913 </data>
                    <data bit_width="128"> 8.82623606057577 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,1,4">
                <max>
                  <data bit_width="4"> 0.426402925258468 </data>
                  <data bit_width="8"> 0.772172181127549 </data>
                  <data bit_width="16"> 1.45565611184098 </data>
                  <data bit_width="32"> 3.0985524782944 </data>
                  <data bit_width="128"> 15.1511400649264 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.28789268459283 </data>
                  <data bit_width="8"> 0.549268643494983 </data>
                  <data bit_width="16"> 1.13464135821862 </data>
                  <data bit_width="32"> 2.27591557305649 </data>
                  <data bit_width="128"> 10.5017870085299 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.28789268459283 </data>
                    <data bit_width="8"> 0.549268643494983 </data>
                    <data bit_width="16"> 1.13464135821862 </data>
                    <data bit_width="32"> 2.27591557305649 </data>
                    <data bit_width="128"> 10.5017870085299 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.426402925258468 </data>
                    <data bit_width="8"> 0.772172181127549 </data>
                    <data bit_width="16"> 1.45565611184098 </data>
                    <data bit_width="32"> 3.0985524782944 </data>
                    <data bit_width="128"> 15.1511400649264 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.363123415871747 </data>
                    <data bit_width="8"> 0.63328881614021 </data>
                    <data bit_width="16"> 1.26922026951124 </data>
                    <data bit_width="32"> 2.66094850202776 </data>
                    <data bit_width="128"> 12.2035523588184 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,2,1">
                <max>
                  <data bit_width="4"> 0.235867044134727 </data>
                  <data bit_width="8"> 0.471129675034748 </data>
                  <data bit_width="16"> 1.00493133746501 </data>
                  <data bit_width="32"> 2.03809868362179 </data>
                  <data bit_width="128"> 9.15065335484853 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.189553302964528 </data>
                  <data bit_width="8"> 0.384836358075817 </data>
                  <data bit_width="16"> 0.790783540155366 </data>
                  <data bit_width="32"> 1.52210112050418 </data>
                  <data bit_width="128"> 7.20200015232002 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.189553302964528 </data>
                    <data bit_width="8"> 0.384836358075817 </data>
                    <data bit_width="16"> 0.790783540155366 </data>
                    <data bit_width="32"> 1.52210112050418 </data>
                    <data bit_width="128"> 7.20200015232002 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.235867044134727 </data>
                    <data bit_width="8"> 0.461379924458788 </data>
                    <data bit_width="16"> 1.00493133746501 </data>
                    <data bit_width="32"> 2.03809868362179 </data>
                    <data bit_width="128"> 9.15065335484853 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.231571451419432 </data>
                    <data bit_width="8"> 0.471129675034748 </data>
                    <data bit_width="16"> 0.928847675929628 </data>
                    <data bit_width="32"> 1.85905292835247 </data>
                    <data bit_width="128"> 7.24697053845129 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,2,2">
                <max>
                  <data bit_width="4"> 0.302954147388664 </data>
                  <data bit_width="8"> 0.578898486081758 </data>
                  <data bit_width="16"> 1.16490536404486 </data>
                  <data bit_width="32"> 2.41708492388759 </data>
                  <data bit_width="128"> 10.7153567144571 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.23002299841968 </data>
                  <data bit_width="8"> 0.46258294015727 </data>
                  <data bit_width="16"> 0.958556542145047 </data>
                  <data bit_width="32"> 1.91873701590792 </data>
                  <data bit_width="128"> 8.74817762633042 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.23002299841968 </data>
                    <data bit_width="8"> 0.46258294015727 </data>
                    <data bit_width="16"> 0.958556542145047 </data>
                    <data bit_width="32"> 1.91873701590792 </data>
                    <data bit_width="128"> 8.74817762633042 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.302954147388664 </data>
                    <data bit_width="8"> 0.578898486081758 </data>
                    <data bit_width="16"> 1.16490536404486 </data>
                    <data bit_width="32"> 2.41708492388759 </data>
                    <data bit_width="128"> 10.7153567144571 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.287536236457798 </data>
                    <data bit_width="8"> 0.555521432141429 </data>
                    <data bit_width="16"> 1.14435113240418 </data>
                    <data bit_width="32"> 2.31286856543097 </data>
                    <data bit_width="128"> 10.6467717972335 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,2,4">
                <max>
                  <data bit_width="4"> 0.474503453380552 </data>
                  <data bit_width="8"> 0.865310614087698 </data>
                  <data bit_width="16"> 1.61827021881723 </data>
                  <data bit_width="32"> 3.48611113602178 </data>
                  <data bit_width="128"> 16.5338105829097 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.315372798737648 </data>
                  <data bit_width="8"> 0.607505207440833 </data>
                  <data bit_width="16"> 1.25277467608195 </data>
                  <data bit_width="32"> 2.52114788394166 </data>
                  <data bit_width="128"> 11.7432119414139 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.315372798737648 </data>
                    <data bit_width="8"> 0.607505207440833 </data>
                    <data bit_width="16"> 1.25277467608195 </data>
                    <data bit_width="32"> 2.52114788394166 </data>
                    <data bit_width="128"> 11.7432119414139 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.474503453380552 </data>
                    <data bit_width="8"> 0.865310614087698 </data>
                    <data bit_width="16"> 1.61827021881723 </data>
                    <data bit_width="32"> 3.48611113602178 </data>
                    <data bit_width="128"> 16.5338105829097 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.406606534053045 </data>
                    <data bit_width="8"> 0.712681178004988 </data>
                    <data bit_width="16"> 1.43020730707717 </data>
                    <data bit_width="32"> 3.07930887359342 </data>
                    <data bit_width="128"> 14.5173050570248 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,4,1">
                <max>
                  <data bit_width="4"> 0.341312013765922 </data>
                  <data bit_width="8"> 0.632514793130367 </data>
                  <data bit_width="16"> 1.331493769635 </data>
                  <data bit_width="32"> 2.68902135026942 </data>
                  <data bit_width="128"> 12.4182971901715 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.243766077140572 </data>
                  <data bit_width="8"> 0.498079053854649 </data>
                  <data bit_width="16"> 1.06780739156718 </data>
                  <data bit_width="32"> 2.08198761043202 </data>
                  <data bit_width="128"> 9.7907981524057 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.243766077140572 </data>
                    <data bit_width="8"> 0.498079053854649 </data>
                    <data bit_width="16"> 1.06780739156718 </data>
                    <data bit_width="32"> 2.08198761043202 </data>
                    <data bit_width="128"> 9.7907981524057 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.341312013765922 </data>
                    <data bit_width="8"> 0.595872665219626 </data>
                    <data bit_width="16"> 1.331493769635 </data>
                    <data bit_width="32"> 2.68902135026942 </data>
                    <data bit_width="128"> 12.4182971901715 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.333711265255802 </data>
                    <data bit_width="8"> 0.632514793130367 </data>
                    <data bit_width="16"> 1.25637802926448 </data>
                    <data bit_width="32"> 2.54214906299385 </data>
                    <data bit_width="128"> 9.88505174573028 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,4,2">
                <max>
                  <data bit_width="4"> 0.397163667628187 </data>
                  <data bit_width="8"> 0.73043030978085 </data>
                  <data bit_width="16"> 1.49543163567906 </data>
                  <data bit_width="32"> 3.1216150073304 </data>
                  <data bit_width="128"> 14.6825905054645 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.284235758077721 </data>
                  <data bit_width="8"> 0.576063636212182 </data>
                  <data bit_width="16"> 1.19301098393976 </data>
                  <data bit_width="32"> 2.40589218169875 </data>
                  <data bit_width="128"> 11.2082045900687 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.284235758077721 </data>
                    <data bit_width="8"> 0.576063636212182 </data>
                    <data bit_width="16"> 1.19301098393976 </data>
                    <data bit_width="32"> 2.40589218169875 </data>
                    <data bit_width="128"> 11.2082045900687 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.397163667628187 </data>
                    <data bit_width="8"> 0.73043030978085 </data>
                    <data bit_width="16"> 1.49543163567906 </data>
                    <data bit_width="32"> 3.1216150073304 </data>
                    <data bit_width="128"> 14.6681115501418 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.393092449210792 </data>
                    <data bit_width="8"> 0.716906550237048 </data>
                    <data bit_width="16"> 1.47188148550104 </data>
                    <data bit_width="32"> 3.07408031025685 </data>
                    <data bit_width="128"> 14.6825905054645 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,4,4">
                <max>
                  <data bit_width="4"> 0.563874791987967 </data>
                  <data bit_width="8"> 1.04820736800518 </data>
                  <data bit_width="16"> 1.86930947478152 </data>
                  <data bit_width="32"> 4.35725960734754 </data>
                  <data bit_width="128"> 20.9857054202129 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.401568236990918 </data>
                  <data bit_width="8"> 0.720747903457664 </data>
                  <data bit_width="16"> 1.48722900173264 </data>
                  <data bit_width="32"> 3.00830304973249 </data>
                  <data bit_width="128"> 14.6743729962777 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.401568236990918 </data>
                    <data bit_width="8"> 0.720747903457664 </data>
                    <data bit_width="16"> 1.48722900173264 </data>
                    <data bit_width="32"> 3.00830304973249 </data>
                    <data bit_width="128"> 14.6743729962777 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.563874791987967 </data>
                    <data bit_width="8"> 1.04820736800518 </data>
                    <data bit_width="16"> 1.86930947478152 </data>
                    <data bit_width="32"> 4.35725960734754 </data>
                    <data bit_width="128"> 20.9857054202129 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.495587026141924 </data>
                    <data bit_width="8"> 0.930160278745644 </data>
                    <data bit_width="16"> 1.75773766017403 </data>
                    <data bit_width="32"> 3.78515074636812 </data>
                    <data bit_width="128"> 18.0816456898193 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,1,1">
                <max>
                  <data bit_width="4"> 0.438670589383294 </data>
                  <data bit_width="8"> 0.846944285857086 </data>
                  <data bit_width="16"> 1.62765994792559 </data>
                  <data bit_width="32"> 3.44569668418347 </data>
                  <data bit_width="128"> 15.506525254422 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.33759881237981 </data>
                  <data bit_width="8"> 0.630296732735477 </data>
                  <data bit_width="16"> 1.33163264170522 </data>
                  <data bit_width="32"> 2.82382629162621 </data>
                  <data bit_width="128"> 12.8755324508292 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.33759881237981 </data>
                    <data bit_width="8"> 0.630296732735477 </data>
                    <data bit_width="16"> 1.33163264170522 </data>
                    <data bit_width="32"> 2.82382629162621 </data>
                    <data bit_width="128"> 12.8755324508292 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.438670589383294 </data>
                    <data bit_width="8"> 0.846944285857086 </data>
                    <data bit_width="16"> 1.62765994792559 </data>
                    <data bit_width="32"> 3.44569668418347 </data>
                    <data bit_width="128"> 15.506525254422 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.385347947725672 </data>
                    <data bit_width="8"> 0.776886743397879 </data>
                    <data bit_width="16"> 1.52163534705166 </data>
                    <data bit_width="32"> 3.21687824132252 </data>
                    <data bit_width="128"> 14.4906574201272 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,1,2">
                <max>
                  <data bit_width="4"> 0.537912334589974 </data>
                  <data bit_width="8"> 1.09685164719826 </data>
                  <data bit_width="16"> 2.07963131699701 </data>
                  <data bit_width="32"> 4.35208403614745 </data>
                  <data bit_width="128"> 20.624756049961 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.428807039327126 </data>
                  <data bit_width="8"> 0.800705922154948 </data>
                  <data bit_width="16"> 1.65079301707888 </data>
                  <data bit_width="32"> 3.49452713343234 </data>
                  <data bit_width="128"> 16.1336637221302 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.428807039327126 </data>
                    <data bit_width="8"> 0.800705922154948 </data>
                    <data bit_width="16"> 1.65079301707888 </data>
                    <data bit_width="32"> 3.49452713343234 </data>
                    <data bit_width="128"> 16.1336637221302 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.537912334589974 </data>
                    <data bit_width="8"> 1.09685164719826 </data>
                    <data bit_width="16"> 2.07963131699701 </data>
                    <data bit_width="32"> 4.31151804540089 </data>
                    <data bit_width="128"> 20.624756049961 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.515107851859256 </data>
                    <data bit_width="8"> 1.02757399635384 </data>
                    <data bit_width="16"> 2.06605346147255 </data>
                    <data bit_width="32"> 4.35208403614745 </data>
                    <data bit_width="128"> 19.6032914957826 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,1,4">
                <max>
                  <data bit_width="4"> 0.845668173444908 </data>
                  <data bit_width="8"> 1.62620731088517 </data>
                  <data bit_width="16"> 3.3410631283201 </data>
                  <data bit_width="32"> 6.87363493959559 </data>
                  <data bit_width="128"> 33.3224299565888 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.612929760714762 </data>
                  <data bit_width="8"> 1.17772459468594 </data>
                  <data bit_width="16"> 2.3693512735382 </data>
                  <data bit_width="32"> 5.03984325174692 </data>
                  <data bit_width="128"> 24.3454664265246 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.612929760714762 </data>
                    <data bit_width="8"> 1.17772459468594 </data>
                    <data bit_width="16"> 2.3693512735382 </data>
                    <data bit_width="32"> 5.03984325174692 </data>
                    <data bit_width="128"> 24.3454664265246 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.845668173444908 </data>
                    <data bit_width="8"> 1.62620731088517 </data>
                    <data bit_width="16"> 3.3410631283201 </data>
                    <data bit_width="32"> 6.87363493959559 </data>
                    <data bit_width="128"> 33.3224299565888 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.76074556463129 </data>
                    <data bit_width="8"> 1.39493484130157 </data>
                    <data bit_width="16"> 2.8591943989071 </data>
                    <data bit_width="32"> 5.85244836208374 </data>
                    <data bit_width="128"> 27.8678855838617 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,2,1">
                <max>
                  <data bit_width="4"> 0.529319754717161 </data>
                  <data bit_width="8"> 1.07187930732469 </data>
                  <data bit_width="16"> 2.04079175615468 </data>
                  <data bit_width="32"> 4.66131906618305 </data>
                  <data bit_width="128"> 20.6703274790084 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.40034706331753 </data>
                  <data bit_width="8"> 0.742079295900687 </data>
                  <data bit_width="16"> 1.56543827778412 </data>
                  <data bit_width="32"> 3.34281768126083 </data>
                  <data bit_width="128"> 15.7204045465147 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.40034706331753 </data>
                    <data bit_width="8"> 0.742079295900687 </data>
                    <data bit_width="16"> 1.56543827778412 </data>
                    <data bit_width="32"> 3.34281768126083 </data>
                    <data bit_width="128"> 15.7204045465147 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.529319754717161 </data>
                    <data bit_width="8"> 1.07187930732469 </data>
                    <data bit_width="16"> 2.04079175615468 </data>
                    <data bit_width="32"> 4.66131906618305 </data>
                    <data bit_width="128"> 20.6703274790084 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.480965973610556 </data>
                    <data bit_width="8"> 1.00682290321966 </data>
                    <data bit_width="16"> 1.97958344566935 </data>
                    <data bit_width="32"> 4.18704170117667 </data>
                    <data bit_width="128"> 18.9340707169513 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,2,2">
                <max>
                  <data bit_width="4"> 0.634859697787552 </data>
                  <data bit_width="8"> 1.26367142880943 </data>
                  <data bit_width="16"> 2.48928074793892 </data>
                  <data bit_width="32"> 5.2202175306068 </data>
                  <data bit_width="128"> 24.80508726557 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.491555319300851 </data>
                  <data bit_width="8"> 0.974929968488795 </data>
                  <data bit_width="16"> 1.98380701671712 </data>
                  <data bit_width="32"> 4.22499945331391 </data>
                  <data bit_width="128"> 19.915887811542 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.491555319300851 </data>
                    <data bit_width="8"> 0.974929968488795 </data>
                    <data bit_width="16"> 1.98380701671712 </data>
                    <data bit_width="32"> 4.22499945331391 </data>
                    <data bit_width="128"> 19.915887811542 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.634859697787552 </data>
                    <data bit_width="8"> 1.26367142880943 </data>
                    <data bit_width="16"> 2.48928074793892 </data>
                    <data bit_width="32"> 5.2202175306068 </data>
                    <data bit_width="128"> 24.80508726557 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.610725819910131 </data>
                    <data bit_width="8"> 1.21742725433636 </data>
                    <data bit_width="16"> 2.44345318967651 </data>
                    <data bit_width="32"> 5.18224350878696 </data>
                    <data bit_width="128"> 24.1020109813218 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,2,4">
                <max>
                  <data bit_width="4"> 1.01003729841397 </data>
                  <data bit_width="8"> 1.94142906456465 </data>
                  <data bit_width="16"> 3.77256788879686 </data>
                  <data bit_width="32"> 7.95933393761543 </data>
                  <data bit_width="128"> 38.4816980945717 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.675678040688486 </data>
                  <data bit_width="8"> 1.30103696997392 </data>
                  <data bit_width="16"> 2.622643743931 </data>
                  <data bit_width="32"> 5.59498949682032 </data>
                  <data bit_width="128"> 27.4968528212524 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.675678040688486 </data>
                    <data bit_width="8"> 1.30103696997392 </data>
                    <data bit_width="16"> 2.622643743931 </data>
                    <data bit_width="32"> 5.59498949682032 </data>
                    <data bit_width="128"> 27.4968528212524 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.01003729841397 </data>
                    <data bit_width="8"> 1.94142906456465 </data>
                    <data bit_width="16"> 3.77256788879686 </data>
                    <data bit_width="32"> 7.95933393761543 </data>
                    <data bit_width="128"> 38.4816980945717 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.898038756878201 </data>
                    <data bit_width="8"> 1.5847880992841 </data>
                    <data bit_width="16"> 3.25841761509682 </data>
                    <data bit_width="32"> 6.99275907208545 </data>
                    <data bit_width="128"> 33.0887845754555 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,4,1">
                <max>
                  <data bit_width="4"> 0.74809269006683 </data>
                  <data bit_width="8"> 1.75001358266217 </data>
                  <data bit_width="16"> 3.00266077545172 </data>
                  <data bit_width="32"> 6.44386404676225 </data>
                  <data bit_width="128"> 30.1734663277546 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.525843594466975 </data>
                  <data bit_width="8"> 1.03922949058472 </data>
                  <data bit_width="16"> 2.1575575034272 </data>
                  <data bit_width="32"> 4.62416828292492 </data>
                  <data bit_width="128"> 22.3742422673788 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.525843594466975 </data>
                    <data bit_width="8"> 1.03922949058472 </data>
                    <data bit_width="16"> 2.1575575034272 </data>
                    <data bit_width="32"> 4.62416828292492 </data>
                    <data bit_width="128"> 22.3742422673788 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.74809269006683 </data>
                    <data bit_width="8"> 1.75001358266217 </data>
                    <data bit_width="16"> 3.00266077545172 </data>
                    <data bit_width="32"> 6.44386404676225 </data>
                    <data bit_width="128"> 30.1734663277546 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.672201996820319 </data>
                    <data bit_width="8"> 1.38652941918471 </data>
                    <data bit_width="16"> 2.75461290555206 </data>
                    <data bit_width="32"> 5.84798353729937 </data>
                    <data bit_width="128"> 27.2159514170522 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,4,2">
                <max>
                  <data bit_width="4"> 0.897154100978656 </data>
                  <data bit_width="8"> 1.63819168213667 </data>
                  <data bit_width="16"> 3.30465702480912 </data>
                  <data bit_width="32"> 7.20568543415967 </data>
                  <data bit_width="128"> 36.1873107899697 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.617051821414291 </data>
                  <data bit_width="8"> 1.22155471882675 </data>
                  <data bit_width="16"> 2.49039242184079 </data>
                  <data bit_width="32"> 5.33002433336189 </data>
                  <data bit_width="128"> 26.089493518069 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.617051821414291 </data>
                    <data bit_width="8"> 1.22155471882675 </data>
                    <data bit_width="16"> 2.49039242184079 </data>
                    <data bit_width="32"> 5.33002433336189 </data>
                    <data bit_width="128"> 26.089493518069 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.897154100978656 </data>
                    <data bit_width="8"> 1.63819168213667 </data>
                    <data bit_width="16"> 3.25697404252585 </data>
                    <data bit_width="32"> 7.20568543415967 </data>
                    <data bit_width="128"> 36.1873107899697 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.801961871917899 </data>
                    <data bit_width="8"> 1.5971337703014 </data>
                    <data bit_width="16"> 3.30465702480912 </data>
                    <data bit_width="32"> 7.14729361231698 </data>
                    <data bit_width="128"> 33.0409577240532 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,4,4">
                <max>
                  <data bit_width="4"> 1.22793202742712 </data>
                  <data bit_width="8"> 2.31043743216999 </data>
                  <data bit_width="16"> 4.70574744435559 </data>
                  <data bit_width="32"> 10.395131381971 </data>
                  <data bit_width="128"> 48.4403708754593 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.801174542801927 </data>
                  <data bit_width="8"> 1.54766172031188 </data>
                  <data bit_width="16"> 3.12922914905466 </data>
                  <data bit_width="32"> 6.71124221454275 </data>
                  <data bit_width="128"> 34.7816156275585 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.801174542801927 </data>
                    <data bit_width="8"> 1.54766172031188 </data>
                    <data bit_width="16"> 3.12922914905466 </data>
                    <data bit_width="32"> 6.71124221454275 </data>
                    <data bit_width="128"> 34.7816156275585 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.22793202742712 </data>
                    <data bit_width="8"> 2.31043743216999 </data>
                    <data bit_width="16"> 4.70574744435559 </data>
                    <data bit_width="32"> 10.395131381971 </data>
                    <data bit_width="128"> 48.4403708754593 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.990754763094762 </data>
                    <data bit_width="8"> 2.07316743136079 </data>
                    <data bit_width="16"> 4.25966332229013 </data>
                    <data bit_width="32"> 9.18136465651834 </data>
                    <data bit_width="128"> 42.9256608368557 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,1,1">
                <max>
                  <data bit_width="4"> 0.865774005159841 </data>
                  <data bit_width="8"> 1.74640290836047 </data>
                  <data bit_width="16"> 3.63099551845928 </data>
                  <data bit_width="32"> 7.47150869937739 </data>
                  <data bit_width="128"> 36.6929716208755 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.673206640439062 </data>
                  <data bit_width="8"> 1.36302807734049 </data>
                  <data bit_width="16"> 2.86636647436264 </data>
                  <data bit_width="32"> 6.22512527727004 </data>
                  <data bit_width="128"> 28.3308142516803 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.673206640439062 </data>
                    <data bit_width="8"> 1.36302807734049 </data>
                    <data bit_width="16"> 2.86636647436264 </data>
                    <data bit_width="32"> 6.22512527727004 </data>
                    <data bit_width="128"> 28.3308142516803 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.858342256430761 </data>
                    <data bit_width="8"> 1.57793339592734 </data>
                    <data bit_width="16"> 3.53934319129491 </data>
                    <data bit_width="32"> 7.42045211296434 </data>
                    <data bit_width="128"> 36.6929716208755 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.865774005159841 </data>
                    <data bit_width="8"> 1.74640290836047 </data>
                    <data bit_width="16"> 3.63099551845928 </data>
                    <data bit_width="32"> 7.47150869937739 </data>
                    <data bit_width="128"> 34.7726460011234 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,1,2">
                <max>
                  <data bit_width="4"> 1.13858079339693 </data>
                  <data bit_width="8"> 2.19938298870928 </data>
                  <data bit_width="16"> 4.46625758172921 </data>
                  <data bit_width="32"> 9.52280917989947 </data>
                  <data bit_width="128"> 44.8545879267341 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.914082725243236 </data>
                  <data bit_width="8"> 1.70119150078064 </data>
                  <data bit_width="16"> 3.56260792754327 </data>
                  <data bit_width="32"> 7.699112505236 </data>
                  <data bit_width="128"> 37.5892128267741 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.914082725243236 </data>
                    <data bit_width="8"> 1.70119150078064 </data>
                    <data bit_width="16"> 3.56260792754327 </data>
                    <data bit_width="32"> 7.699112505236 </data>
                    <data bit_width="128"> 37.5892128267741 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.13858079339693 </data>
                    <data bit_width="8"> 2.19938298870928 </data>
                    <data bit_width="16"> 4.46625758172921 </data>
                    <data bit_width="32"> 9.52280917989947 </data>
                    <data bit_width="128"> 43.3595423437768 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 1.08071238575998 </data>
                    <data bit_width="8"> 2.14993267026523 </data>
                    <data bit_width="16"> 4.4317768613983 </data>
                    <data bit_width="32"> 9.47860532120485 </data>
                    <data bit_width="128"> 44.8545879267341 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,1,4">
                <max>
                  <data bit_width="4"> 2.02706608023457 </data>
                  <data bit_width="8"> 3.66975094271815 </data>
                  <data bit_width="16"> 7.38514025199444 </data>
                  <data bit_width="32"> 15.9281153609985 </data>
                  <data bit_width="128"> 78.6395040198206 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.31388490460958 </data>
                  <data bit_width="8"> 2.50162351345176 </data>
                  <data bit_width="16"> 5.19158268621123 </data>
                  <data bit_width="32"> 11.284849899326 </data>
                  <data bit_width="128"> 55.7941815833191 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.31388490460958 </data>
                    <data bit_width="8"> 2.50162351345176 </data>
                    <data bit_width="16"> 5.19158268621123 </data>
                    <data bit_width="32"> 11.284849899326 </data>
                    <data bit_width="128"> 55.7941815833191 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 2.02706608023457 </data>
                    <data bit_width="8"> 3.66975094271815 </data>
                    <data bit_width="16"> 7.38514025199444 </data>
                    <data bit_width="32"> 15.9281153609985 </data>
                    <data bit_width="128"> 78.6395040198206 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 1.49743708825993 </data>
                    <data bit_width="8"> 2.97452494073799 </data>
                    <data bit_width="16"> 6.28236986443518 </data>
                    <data bit_width="32"> 13.204494058091 </data>
                    <data bit_width="128"> 62.1504895065783 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,2,1">
                <max>
                  <data bit_width="4"> 1.08211714385674 </data>
                  <data bit_width="8"> 2.15564583309533 </data>
                  <data bit_width="16"> 4.61302597627616 </data>
                  <data bit_width="32"> 9.63228083028693 </data>
                  <data bit_width="128"> 48.4506904083605 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.800388085004094 </data>
                  <data bit_width="8"> 1.61236891029303 </data>
                  <data bit_width="16"> 3.40054524142724 </data>
                  <data bit_width="32"> 7.42333553935569 </data>
                  <data bit_width="128"> 34.8560650144704 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.800388085004094 </data>
                    <data bit_width="8"> 1.61236891029303 </data>
                    <data bit_width="16"> 3.40054524142724 </data>
                    <data bit_width="32"> 7.42333553935569 </data>
                    <data bit_width="128"> 34.8560650144704 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.08211714385674 </data>
                    <data bit_width="8"> 2.15564583309533 </data>
                    <data bit_width="16"> 4.61302597627616 </data>
                    <data bit_width="32"> 9.52723821185811 </data>
                    <data bit_width="128"> 48.4506904083605 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 1.07335925367948 </data>
                    <data bit_width="8"> 2.15502619642619 </data>
                    <data bit_width="16"> 4.47938523614364 </data>
                    <data bit_width="32"> 9.63228083028693 </data>
                    <data bit_width="128"> 44.9930035426306 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,2,2">
                <max>
                  <data bit_width="4"> 1.32844381318901 </data>
                  <data bit_width="8"> 2.6920393487843 </data>
                  <data bit_width="16"> 5.60380293573047 </data>
                  <data bit_width="32"> 12.0365228165876 </data>
                  <data bit_width="128"> 56.7168668246987 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.05388241370119 </data>
                  <data bit_width="8"> 2.06046766555283 </data>
                  <data bit_width="16"> 4.31158358823137 </data>
                  <data bit_width="32"> 9.33979272862284 </data>
                  <data bit_width="128"> 45.574024854344 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.05388241370119 </data>
                    <data bit_width="8"> 2.06046766555283 </data>
                    <data bit_width="16"> 4.31158358823137 </data>
                    <data bit_width="32"> 9.33979272862284 </data>
                    <data bit_width="128"> 45.574024854344 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.32844381318901 </data>
                    <data bit_width="8"> 2.6920393487843 </data>
                    <data bit_width="16"> 5.60380293573047 </data>
                    <data bit_width="32"> 12.0365228165876 </data>
                    <data bit_width="128"> 55.5249589152434 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 1.28829757620761 </data>
                    <data bit_width="8"> 2.52760456460273 </data>
                    <data bit_width="16"> 5.28055054026009 </data>
                    <data bit_width="32"> 11.6335850331296 </data>
                    <data bit_width="128"> 56.7168668246987 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,2,4">
                <max>
                  <data bit_width="4"> 2.24709386150302 </data>
                  <data bit_width="8"> 4.14831788641686 </data>
                  <data bit_width="16"> 8.35401516488642 </data>
                  <data bit_width="32"> 17.3860031880105 </data>
                  <data bit_width="128"> 87.622837769654 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.45368470921155 </data>
                  <data bit_width="8"> 2.77087941799471 </data>
                  <data bit_width="16"> 5.76590466860875 </data>
                  <data bit_width="32"> 12.5647648307344 </data>
                  <data bit_width="128"> 65.4926050413168 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.45368470921155 </data>
                    <data bit_width="8"> 2.77087941799471 </data>
                    <data bit_width="16"> 5.76590466860875 </data>
                    <data bit_width="32"> 12.5647648307344 </data>
                    <data bit_width="128"> 65.4926050413168 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 2.24709386150302 </data>
                    <data bit_width="8"> 4.14831788641686 </data>
                    <data bit_width="16"> 8.35401516488642 </data>
                    <data bit_width="32"> 17.3860031880105 </data>
                    <data bit_width="128"> 87.622837769654 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 1.70502227870756 </data>
                    <data bit_width="8"> 3.39537083238133 </data>
                    <data bit_width="16"> 7.17476588221854 </data>
                    <data bit_width="32"> 15.9765855562537 </data>
                    <data bit_width="128"> 73.6864629148341 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,4,1">
                <max>
                  <data bit_width="4"> 1.48852963457474 </data>
                  <data bit_width="8"> 3.07323104044097 </data>
                  <data bit_width="16"> 6.44865658641305 </data>
                  <data bit_width="32"> 15.3964548851888 </data>
                  <data bit_width="128"> 69.4973647445783 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.13354723205956 </data>
                  <data bit_width="8"> 2.24091260067402 </data>
                  <data bit_width="16"> 4.72310285338246 </data>
                  <data bit_width="32"> 10.3472413118086 </data>
                  <data bit_width="128"> 51.4079636002742 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.13354723205956 </data>
                    <data bit_width="8"> 2.24091260067402 </data>
                    <data bit_width="16"> 4.72310285338246 </data>
                    <data bit_width="32"> 10.3472413118086 </data>
                    <data bit_width="128"> 51.4079636002742 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.45319220716475 </data>
                    <data bit_width="8"> 3.07323104044097 </data>
                    <data bit_width="16"> 6.29868402353344 </data>
                    <data bit_width="32"> 15.3964548851888 </data>
                    <data bit_width="128"> 69.4973647445783 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 1.48852963457474 </data>
                    <data bit_width="8"> 3.04863382956341 </data>
                    <data bit_width="16"> 6.44865658641305 </data>
                    <data bit_width="32"> 14.4213631511681 </data>
                    <data bit_width="128"> 66.7089711734354 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,4,2">
                <max>
                  <data bit_width="4"> 1.70346784095885 </data>
                  <data bit_width="8"> 3.66314597684736 </data>
                  <data bit_width="16"> 7.4730849848156 </data>
                  <data bit_width="32"> 17.8324801031968 </data>
                  <data bit_width="128"> 79.5618954799033 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.33348190676111 </data>
                  <data bit_width="8"> 2.60002351368976 </data>
                  <data bit_width="16"> 5.46022755326441 </data>
                  <data bit_width="32"> 11.9059128581901 </data>
                  <data bit_width="128"> 62.1194267828583 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.33348190676111 </data>
                    <data bit_width="8"> 2.60002351368976 </data>
                    <data bit_width="16"> 5.46022755326441 </data>
                    <data bit_width="32"> 11.9059128581901 </data>
                    <data bit_width="128"> 62.1194267828583 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.6695574839112 </data>
                    <data bit_width="8"> 3.66314597684736 </data>
                    <data bit_width="16"> 7.4730849848156 </data>
                    <data bit_width="32"> 17.8324801031968 </data>
                    <data bit_width="128"> 79.1604861031778 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 1.70346784095885 </data>
                    <data bit_width="8"> 3.4381262376002 </data>
                    <data bit_width="16"> 7.28745146274823 </data>
                    <data bit_width="32"> 16.2890015124902 </data>
                    <data bit_width="128"> 79.5618954799033 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,4,4">
                <max>
                  <data bit_width="4"> 2.44580599688696 </data>
                  <data bit_width="8"> 5.06417922045468 </data>
                  <data bit_width="16"> 10.49837505474 </data>
                  <data bit_width="32"> 23.7791639296662 </data>
                  <data bit_width="128"> 119.655761207422 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.7325993709659 </data>
                  <data bit_width="8"> 3.43378273690524 </data>
                  <data bit_width="16"> 6.92151617781459 </data>
                  <data bit_width="32"> 15.6663487878658 </data>
                  <data bit_width="128"> 89.8658691285391 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.7325993709659 </data>
                    <data bit_width="8"> 3.43378273690524 </data>
                    <data bit_width="16"> 6.92151617781459 </data>
                    <data bit_width="32"> 15.6663487878658 </data>
                    <data bit_width="128"> 89.8658691285391 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 2.44580599688696 </data>
                    <data bit_width="8"> 5.06417922045468 </data>
                    <data bit_width="16"> 10.49837505474 </data>
                    <data bit_width="32"> 23.7791639296662 </data>
                    <data bit_width="128"> 119.655761207422 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.23931725666876 </data>
                    <data bit_width="8"> 4.45170657546505 </data>
                    <data bit_width="16"> 9.41668719416995 </data>
                    <data bit_width="32"> 21.1467979772377 </data>
                    <data bit_width="128"> 95.2176718598275 </data>
                  </priority>
                </typ>
              </parameters>
            </est_index>

            <est_index name="aspect_ratio">
              <!-- Dummy yet -->
            </est_index>

            <est_index name="height">
              <!-- Dummy yet -->
            </est_index>

            <est_index name="width">
              <!-- Dummy yet -->
            </est_index>
          </est_type>

          <est_type name="timing">
            <est_index name="delay">
              <unit> ns </unit>

              <parameters name="4,1,1">
                <max>
                  <data bit_width="4"> 1.52 </data>
                  <data bit_width="8"> 1.52 </data>
                  <data bit_width="16"> 1.53 </data>
                  <data bit_width="32"> 1.98 </data>
                  <data bit_width="128"> 4.31 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.15 </data>
                  <data bit_width="8"> 1.31 </data>
                  <data bit_width="16"> 1.39 </data>
                  <data bit_width="32"> 1.20 </data>
                  <data bit_width="128"> 1.37 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.39 </data>
                    <data bit_width="8"> 1.39 </data>
                    <data bit_width="16"> 1.39 </data>
                    <data bit_width="32"> 1.40 </data>
                    <data bit_width="128"> 4.31 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.15 </data>
                    <data bit_width="8"> 1.31 </data>
                    <data bit_width="16"> 1.39 </data>
                    <data bit_width="32"> 1.20 </data>
                    <data bit_width="128"> 1.37 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 1.52 </data>
                    <data bit_width="8"> 1.52 </data>
                    <data bit_width="16"> 1.53 </data>
                    <data bit_width="32"> 1.98 </data>
                    <data bit_width="128"> 2.80 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,1,2">
                <max>
                  <data bit_width="4"> 1.52 </data>
                  <data bit_width="8"> 1.52 </data>
                  <data bit_width="16"> 1.53 </data>
                  <data bit_width="32"> 2.05 </data>
                  <data bit_width="128"> 4.48 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.14 </data>
                  <data bit_width="8"> 1.14 </data>
                  <data bit_width="16"> 1.28 </data>
                  <data bit_width="32"> 1.31 </data>
                  <data bit_width="128"> 1.37 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.39 </data>
                    <data bit_width="8"> 1.39 </data>
                    <data bit_width="16"> 1.40 </data>
                    <data bit_width="32"> 1.40 </data>
                    <data bit_width="128"> 4.48 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.14 </data>
                    <data bit_width="8"> 1.14 </data>
                    <data bit_width="16"> 1.28 </data>
                    <data bit_width="32"> 1.31 </data>
                    <data bit_width="128"> 1.37 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 1.52 </data>
                    <data bit_width="8"> 1.52 </data>
                    <data bit_width="16"> 1.53 </data>
                    <data bit_width="32"> 2.05 </data>
                    <data bit_width="128"> 3.21 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,1,4">
                <max>
                  <data bit_width="4"> 1.52 </data>
                  <data bit_width="8"> 1.52 </data>
                  <data bit_width="16"> 1.53 </data>
                  <data bit_width="32"> 2.05 </data>
                  <data bit_width="128"> 4.88 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.14 </data>
                  <data bit_width="8"> 1.15 </data>
                  <data bit_width="16"> 1.28 </data>
                  <data bit_width="32"> 1.31 </data>
                  <data bit_width="128"> 1.37 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.39 </data>
                    <data bit_width="8"> 1.39 </data>
                    <data bit_width="16"> 1.40 </data>
                    <data bit_width="32"> 1.41 </data>
                    <data bit_width="128"> 4.88 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.14 </data>
                    <data bit_width="8"> 1.15 </data>
                    <data bit_width="16"> 1.28 </data>
                    <data bit_width="32"> 1.31 </data>
                    <data bit_width="128"> 1.37 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 1.52 </data>
                    <data bit_width="8"> 1.52 </data>
                    <data bit_width="16"> 1.53 </data>
                    <data bit_width="32"> 2.05 </data>
                    <data bit_width="128"> 3.37 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,2,1">
                <max>
                  <data bit_width="4"> 1.56 </data>
                  <data bit_width="8"> 1.56 </data>
                  <data bit_width="16"> 1.58 </data>
                  <data bit_width="32"> 2.05 </data>
                  <data bit_width="128"> 4.65 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.33 </data>
                  <data bit_width="8"> 1.37 </data>
                  <data bit_width="16"> 1.29 </data>
                  <data bit_width="32"> 1.37 </data>
                  <data bit_width="128"> 1.53 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.43 </data>
                    <data bit_width="8"> 1.43 </data>
                    <data bit_width="16"> 1.44 </data>
                    <data bit_width="32"> 1.44 </data>
                    <data bit_width="128"> 4.65 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.33 </data>
                    <data bit_width="8"> 1.37 </data>
                    <data bit_width="16"> 1.29 </data>
                    <data bit_width="32"> 1.37 </data>
                    <data bit_width="128"> 1.53 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 1.56 </data>
                    <data bit_width="8"> 1.56 </data>
                    <data bit_width="16"> 1.58 </data>
                    <data bit_width="32"> 2.05 </data>
                    <data bit_width="128"> 3.29 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,2,2">
                <max>
                  <data bit_width="4"> 1.56 </data>
                  <data bit_width="8"> 1.56 </data>
                  <data bit_width="16"> 1.58 </data>
                  <data bit_width="32"> 2.05 </data>
                  <data bit_width="128"> 4.63 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.41 </data>
                  <data bit_width="8"> 1.41 </data>
                  <data bit_width="16"> 1.39 </data>
                  <data bit_width="32"> 1.37 </data>
                  <data bit_width="128"> 1.47 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.43 </data>
                    <data bit_width="8"> 1.43 </data>
                    <data bit_width="16"> 1.44 </data>
                    <data bit_width="32"> 1.45 </data>
                    <data bit_width="128"> 4.63 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.41 </data>
                    <data bit_width="8"> 1.41 </data>
                    <data bit_width="16"> 1.39 </data>
                    <data bit_width="32"> 1.37 </data>
                    <data bit_width="128"> 1.47 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 1.56 </data>
                    <data bit_width="8"> 1.56 </data>
                    <data bit_width="16"> 1.58 </data>
                    <data bit_width="32"> 2.05 </data>
                    <data bit_width="128"> 3.15 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,2,4">
                <max>
                  <data bit_width="4"> 1.56 </data>
                  <data bit_width="8"> 1.58 </data>
                  <data bit_width="16"> 1.58 </data>
                  <data bit_width="32"> 2.04 </data>
                  <data bit_width="128"> 4.85 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.41 </data>
                  <data bit_width="8"> 1.39 </data>
                  <data bit_width="16"> 1.39 </data>
                  <data bit_width="32"> 1.45 </data>
                  <data bit_width="128"> 1.49 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.43 </data>
                    <data bit_width="8"> 1.43 </data>
                    <data bit_width="16"> 1.44 </data>
                    <data bit_width="32"> 1.45 </data>
                    <data bit_width="128"> 4.85 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.41 </data>
                    <data bit_width="8"> 1.39 </data>
                    <data bit_width="16"> 1.39 </data>
                    <data bit_width="32"> 1.46 </data>
                    <data bit_width="128"> 1.49 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 1.56 </data>
                    <data bit_width="8"> 1.58 </data>
                    <data bit_width="16"> 1.58 </data>
                    <data bit_width="32"> 2.04 </data>
                    <data bit_width="128"> 3.48 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,4,1">
                <max>
                  <data bit_width="4"> 1.66 </data>
                  <data bit_width="8"> 1.66 </data>
                  <data bit_width="16"> 1.68 </data>
                  <data bit_width="32"> 2.04 </data>
                  <data bit_width="128"> 4.88 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.34 </data>
                  <data bit_width="8"> 1.34 </data>
                  <data bit_width="16"> 1.47 </data>
                  <data bit_width="32"> 1.47 </data>
                  <data bit_width="128"> 1.61 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.51 </data>
                    <data bit_width="8"> 1.51 </data>
                    <data bit_width="16"> 1.53 </data>
                    <data bit_width="32"> 1.55 </data>
                    <data bit_width="128"> 4.88 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.34 </data>
                    <data bit_width="8"> 1.34 </data>
                    <data bit_width="16"> 1.47 </data>
                    <data bit_width="32"> 1.47 </data>
                    <data bit_width="128"> 1.61 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 1.66 </data>
                    <data bit_width="8"> 1.66 </data>
                    <data bit_width="16"> 1.68 </data>
                    <data bit_width="32"> 2.04 </data>
                    <data bit_width="128"> 3.33 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,4,2">
                <max>
                  <data bit_width="4"> 1.66 </data>
                  <data bit_width="8"> 1.68 </data>
                  <data bit_width="16"> 1.68 </data>
                  <data bit_width="32"> 2.04 </data>
                  <data bit_width="128"> 4.85 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.41 </data>
                  <data bit_width="8"> 1.46 </data>
                  <data bit_width="16"> 1.46 </data>
                  <data bit_width="32"> 1.47 </data>
                  <data bit_width="128"> 1.61 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.51 </data>
                    <data bit_width="8"> 1.51 </data>
                    <data bit_width="16"> 1.53 </data>
                    <data bit_width="32"> 1.55 </data>
                    <data bit_width="128"> 4.85 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.41 </data>
                    <data bit_width="8"> 1.46 </data>
                    <data bit_width="16"> 1.46 </data>
                    <data bit_width="32"> 1.47 </data>
                    <data bit_width="128"> 1.61 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 1.66 </data>
                    <data bit_width="8"> 1.68 </data>
                    <data bit_width="16"> 1.68 </data>
                    <data bit_width="32"> 2.04 </data>
                    <data bit_width="128"> 3.49 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,4,4">
                <max>
                  <data bit_width="4"> 1.66 </data>
                  <data bit_width="8"> 1.68 </data>
                  <data bit_width="16"> 1.71 </data>
                  <data bit_width="32"> 2.04 </data>
                  <data bit_width="128"> 4.85 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.45 </data>
                  <data bit_width="8"> 1.46 </data>
                  <data bit_width="16"> 1.50 </data>
                  <data bit_width="32"> 1.51 </data>
                  <data bit_width="128"> 1.63 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.51 </data>
                    <data bit_width="8"> 1.51 </data>
                    <data bit_width="16"> 1.53 </data>
                    <data bit_width="32"> 1.55 </data>
                    <data bit_width="128"> 4.85 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.45 </data>
                    <data bit_width="8"> 1.46 </data>
                    <data bit_width="16"> 1.50 </data>
                    <data bit_width="32"> 1.51 </data>
                    <data bit_width="128"> 1.63 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 1.66 </data>
                    <data bit_width="8"> 1.68 </data>
                    <data bit_width="16"> 1.71 </data>
                    <data bit_width="32"> 2.04 </data>
                    <data bit_width="128"> 3.49 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,1,1">
                <max>
                  <data bit_width="4"> 2.10 </data>
                  <data bit_width="8"> 2.25 </data>
                  <data bit_width="16"> 2.56 </data>
                  <data bit_width="32"> 3.03 </data>
                  <data bit_width="128"> 5.15 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.66 </data>
                  <data bit_width="8"> 1.71 </data>
                  <data bit_width="16"> 1.57 </data>
                  <data bit_width="32"> 1.58 </data>
                  <data bit_width="128"> 1.60 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.84 </data>
                    <data bit_width="8"> 1.76 </data>
                    <data bit_width="16"> 1.98 </data>
                    <data bit_width="32"> 2.40 </data>
                    <data bit_width="128"> 5.15 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.66 </data>
                    <data bit_width="8"> 1.71 </data>
                    <data bit_width="16"> 1.57 </data>
                    <data bit_width="32"> 1.58 </data>
                    <data bit_width="128"> 1.60 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.10 </data>
                    <data bit_width="8"> 2.25 </data>
                    <data bit_width="16"> 2.56 </data>
                    <data bit_width="32"> 3.03 </data>
                    <data bit_width="128"> 4.37 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,1,2">
                <max>
                  <data bit_width="4"> 2.10 </data>
                  <data bit_width="8"> 2.25 </data>
                  <data bit_width="16"> 2.64 </data>
                  <data bit_width="32"> 3.11 </data>
                  <data bit_width="128"> 5.72 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.65 </data>
                  <data bit_width="8"> 1.49 </data>
                  <data bit_width="16"> 1.56 </data>
                  <data bit_width="32"> 1.58 </data>
                  <data bit_width="128"> 1.64 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.84 </data>
                    <data bit_width="8"> 1.76 </data>
                    <data bit_width="16"> 1.98 </data>
                    <data bit_width="32"> 2.40 </data>
                    <data bit_width="128"> 5.72 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.65 </data>
                    <data bit_width="8"> 1.49 </data>
                    <data bit_width="16"> 1.56 </data>
                    <data bit_width="32"> 1.58 </data>
                    <data bit_width="128"> 1.64 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.10 </data>
                    <data bit_width="8"> 2.25 </data>
                    <data bit_width="16"> 2.64 </data>
                    <data bit_width="32"> 3.11 </data>
                    <data bit_width="128"> 4.45 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,1,4">
                <max>
                  <data bit_width="4"> 2.12 </data>
                  <data bit_width="8"> 2.25 </data>
                  <data bit_width="16"> 2.64 </data>
                  <data bit_width="32"> 3.11 </data>
                  <data bit_width="128"> 5.92 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.45 </data>
                  <data bit_width="8"> 1.52 </data>
                  <data bit_width="16"> 1.56 </data>
                  <data bit_width="32"> 1.58 </data>
                  <data bit_width="128"> 3.30 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.84 </data>
                    <data bit_width="8"> 1.76 </data>
                    <data bit_width="16"> 2.03 </data>
                    <data bit_width="32"> 2.46 </data>
                    <data bit_width="128"> 5.92 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.45 </data>
                    <data bit_width="8"> 1.52 </data>
                    <data bit_width="16"> 1.56 </data>
                    <data bit_width="32"> 1.58 </data>
                    <data bit_width="128"> 3.30 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.12 </data>
                    <data bit_width="8"> 2.25 </data>
                    <data bit_width="16"> 2.64 </data>
                    <data bit_width="32"> 3.11 </data>
                    <data bit_width="128"> 4.57 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,2,1">
                <max>
                  <data bit_width="4"> 2.26 </data>
                  <data bit_width="8"> 2.28 </data>
                  <data bit_width="16"> 2.58 </data>
                  <data bit_width="32"> 3.05 </data>
                  <data bit_width="128"> 5.93 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.79 </data>
                  <data bit_width="8"> 1.78 </data>
                  <data bit_width="16"> 1.61 </data>
                  <data bit_width="32"> 1.64 </data>
                  <data bit_width="128"> 1.72 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.85 </data>
                    <data bit_width="8"> 1.99 </data>
                    <data bit_width="16"> 2.21 </data>
                    <data bit_width="32"> 2.42 </data>
                    <data bit_width="128"> 5.93 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.79 </data>
                    <data bit_width="8"> 1.78 </data>
                    <data bit_width="16"> 1.61 </data>
                    <data bit_width="32"> 1.64 </data>
                    <data bit_width="128"> 1.72 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.26 </data>
                    <data bit_width="8"> 2.28 </data>
                    <data bit_width="16"> 2.58 </data>
                    <data bit_width="32"> 3.05 </data>
                    <data bit_width="128"> 4.52 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,2,2">
                <max>
                  <data bit_width="4"> 2.26 </data>
                  <data bit_width="8"> 2.28 </data>
                  <data bit_width="16"> 2.58 </data>
                  <data bit_width="32"> 3.05 </data>
                  <data bit_width="128"> 5.90 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.79 </data>
                  <data bit_width="8"> 1.78 </data>
                  <data bit_width="16"> 1.59 </data>
                  <data bit_width="32"> 1.58 </data>
                  <data bit_width="128"> 1.76 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.85 </data>
                    <data bit_width="8"> 1.99 </data>
                    <data bit_width="16"> 2.28 </data>
                    <data bit_width="32"> 2.47 </data>
                    <data bit_width="128"> 5.90 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.79 </data>
                    <data bit_width="8"> 1.78 </data>
                    <data bit_width="16"> 1.59 </data>
                    <data bit_width="32"> 1.58 </data>
                    <data bit_width="128"> 1.76 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.26 </data>
                    <data bit_width="8"> 2.28 </data>
                    <data bit_width="16"> 2.58 </data>
                    <data bit_width="32"> 3.05 </data>
                    <data bit_width="128"> 4.72 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,2,4">
                <max>
                  <data bit_width="4"> 2.28 </data>
                  <data bit_width="8"> 2.28 </data>
                  <data bit_width="16"> 2.58 </data>
                  <data bit_width="32"> 3.10 </data>
                  <data bit_width="128"> 6.11 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.57 </data>
                  <data bit_width="8"> 1.56 </data>
                  <data bit_width="16"> 1.59 </data>
                  <data bit_width="32"> 1.65 </data>
                  <data bit_width="128"> 1.71 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.85 </data>
                    <data bit_width="8"> 1.99 </data>
                    <data bit_width="16"> 2.28 </data>
                    <data bit_width="32"> 2.47 </data>
                    <data bit_width="128"> 6.11 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.57 </data>
                    <data bit_width="8"> 1.56 </data>
                    <data bit_width="16"> 1.59 </data>
                    <data bit_width="32"> 1.65 </data>
                    <data bit_width="128"> 1.71 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.28 </data>
                    <data bit_width="8"> 2.28 </data>
                    <data bit_width="16"> 2.58 </data>
                    <data bit_width="32"> 3.10 </data>
                    <data bit_width="128"> 4.94 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,4,1">
                <max>
                  <data bit_width="4"> 2.40 </data>
                  <data bit_width="8"> 2.40 </data>
                  <data bit_width="16"> 2.58 </data>
                  <data bit_width="32"> 3.05 </data>
                  <data bit_width="128"> 6.11 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.85 </data>
                  <data bit_width="8"> 1.88 </data>
                  <data bit_width="16"> 1.66 </data>
                  <data bit_width="32"> 1.72 </data>
                  <data bit_width="128"> 1.82 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.85 </data>
                    <data bit_width="8"> 2.01 </data>
                    <data bit_width="16"> 2.28 </data>
                    <data bit_width="32"> 2.47 </data>
                    <data bit_width="128"> 6.11 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.86 </data>
                    <data bit_width="8"> 1.88 </data>
                    <data bit_width="16"> 1.66 </data>
                    <data bit_width="32"> 1.72 </data>
                    <data bit_width="128"> 1.82 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.40 </data>
                    <data bit_width="8"> 2.40 </data>
                    <data bit_width="16"> 2.58 </data>
                    <data bit_width="32"> 3.05 </data>
                    <data bit_width="128"> 4.59 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,4,2">
                <max>
                  <data bit_width="4"> 2.40 </data>
                  <data bit_width="8"> 2.40 </data>
                  <data bit_width="16"> 2.58 </data>
                  <data bit_width="32"> 3.10 </data>
                  <data bit_width="128"> 6.11 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.85 </data>
                  <data bit_width="8"> 1.90 </data>
                  <data bit_width="16"> 1.71 </data>
                  <data bit_width="32"> 1.73 </data>
                  <data bit_width="128"> 1.87 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.85 </data>
                    <data bit_width="8"> 2.01 </data>
                    <data bit_width="16"> 2.28 </data>
                    <data bit_width="32"> 2.47 </data>
                    <data bit_width="128"> 6.11 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.92 </data>
                    <data bit_width="8"> 1.90 </data>
                    <data bit_width="16"> 1.71 </data>
                    <data bit_width="32"> 1.73 </data>
                    <data bit_width="128"> 1.87 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.40 </data>
                    <data bit_width="8"> 2.40 </data>
                    <data bit_width="16"> 2.58 </data>
                    <data bit_width="32"> 3.10 </data>
                    <data bit_width="128"> 4.94 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,4,4">
                <max>
                  <data bit_width="4"> 2.40 </data>
                  <data bit_width="8"> 2.43 </data>
                  <data bit_width="16"> 2.58 </data>
                  <data bit_width="32"> 3.10 </data>
                  <data bit_width="128"> 6.96 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.67 </data>
                  <data bit_width="8"> 1.69 </data>
                  <data bit_width="16"> 1.74 </data>
                  <data bit_width="32"> 1.74 </data>
                  <data bit_width="128"> 1.89 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.89 </data>
                    <data bit_width="8"> 2.01 </data>
                    <data bit_width="16"> 2.28 </data>
                    <data bit_width="32"> 2.47 </data>
                    <data bit_width="128"> 6.96 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.67 </data>
                    <data bit_width="8"> 1.69 </data>
                    <data bit_width="16"> 1.74 </data>
                    <data bit_width="32"> 1.74 </data>
                    <data bit_width="128"> 1.89 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.40 </data>
                    <data bit_width="8"> 2.43 </data>
                    <data bit_width="16"> 2.58 </data>
                    <data bit_width="32"> 3.10 </data>
                    <data bit_width="128"> 4.83 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,1,1">
                <max>
                  <data bit_width="4"> 2.25 </data>
                  <data bit_width="8"> 2.31 </data>
                  <data bit_width="16"> 2.67 </data>
                  <data bit_width="32"> 3.08 </data>
                  <data bit_width="128"> 9.43 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.69 </data>
                  <data bit_width="8"> 1.62 </data>
                  <data bit_width="16"> 1.81 </data>
                  <data bit_width="32"> 1.79 </data>
                  <data bit_width="128"> 2.07 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.84 </data>
                    <data bit_width="8"> 2.04 </data>
                    <data bit_width="16"> 2.19 </data>
                    <data bit_width="32"> 2.69 </data>
                    <data bit_width="128"> 9.43 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.69 </data>
                    <data bit_width="8"> 1.62 </data>
                    <data bit_width="16"> 1.81 </data>
                    <data bit_width="32"> 1.79 </data>
                    <data bit_width="128"> 2.07 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.25 </data>
                    <data bit_width="8"> 2.31 </data>
                    <data bit_width="16"> 2.67 </data>
                    <data bit_width="32"> 3.08 </data>
                    <data bit_width="128"> 6.27 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,1,2">
                <max>
                  <data bit_width="4"> 2.25 </data>
                  <data bit_width="8"> 2.36 </data>
                  <data bit_width="16"> 2.72 </data>
                  <data bit_width="32"> 3.16 </data>
                  <data bit_width="128"> 9.43 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.74 </data>
                  <data bit_width="8"> 1.75 </data>
                  <data bit_width="16"> 1.79 </data>
                  <data bit_width="32"> 1.82 </data>
                  <data bit_width="128"> 2.40 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.84 </data>
                    <data bit_width="8"> 2.04 </data>
                    <data bit_width="16"> 2.19 </data>
                    <data bit_width="32"> 2.69 </data>
                    <data bit_width="128"> 9.43 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.74 </data>
                    <data bit_width="8"> 1.75 </data>
                    <data bit_width="16"> 1.79 </data>
                    <data bit_width="32"> 1.82 </data>
                    <data bit_width="128"> 2.40 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.25 </data>
                    <data bit_width="8"> 2.36 </data>
                    <data bit_width="16"> 2.72 </data>
                    <data bit_width="32"> 3.16 </data>
                    <data bit_width="128"> 5.97 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,1,4">
                <max>
                  <data bit_width="4"> 1.84 </data>
                  <data bit_width="8"> 2.36 </data>
                  <data bit_width="16"> 2.70 </data>
                  <data bit_width="32"> 3.16 </data>
                  <data bit_width="128"> 9.83 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.74 </data>
                  <data bit_width="8"> 1.75 </data>
                  <data bit_width="16"> 1.79 </data>
                  <data bit_width="32"> 1.80 </data>
                  <data bit_width="128"> 1.91 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.84 </data>
                    <data bit_width="8"> 2.10 </data>
                    <data bit_width="16"> 2.24 </data>
                    <data bit_width="32"> 2.76 </data>
                    <data bit_width="128"> 9.83 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.74 </data>
                    <data bit_width="8"> 1.75 </data>
                    <data bit_width="16"> 1.79 </data>
                    <data bit_width="32"> 1.80 </data>
                    <data bit_width="128"> 1.91 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 1.79 </data>
                    <data bit_width="8"> 2.36 </data>
                    <data bit_width="16"> 2.70 </data>
                    <data bit_width="32"> 3.16 </data>
                    <data bit_width="128"> 5.25 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,2,1">
                <max>
                  <data bit_width="4"> 2.32 </data>
                  <data bit_width="8"> 2.36 </data>
                  <data bit_width="16"> 2.72 </data>
                  <data bit_width="32"> 3.15 </data>
                  <data bit_width="128"> 6.81 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.72 </data>
                  <data bit_width="8"> 1.78 </data>
                  <data bit_width="16"> 2.03 </data>
                  <data bit_width="32"> 1.85 </data>
                  <data bit_width="128"> 2.10 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.84 </data>
                    <data bit_width="8"> 2.04 </data>
                    <data bit_width="16"> 2.19 </data>
                    <data bit_width="32"> 2.69 </data>
                    <data bit_width="128"> 6.81 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.72 </data>
                    <data bit_width="8"> 1.78 </data>
                    <data bit_width="16"> 2.03 </data>
                    <data bit_width="32"> 1.85 </data>
                    <data bit_width="128"> 2.10 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.32 </data>
                    <data bit_width="8"> 2.36 </data>
                    <data bit_width="16"> 2.72 </data>
                    <data bit_width="32"> 3.15 </data>
                    <data bit_width="128"> 5.81 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,2,2">
                <max>
                  <data bit_width="4"> 2.32 </data>
                  <data bit_width="8"> 2.36 </data>
                  <data bit_width="16"> 2.66 </data>
                  <data bit_width="32"> 3.15 </data>
                  <data bit_width="128"> 9.84 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.78 </data>
                  <data bit_width="8"> 1.77 </data>
                  <data bit_width="16"> 1.80 </data>
                  <data bit_width="32"> 1.92 </data>
                  <data bit_width="128"> 2.40 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.84 </data>
                    <data bit_width="8"> 2.10 </data>
                    <data bit_width="16"> 2.24 </data>
                    <data bit_width="32"> 2.76 </data>
                    <data bit_width="128"> 9.84 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.78 </data>
                    <data bit_width="8"> 1.77 </data>
                    <data bit_width="16"> 1.80 </data>
                    <data bit_width="32"> 1.92 </data>
                    <data bit_width="128"> 2.40 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.32 </data>
                    <data bit_width="8"> 2.36 </data>
                    <data bit_width="16"> 2.66 </data>
                    <data bit_width="32"> 3.15 </data>
                    <data bit_width="128"> 6.50 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,2,4">
                <max>
                  <data bit_width="4"> 1.84 </data>
                  <data bit_width="8"> 2.36 </data>
                  <data bit_width="16"> 2.70 </data>
                  <data bit_width="32"> 3.23 </data>
                  <data bit_width="128"> 7.08 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.79 </data>
                  <data bit_width="8"> 1.78 </data>
                  <data bit_width="16"> 1.81 </data>
                  <data bit_width="32"> 1.82 </data>
                  <data bit_width="128"> 3.14 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.84 </data>
                    <data bit_width="8"> 2.10 </data>
                    <data bit_width="16"> 2.24 </data>
                    <data bit_width="32"> 2.76 </data>
                    <data bit_width="128"> 7.08 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.79 </data>
                    <data bit_width="8"> 1.78 </data>
                    <data bit_width="16"> 1.81 </data>
                    <data bit_width="32"> 1.82 </data>
                    <data bit_width="128"> 3.14 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 1.82 </data>
                    <data bit_width="8"> 2.36 </data>
                    <data bit_width="16"> 2.70 </data>
                    <data bit_width="32"> 3.23 </data>
                    <data bit_width="128"> 5.86 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,4,1">
                <max>
                  <data bit_width="4"> 2.42 </data>
                  <data bit_width="8"> 2.45 </data>
                  <data bit_width="16"> 2.67 </data>
                  <data bit_width="32"> 3.16 </data>
                  <data bit_width="128"> 7.09 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.83 </data>
                  <data bit_width="8"> 2.10 </data>
                  <data bit_width="16"> 1.89 </data>
                  <data bit_width="32"> 1.95 </data>
                  <data bit_width="128"> 2.35 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.84 </data>
                    <data bit_width="8"> 2.10 </data>
                    <data bit_width="16"> 2.24 </data>
                    <data bit_width="32"> 2.76 </data>
                    <data bit_width="128"> 7.09 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.83 </data>
                    <data bit_width="8"> 2.13 </data>
                    <data bit_width="16"> 1.89 </data>
                    <data bit_width="32"> 1.95 </data>
                    <data bit_width="128"> 2.35 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.42 </data>
                    <data bit_width="8"> 2.45 </data>
                    <data bit_width="16"> 2.67 </data>
                    <data bit_width="32"> 3.16 </data>
                    <data bit_width="128"> 5.86 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,4,2">
                <max>
                  <data bit_width="4"> 2.42 </data>
                  <data bit_width="8"> 2.45 </data>
                  <data bit_width="16"> 2.70 </data>
                  <data bit_width="32"> 3.22 </data>
                  <data bit_width="128"> 7.09 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.75 </data>
                  <data bit_width="8"> 1.86 </data>
                  <data bit_width="16"> 1.86 </data>
                  <data bit_width="32"> 1.98 </data>
                  <data bit_width="128"> 2.46 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.84 </data>
                    <data bit_width="8"> 2.10 </data>
                    <data bit_width="16"> 2.24 </data>
                    <data bit_width="32"> 2.76 </data>
                    <data bit_width="128"> 7.09 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.75 </data>
                    <data bit_width="8"> 1.86 </data>
                    <data bit_width="16"> 1.86 </data>
                    <data bit_width="32"> 1.98 </data>
                    <data bit_width="128"> 2.46 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.42 </data>
                    <data bit_width="8"> 2.45 </data>
                    <data bit_width="16"> 2.70 </data>
                    <data bit_width="32"> 3.22 </data>
                    <data bit_width="128"> 5.83 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,4,4">
                <max>
                  <data bit_width="4"> 1.85 </data>
                  <data bit_width="8"> 2.48 </data>
                  <data bit_width="16"> 2.77 </data>
                  <data bit_width="32"> 3.32 </data>
                  <data bit_width="128"> 7.20 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.80 </data>
                  <data bit_width="8"> 1.93 </data>
                  <data bit_width="16"> 1.90 </data>
                  <data bit_width="32"> 2.00 </data>
                  <data bit_width="128"> 3.73 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.84 </data>
                    <data bit_width="8"> 2.10 </data>
                    <data bit_width="16"> 2.24 </data>
                    <data bit_width="32"> 2.82 </data>
                    <data bit_width="128"> 7.20 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.85 </data>
                    <data bit_width="8"> 1.93 </data>
                    <data bit_width="16"> 1.90 </data>
                    <data bit_width="32"> 2.00 </data>
                    <data bit_width="128"> 3.73 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 1.80 </data>
                    <data bit_width="8"> 2.48 </data>
                    <data bit_width="16"> 2.77 </data>
                    <data bit_width="32"> 3.32 </data>
                    <data bit_width="128"> 6.00 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,1,1">
                <max>
                  <data bit_width="4"> 2.90 </data>
                  <data bit_width="8"> 3.10 </data>
                  <data bit_width="16"> 3.45 </data>
                  <data bit_width="32"> 4.07 </data>
                  <data bit_width="128"> 8.13 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.98 </data>
                  <data bit_width="8"> 2.16 </data>
                  <data bit_width="16"> 1.93 </data>
                  <data bit_width="32"> 2.10 </data>
                  <data bit_width="128"> 2.34 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 2.39 </data>
                    <data bit_width="8"> 2.66 </data>
                    <data bit_width="16"> 2.94 </data>
                    <data bit_width="32"> 3.54 </data>
                    <data bit_width="128"> 8.13 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.98 </data>
                    <data bit_width="8"> 2.16 </data>
                    <data bit_width="16"> 1.93 </data>
                    <data bit_width="32"> 2.10 </data>
                    <data bit_width="128"> 2.34 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.90 </data>
                    <data bit_width="8"> 3.10 </data>
                    <data bit_width="16"> 3.45 </data>
                    <data bit_width="32"> 4.07 </data>
                    <data bit_width="128"> 6.98 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,1,2">
                <max>
                  <data bit_width="4"> 2.93 </data>
                  <data bit_width="8"> 3.13 </data>
                  <data bit_width="16"> 3.45 </data>
                  <data bit_width="32"> 4.16 </data>
                  <data bit_width="128"> 8.39 </data>
                </max>
                <min>
                  <data bit_width="4"> 2.04 </data>
                  <data bit_width="8"> 1.85 </data>
                  <data bit_width="16"> 2.03 </data>
                  <data bit_width="32"> 2.11 </data>
                  <data bit_width="128"> 2.89 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 2.44 </data>
                    <data bit_width="8"> 2.66 </data>
                    <data bit_width="16"> 2.94 </data>
                    <data bit_width="32"> 3.54 </data>
                    <data bit_width="128"> 8.39 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 2.04 </data>
                    <data bit_width="8"> 1.85 </data>
                    <data bit_width="16"> 2.03 </data>
                    <data bit_width="32"> 2.11 </data>
                    <data bit_width="128"> 2.89 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.93 </data>
                    <data bit_width="8"> 3.13 </data>
                    <data bit_width="16"> 3.45 </data>
                    <data bit_width="32"> 4.16 </data>
                    <data bit_width="128"> 7.04 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,1,4">
                <max>
                  <data bit_width="4"> 2.92 </data>
                  <data bit_width="8"> 3.03 </data>
                  <data bit_width="16"> 3.52 </data>
                  <data bit_width="32"> 4.35 </data>
                  <data bit_width="128"> 8.44 </data>
                </max>
                <min>
                  <data bit_width="4"> 2.08 </data>
                  <data bit_width="8"> 2.02 </data>
                  <data bit_width="16"> 2.02 </data>
                  <data bit_width="32"> 2.10 </data>
                  <data bit_width="128"> 3.84 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 2.44 </data>
                    <data bit_width="8"> 2.83 </data>
                    <data bit_width="16"> 2.99 </data>
                    <data bit_width="32"> 3.78 </data>
                    <data bit_width="128"> 8.44 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 2.08 </data>
                    <data bit_width="8"> 2.02 </data>
                    <data bit_width="16"> 2.02 </data>
                    <data bit_width="32"> 2.10 </data>
                    <data bit_width="128"> 3.84 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.92 </data>
                    <data bit_width="8"> 3.03 </data>
                    <data bit_width="16"> 3.52 </data>
                    <data bit_width="32"> 4.35 </data>
                    <data bit_width="128"> 5.58 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,2,1">
                <max>
                  <data bit_width="4"> 2.93 </data>
                  <data bit_width="8"> 3.13 </data>
                  <data bit_width="16"> 3.45 </data>
                  <data bit_width="32"> 4.16 </data>
                  <data bit_width="128"> 8.31 </data>
                </max>
                <min>
                  <data bit_width="4"> 2.01 </data>
                  <data bit_width="8"> 2.04 </data>
                  <data bit_width="16"> 1.93 </data>
                  <data bit_width="32"> 2.20 </data>
                  <data bit_width="128"> 2.42 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 2.39 </data>
                    <data bit_width="8"> 2.66 </data>
                    <data bit_width="16"> 2.94 </data>
                    <data bit_width="32"> 3.54 </data>
                    <data bit_width="128"> 8.31 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 2.01 </data>
                    <data bit_width="8"> 2.04 </data>
                    <data bit_width="16"> 1.93 </data>
                    <data bit_width="32"> 2.20 </data>
                    <data bit_width="128"> 2.42 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.93 </data>
                    <data bit_width="8"> 3.13 </data>
                    <data bit_width="16"> 3.45 </data>
                    <data bit_width="32"> 4.16 </data>
                    <data bit_width="128"> 7.11 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,2,2">
                <max>
                  <data bit_width="4"> 2.92 </data>
                  <data bit_width="8"> 3.01 </data>
                  <data bit_width="16"> 3.45 </data>
                  <data bit_width="32"> 4.23 </data>
                  <data bit_width="128"> 8.82 </data>
                </max>
                <min>
                  <data bit_width="4"> 2.08 </data>
                  <data bit_width="8"> 2.04 </data>
                  <data bit_width="16"> 2.03 </data>
                  <data bit_width="32"> 2.09 </data>
                  <data bit_width="128"> 3.62 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 2.44 </data>
                    <data bit_width="8"> 2.83 </data>
                    <data bit_width="16"> 2.99 </data>
                    <data bit_width="32"> 3.62 </data>
                    <data bit_width="128"> 7.64 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 2.08 </data>
                    <data bit_width="8"> 2.04 </data>
                    <data bit_width="16"> 2.03 </data>
                    <data bit_width="32"> 2.09 </data>
                    <data bit_width="128"> 3.62 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.92 </data>
                    <data bit_width="8"> 3.01 </data>
                    <data bit_width="16"> 3.45 </data>
                    <data bit_width="32"> 4.23 </data>
                    <data bit_width="128"> 8.82 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,2,4">
                <max>
                  <data bit_width="4"> 2.93 </data>
                  <data bit_width="8"> 3.03 </data>
                  <data bit_width="16"> 3.52 </data>
                  <data bit_width="32"> 4.50 </data>
                  <data bit_width="128"> 10.84 </data>
                </max>
                <min>
                  <data bit_width="4"> 2.08 </data>
                  <data bit_width="8"> 2.06 </data>
                  <data bit_width="16"> 2.09 </data>
                  <data bit_width="32"> 2.47 </data>
                  <data bit_width="128"> 4.08 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 2.44 </data>
                    <data bit_width="8"> 2.79 </data>
                    <data bit_width="16"> 2.99 </data>
                    <data bit_width="32"> 3.76 </data>
                    <data bit_width="128"> 10.84 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 2.08 </data>
                    <data bit_width="8"> 2.06 </data>
                    <data bit_width="16"> 2.09 </data>
                    <data bit_width="32"> 2.47 </data>
                    <data bit_width="128"> 4.08 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.93 </data>
                    <data bit_width="8"> 3.03 </data>
                    <data bit_width="16"> 3.52 </data>
                    <data bit_width="32"> 4.50 </data>
                    <data bit_width="128"> 7.45 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,4,1">
                <max>
                  <data bit_width="4"> 2.93 </data>
                  <data bit_width="8"> 3.03 </data>
                  <data bit_width="16"> 3.52 </data>
                  <data bit_width="32"> 4.77 </data>
                  <data bit_width="128"> 8.49 </data>
                </max>
                <min>
                  <data bit_width="4"> 2.16 </data>
                  <data bit_width="8"> 2.02 </data>
                  <data bit_width="16"> 2.29 </data>
                  <data bit_width="32"> 2.17 </data>
                  <data bit_width="128"> 2.89 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 2.44 </data>
                    <data bit_width="8"> 2.83 </data>
                    <data bit_width="16"> 2.99 </data>
                    <data bit_width="32"> 3.77 </data>
                    <data bit_width="128"> 7.67 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 2.16 </data>
                    <data bit_width="8"> 2.02 </data>
                    <data bit_width="16"> 2.29 </data>
                    <data bit_width="32"> 2.17 </data>
                    <data bit_width="128"> 2.89 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.93 </data>
                    <data bit_width="8"> 3.03 </data>
                    <data bit_width="16"> 3.52 </data>
                    <data bit_width="32"> 4.77 </data>
                    <data bit_width="128"> 8.49 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,4,2">
                <max>
                  <data bit_width="4"> 2.93 </data>
                  <data bit_width="8"> 3.03 </data>
                  <data bit_width="16"> 3.52 </data>
                  <data bit_width="32"> 4.50 </data>
                  <data bit_width="128"> 9.78 </data>
                </max>
                <min>
                  <data bit_width="4"> 2.16 </data>
                  <data bit_width="8"> 2.08 </data>
                  <data bit_width="16"> 2.18 </data>
                  <data bit_width="32"> 2.11 </data>
                  <data bit_width="128"> 3.41 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 2.44 </data>
                    <data bit_width="8"> 2.83 </data>
                    <data bit_width="16"> 2.99 </data>
                    <data bit_width="32"> 3.77 </data>
                    <data bit_width="128"> 9.78 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 2.16 </data>
                    <data bit_width="8"> 2.08 </data>
                    <data bit_width="16"> 2.18 </data>
                    <data bit_width="32"> 2.11 </data>
                    <data bit_width="128"> 3.41 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.93 </data>
                    <data bit_width="8"> 3.03 </data>
                    <data bit_width="16"> 3.52 </data>
                    <data bit_width="32"> 4.50 </data>
                    <data bit_width="128"> 8.58 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,4,4">
                <max>
                  <data bit_width="4"> 2.96 </data>
                  <data bit_width="8"> 3.08 </data>
                  <data bit_width="16"> 3.58 </data>
                  <data bit_width="32"> 4.56 </data>
                  <data bit_width="128"> 10.94 </data>
                </max>
                <min>
                  <data bit_width="4"> 2.30 </data>
                  <data bit_width="8"> 2.11 </data>
                  <data bit_width="16"> 2.25 </data>
                  <data bit_width="32"> 2.27 </data>
                  <data bit_width="128"> 3.79 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 2.44 </data>
                    <data bit_width="8"> 2.86 </data>
                    <data bit_width="16"> 2.99 </data>
                    <data bit_width="32"> 4.31 </data>
                    <data bit_width="128"> 10.94 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 2.30 </data>
                    <data bit_width="8"> 2.11 </data>
                    <data bit_width="16"> 2.25 </data>
                    <data bit_width="32"> 2.27 </data>
                    <data bit_width="128"> 3.79 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.96 </data>
                    <data bit_width="8"> 3.08 </data>
                    <data bit_width="16"> 3.58 </data>
                    <data bit_width="32"> 4.56 </data>
                    <data bit_width="128"> 8.57 </data>
                  </priority>
                </typ>
              </parameters>
            </est_index>

            <est_index name="delay_fullpath">
              <unit> ns </unit>

              <parameters name="4,1,1">
                <max>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 1.18
                    inport	 w_sel0	 0.74
                    inport	 data_in0	 0.28
                    outport	 REG3	 1.22
                    internal	 1.22
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 0.59
                    inport	 w_sel0	 0.95
                    inport	 data_in0	 0.28
                    outport	 REG3	 0.96
                    internal	 0.96
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 1.22
                    inport	 w_sel0	 0.81
                    inport	 data_in0	 0.29
                    outport	 REG3	 1.21
                    internal	 1.21
                  </data>
                </max>
                <min>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 1.18
                    inport	 w_sel0	 0.74
                    inport	 data_in0	 0.28
                    outport	 REG3	 1.22
                    internal	 1.22
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 0.59
                    inport	 w_sel0	 0.95
                    inport	 data_in0	 0.28
                    outport	 REG3	 0.96
                    internal	 0.96
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 1.22
                    inport	 w_sel0	 0.81
                    inport	 data_in0	 0.29
                    outport	 REG3	 1.21
                    internal	 1.21
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 0.61
                      inport	 w_sel0	 0.78
                      inport	 data_in0	 0.24
                      outport	 REG2	 0.72
                      internal	 0.72
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 0.64
                      inport	 w_sel0	 0.86
                      inport	 data_in0	 0.24
                      outport	 REG2	 0.72
                      internal	 0.72
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 0.69
                      inport	 w_sel0	 0.80
                      inport	 data_in0	 0.24
                      outport	 REG2	 0.72
                      internal	 0.72
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 0.59
                      inport	 w_sel0	 0.67
                      inport	 data_in0	 0.46
                      outport	 REG2	 0.83
                      internal	 0.67
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 0.59
                      inport	 w_sel0	 0.67
                      inport	 data_in0	 0.46
                      outport	 REG1	 0.83
                      internal	 0.67
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 0.60
                      inport	 w_sel0	 0.68
                      inport	 data_in0	 0.45
                      outport	 REG2	 0.84
                      internal	 0.68
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 1.18
                      inport	 w_sel0	 0.74
                      inport	 data_in0	 0.28
                      outport	 REG3	 1.22
                      internal	 1.22
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 0.59
                      inport	 w_sel0	 0.95
                      inport	 data_in0	 0.28
                      outport	 REG3	 0.96
                      internal	 0.96
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 1.22
                      inport	 w_sel0	 0.81
                      inport	 data_in0	 0.29
                      outport	 REG3	 1.21
                      internal	 1.21
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,1,2">
                <max>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 1.03
                    inport	 w_sel0	 1.41
                    inport	 w_sel1	 1.55
                    inport	 data_in0	 0.49
                    inport	 data_in1	 0.42
                    outport	 REG3	 1.21
                    internal	 1.21
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 1.03
                    inport	 w_sel0	 1.63
                    inport	 w_sel1	 1.82
                    inport	 data_in0	 0.42
                    inport	 data_in1	 0.49
                    outport	 REG3	 1.21
                    internal	 1.21
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 0.91
                    inport	 w_sel0	 1.67
                    inport	 w_sel1	 1.96
                    inport	 data_in0	 0.49
                    inport	 data_in1	 0.50
                    outport	 REG3	 1.09
                    internal	 1.09
                  </data>
                </max>
                <min>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 1.03
                    inport	 w_sel0	 1.41
                    inport	 w_sel1	 1.55
                    inport	 data_in0	 0.49
                    inport	 data_in1	 0.42
                    outport	 REG3	 1.21
                    internal	 1.21
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 1.03
                    inport	 w_sel0	 1.63
                    inport	 w_sel1	 1.82
                    inport	 data_in0	 0.42
                    inport	 data_in1	 0.49
                    outport	 REG3	 1.21
                    internal	 1.21
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 0.91
                    inport	 w_sel0	 1.67
                    inport	 w_sel1	 1.96
                    inport	 data_in0	 0.49
                    inport	 data_in1	 0.50
                    outport	 REG3	 1.09
                    internal	 1.09
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 0.61
                      inport	 w_sel0	 1.11
                      inport	 w_sel1	 1.28
                      inport	 data_in0	 0.27
                      inport	 data_in1	 0.42
                      outport	 REG2	 0.72
                      internal	 0.84
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 0.64
                      inport	 w_sel0	 1.13
                      inport	 w_sel1	 1.33
                      inport	 data_in0	 0.27
                      inport	 data_in1	 0.42
                      outport	 REG2	 0.72
                      internal	 0.84
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 0.69
                      inport	 w_sel0	 1.30
                      inport	 w_sel1	 1.48
                      inport	 data_in0	 0.27
                      inport	 data_in1	 0.42
                      outport	 REG2	 0.72
                      internal	 0.84
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 0.67
                      inport	 w_sel0	 0.76
                      inport	 w_sel1	 0.75
                      inport	 data_in0	 0.50
                      inport	 data_in1	 0.50
                      outport	 REG3	 0.85
                      internal	 0.76
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 0.71
                      inport	 w_sel0	 0.80
                      inport	 w_sel1	 0.80
                      inport	 data_in0	 0.53
                      inport	 data_in1	 0.57
                      outport	 REG0	 0.86
                      internal	 0.80
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 0.77
                      inport	 w_sel0	 0.79
                      inport	 w_sel1	 0.79
                      inport	 data_in0	 0.54
                      inport	 data_in1	 0.65
                      outport	 REG0	 0.93
                      internal	 0.79
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 1.03
                      inport	 w_sel0	 1.41
                      inport	 w_sel1	 1.55
                      inport	 data_in0	 0.49
                      inport	 data_in1	 0.42
                      outport	 REG3	 1.21
                      internal	 1.21
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 1.03
                      inport	 w_sel0	 1.63
                      inport	 w_sel1	 1.82
                      inport	 data_in0	 0.42
                      inport	 data_in1	 0.49
                      outport	 REG3	 1.21
                      internal	 1.21
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 0.91
                      inport	 w_sel0	 1.67
                      inport	 w_sel1	 1.96
                      inport	 data_in0	 0.49
                      inport	 data_in1	 0.50
                      outport	 REG3	 1.09
                      internal	 1.09
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,1,4">
                <max>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 0.62
                    inport	 w_sel0	 1.06
                    inport	 w_sel1	 1.80
                    inport	 w_sel2	 1.80
                    inport	 w_sel3	 1.81
                    inport	 data_in0	 1.17
                    inport	 data_in1	 0.86
                    inport	 data_in2	 1.00
                    inport	 data_in3	 0.92
                    outport	 REG3	 0.94
                    internal	 0.94
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 0.64
                    inport	 w_sel0	 1.60
                    inport	 w_sel1	 2.02
                    inport	 w_sel2	 1.92
                    inport	 w_sel3	 1.90
                    inport	 data_in0	 1.04
                    inport	 data_in1	 1.04
                    inport	 data_in2	 0.62
                    inport	 data_in3	 1.11
                    outport	 REG1	 0.83
                    internal	 1.02
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 1.05
                    inport	 w_sel0	 2.25
                    inport	 w_sel1	 2.64
                    inport	 w_sel2	 2.49
                    inport	 w_sel3	 2.47
                    inport	 data_in0	 0.53
                    inport	 data_in1	 0.73
                    inport	 data_in2	 0.64
                    inport	 data_in3	 0.97
                    outport	 REG1	 1.15
                    internal	 1.45
                  </data>
                </max>
                <min>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 0.62
                    inport	 w_sel0	 1.06
                    inport	 w_sel1	 1.80
                    inport	 w_sel2	 1.80
                    inport	 w_sel3	 1.81
                    inport	 data_in0	 1.17
                    inport	 data_in1	 0.86
                    inport	 data_in2	 1.00
                    inport	 data_in3	 0.92
                    outport	 REG3	 0.94
                    internal	 0.94
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 0.64
                    inport	 w_sel0	 1.60
                    inport	 w_sel1	 2.02
                    inport	 w_sel2	 1.92
                    inport	 w_sel3	 1.90
                    inport	 data_in0	 1.04
                    inport	 data_in1	 1.04
                    inport	 data_in2	 0.62
                    inport	 data_in3	 1.11
                    outport	 REG1	 0.83
                    internal	 1.02
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 1.05
                    inport	 w_sel0	 2.25
                    inport	 w_sel1	 2.64
                    inport	 w_sel2	 2.49
                    inport	 w_sel3	 2.47
                    inport	 data_in0	 0.53
                    inport	 data_in1	 0.73
                    inport	 data_in2	 0.64
                    inport	 data_in3	 0.97
                    outport	 REG1	 1.15
                    internal	 1.45
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 0.61
                      inport	 w_sel0	 0.79
                      inport	 w_sel1	 1.32
                      inport	 w_sel2	 1.34
                      inport	 w_sel3	 1.32
                      inport	 data_in0	 0.76
                      inport	 data_in1	 0.72
                      inport	 data_in2	 0.70
                      inport	 data_in3	 0.74
                      outport	 REG2	 0.72
                      internal	 0.72
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 0.64
                      inport	 w_sel0	 1.11
                      inport	 w_sel1	 1.41
                      inport	 w_sel2	 1.53
                      inport	 w_sel3	 1.47
                      inport	 data_in0	 0.83
                      inport	 data_in1	 0.77
                      inport	 data_in2	 0.37
                      inport	 data_in3	 0.80
                      outport	 REG2	 0.72
                      internal	 0.83
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 0.70
                      inport	 w_sel0	 1.52
                      inport	 w_sel1	 1.91
                      inport	 w_sel2	 1.80
                      inport	 w_sel3	 1.82
                      inport	 data_in0	 0.33
                      inport	 data_in1	 0.31
                      inport	 data_in2	 0.39
                      inport	 data_in3	 0.45
                      outport	 REG2	 0.73
                      internal	 0.78
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 0.66
                      inport	 w_sel0	 0.90
                      inport	 w_sel1	 0.90
                      inport	 w_sel2	 0.91
                      inport	 w_sel3	 0.91
                      inport	 data_in0	 0.73
                      inport	 data_in1	 0.73
                      inport	 data_in2	 0.76
                      inport	 data_in3	 0.79
                      outport	 REG0	 0.82
                      internal	 0.91
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 0.72
                      inport	 w_sel0	 0.83
                      inport	 w_sel1	 0.88
                      inport	 w_sel2	 0.88
                      inport	 w_sel3	 0.88
                      inport	 data_in0	 0.66
                      inport	 data_in1	 0.74
                      inport	 data_in2	 0.67
                      inport	 data_in3	 0.59
                      outport	 REG3	 0.89
                      internal	 0.80
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 0.79
                      inport	 w_sel0	 1.07
                      inport	 w_sel1	 1.07
                      inport	 w_sel2	 1.09
                      inport	 w_sel3	 1.11
                      inport	 data_in0	 0.48
                      inport	 data_in1	 0.51
                      inport	 data_in2	 0.48
                      inport	 data_in3	 0.54
                      outport	 REG3	 0.88
                      internal	 0.94
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 0.62
                      inport	 w_sel0	 1.06
                      inport	 w_sel1	 1.80
                      inport	 w_sel2	 1.80
                      inport	 w_sel3	 1.81
                      inport	 data_in0	 1.17
                      inport	 data_in1	 0.86
                      inport	 data_in2	 1.00
                      inport	 data_in3	 0.92
                      outport	 REG3	 0.94
                      internal	 0.94
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 0.64
                      inport	 w_sel0	 1.60
                      inport	 w_sel1	 2.02
                      inport	 w_sel2	 1.92
                      inport	 w_sel3	 1.90
                      inport	 data_in0	 1.04
                      inport	 data_in1	 1.04
                      inport	 data_in2	 0.62
                      inport	 data_in3	 1.11
                      outport	 REG1	 0.83
                      internal	 1.02
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 1.05
                      inport	 w_sel0	 2.25
                      inport	 w_sel1	 2.64
                      inport	 w_sel2	 2.49
                      inport	 w_sel3	 2.47
                      inport	 data_in0	 0.53
                      inport	 data_in1	 0.73
                      inport	 data_in2	 0.64
                      inport	 data_in3	 0.97
                      outport	 REG1	 1.15
                      internal	 1.45
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,2,1">
                <max>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 1.03
                    path	 r_sel1	 data_out1	 1.03
                    inport	 w_sel0	 0.74
                    inport	 data_in0	 0.28
                    outport	 REG0	 1.24
                    outport	 REG1	 1.24
                    internal	 1.24
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 0.59
                    path	 r_sel1	 data_out1	 1.04
                    inport	 w_sel0	 0.95
                    inport	 data_in0	 0.28
                    outport	 REG3	 0.96
                    outport	 REG1	 1.20
                    internal	 1.20
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 0.78
                    path	 r_sel1	 data_out1	 0.78
                    inport	 w_sel0	 0.81
                    inport	 data_in0	 0.29
                    outport	 REG0	 1.15
                    outport	 REG0	 1.15
                    internal	 1.15
                  </data>
                </max>
                <min>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 1.03
                    path	 r_sel1	 data_out1	 1.03
                    inport	 w_sel0	 0.74
                    inport	 data_in0	 0.28
                    outport	 REG0	 1.24
                    outport	 REG1	 1.24
                    internal	 1.24
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 0.59
                    path	 r_sel1	 data_out1	 1.04
                    inport	 w_sel0	 0.95
                    inport	 data_in0	 0.28
                    outport	 REG3	 0.96
                    outport	 REG1	 1.20
                    internal	 1.20
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 0.78
                    path	 r_sel1	 data_out1	 0.78
                    inport	 w_sel0	 0.81
                    inport	 data_in0	 0.29
                    outport	 REG0	 1.15
                    outport	 REG0	 1.15
                    internal	 1.15
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 0.61
                      path	 r_sel1	 data_out1	 0.61
                      inport	 w_sel0	 0.78
                      inport	 data_in0	 0.24
                      outport	 REG0	 0.74
                      outport	 REG0	 0.74
                      internal	 0.74
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 0.64
                      path	 r_sel1	 data_out1	 0.64
                      inport	 w_sel0	 0.86
                      inport	 data_in0	 0.24
                      outport	 REG0	 0.74
                      outport	 REG0	 0.74
                      internal	 0.74
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 0.69
                      path	 r_sel1	 data_out1	 0.69
                      inport	 w_sel0	 0.80
                      inport	 data_in0	 0.24
                      outport	 REG0	 0.74
                      outport	 REG0	 0.74
                      internal	 0.74
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 0.58
                      path	 r_sel1	 data_out1	 0.47
                      inport	 w_sel0	 0.67
                      inport	 data_in0	 0.46
                      outport	 REG2	 0.83
                      outport	 REG1	 0.80
                      internal	 0.68
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 0.59
                      path	 r_sel1	 data_out1	 0.59
                      inport	 w_sel0	 0.67
                      inport	 data_in0	 0.46
                      outport	 REG3	 0.84
                      outport	 REG3	 0.84
                      internal	 0.68
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 0.65
                      path	 r_sel1	 data_out1	 0.51
                      inport	 w_sel0	 0.69
                      inport	 data_in0	 0.45
                      outport	 REG1	 0.85
                      outport	 REG1	 0.85
                      internal	 0.85
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 1.03
                      path	 r_sel1	 data_out1	 1.03
                      inport	 w_sel0	 0.74
                      inport	 data_in0	 0.28
                      outport	 REG0	 1.24
                      outport	 REG1	 1.24
                      internal	 1.24
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 0.59
                      path	 r_sel1	 data_out1	 1.04
                      inport	 w_sel0	 0.95
                      inport	 data_in0	 0.28
                      outport	 REG3	 0.96
                      outport	 REG1	 1.20
                      internal	 1.20
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 0.78
                      path	 r_sel1	 data_out1	 0.78
                      inport	 w_sel0	 0.81
                      inport	 data_in0	 0.29
                      outport	 REG0	 1.15
                      outport	 REG0	 1.15
                      internal	 1.15
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,2,2">
                <max>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 1.03
                    path	 r_sel1	 data_out1	 1.03
                    inport	 w_sel0	 1.41
                    inport	 w_sel1	 1.55
                    inport	 data_in0	 0.49
                    inport	 data_in1	 0.42
                    outport	 REG0	 1.24
                    outport	 REG3	 1.24
                    internal	 1.24
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 1.03
                    path	 r_sel1	 data_out1	 1.03
                    inport	 w_sel0	 1.63
                    inport	 w_sel1	 1.82
                    inport	 data_in0	 0.42
                    inport	 data_in1	 0.49
                    outport	 REG2	 1.24
                    outport	 REG1	 1.24
                    internal	 1.24
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 0.91
                    path	 r_sel1	 data_out1	 0.59
                    inport	 w_sel0	 1.67
                    inport	 w_sel1	 1.96
                    inport	 data_in0	 0.49
                    inport	 data_in1	 0.50
                    outport	 REG3	 1.29
                    outport	 REG3	 0.99
                    internal	 1.29
                  </data>
                </max>
                <min>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 1.03
                    path	 r_sel1	 data_out1	 1.03
                    inport	 w_sel0	 1.41
                    inport	 w_sel1	 1.55
                    inport	 data_in0	 0.49
                    inport	 data_in1	 0.42
                    outport	 REG0	 1.24
                    outport	 REG3	 1.24
                    internal	 1.24
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 1.03
                    path	 r_sel1	 data_out1	 1.03
                    inport	 w_sel0	 1.63
                    inport	 w_sel1	 1.82
                    inport	 data_in0	 0.42
                    inport	 data_in1	 0.49
                    outport	 REG2	 1.24
                    outport	 REG1	 1.24
                    internal	 1.24
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 0.91
                    path	 r_sel1	 data_out1	 0.59
                    inport	 w_sel0	 1.67
                    inport	 w_sel1	 1.96
                    inport	 data_in0	 0.49
                    inport	 data_in1	 0.50
                    outport	 REG3	 1.29
                    outport	 REG3	 0.99
                    internal	 1.29
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 0.61
                      path	 r_sel1	 data_out1	 0.61
                      inport	 w_sel0	 1.11
                      inport	 w_sel1	 1.28
                      inport	 data_in0	 0.27
                      inport	 data_in1	 0.42
                      outport	 REG0	 0.74
                      outport	 REG0	 0.74
                      internal	 0.85
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 0.64
                      path	 r_sel1	 data_out1	 0.64
                      inport	 w_sel0	 1.13
                      inport	 w_sel1	 1.33
                      inport	 data_in0	 0.27
                      inport	 data_in1	 0.42
                      outport	 REG0	 0.74
                      outport	 REG0	 0.74
                      internal	 0.85
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 0.69
                      path	 r_sel1	 data_out1	 0.69
                      inport	 w_sel0	 1.30
                      inport	 w_sel1	 1.48
                      inport	 data_in0	 0.27
                      inport	 data_in1	 0.42
                      outport	 REG0	 0.74
                      outport	 REG0	 0.74
                      internal	 0.85
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 0.57
                      path	 r_sel1	 data_out1	 0.66
                      inport	 w_sel0	 0.78
                      inport	 w_sel1	 0.78
                      inport	 data_in0	 0.51
                      inport	 data_in1	 0.51
                      outport	 REG0	 0.89
                      outport	 REG0	 0.88
                      internal	 0.79
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 0.72
                      path	 r_sel1	 data_out1	 0.72
                      inport	 w_sel0	 0.79
                      inport	 w_sel1	 0.79
                      inport	 data_in0	 0.54
                      inport	 data_in1	 0.58
                      outport	 REG0	 0.88
                      outport	 REG0	 0.88
                      internal	 0.78
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 0.78
                      path	 r_sel1	 data_out1	 0.78
                      inport	 w_sel0	 0.90
                      inport	 w_sel1	 0.90
                      inport	 data_in0	 0.58
                      inport	 data_in1	 0.64
                      outport	 REG0	 0.91
                      outport	 REG0	 0.91
                      internal	 0.90
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 1.03
                      path	 r_sel1	 data_out1	 1.03
                      inport	 w_sel0	 1.41
                      inport	 w_sel1	 1.55
                      inport	 data_in0	 0.49
                      inport	 data_in1	 0.42
                      outport	 REG0	 1.24
                      outport	 REG3	 1.24
                      internal	 1.24
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 1.03
                      path	 r_sel1	 data_out1	 1.03
                      inport	 w_sel0	 1.63
                      inport	 w_sel1	 1.82
                      inport	 data_in0	 0.42
                      inport	 data_in1	 0.49
                      outport	 REG2	 1.24
                      outport	 REG1	 1.24
                      internal	 1.24
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 0.91
                      path	 r_sel1	 data_out1	 0.59
                      inport	 w_sel0	 1.67
                      inport	 w_sel1	 1.96
                      inport	 data_in0	 0.49
                      inport	 data_in1	 0.50
                      outport	 REG3	 1.29
                      outport	 REG3	 0.99
                      internal	 1.29
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,2,4">
                <max>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 0.62
                    path	 r_sel1	 data_out1	 0.75
                    inport	 w_sel0	 1.06
                    inport	 w_sel1	 1.80
                    inport	 w_sel2	 1.80
                    inport	 w_sel3	 1.81
                    inport	 data_in0	 1.17
                    inport	 data_in1	 0.86
                    inport	 data_in2	 1.00
                    inport	 data_in3	 0.92
                    outport	 REG1	 0.96
                    outport	 REG1	 0.96
                    internal	 0.96
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 0.64
                    path	 r_sel1	 data_out1	 0.62
                    inport	 w_sel0	 1.61
                    inport	 w_sel1	 2.03
                    inport	 w_sel2	 1.94
                    inport	 w_sel3	 1.93
                    inport	 data_in0	 1.05
                    inport	 data_in1	 1.10
                    inport	 data_in2	 0.63
                    inport	 data_in3	 1.13
                    outport	 REG1	 0.88
                    outport	 REG1	 0.88
                    internal	 1.04
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 0.98
                    path	 r_sel1	 data_out1	 0.98
                    inport	 w_sel0	 2.13
                    inport	 w_sel1	 2.69
                    inport	 w_sel2	 2.38
                    inport	 w_sel3	 2.36
                    inport	 data_in0	 0.53
                    inport	 data_in1	 0.73
                    inport	 data_in2	 0.64
                    inport	 data_in3	 0.97
                    outport	 REG3	 1.18
                    outport	 REG3	 1.18
                    internal	 1.49
                  </data>
                </max>
                <min>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 0.62
                    path	 r_sel1	 data_out1	 0.75
                    inport	 w_sel0	 1.06
                    inport	 w_sel1	 1.80
                    inport	 w_sel2	 1.80
                    inport	 w_sel3	 1.81
                    inport	 data_in0	 1.17
                    inport	 data_in1	 0.86
                    inport	 data_in2	 1.00
                    inport	 data_in3	 0.92
                    outport	 REG1	 0.96
                    outport	 REG1	 0.96
                    internal	 0.96
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 0.64
                    path	 r_sel1	 data_out1	 0.62
                    inport	 w_sel0	 1.61
                    inport	 w_sel1	 2.03
                    inport	 w_sel2	 1.94
                    inport	 w_sel3	 1.93
                    inport	 data_in0	 1.05
                    inport	 data_in1	 1.10
                    inport	 data_in2	 0.63
                    inport	 data_in3	 1.13
                    outport	 REG1	 0.88
                    outport	 REG1	 0.88
                    internal	 1.04
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 0.98
                    path	 r_sel1	 data_out1	 0.98
                    inport	 w_sel0	 2.13
                    inport	 w_sel1	 2.69
                    inport	 w_sel2	 2.38
                    inport	 w_sel3	 2.36
                    inport	 data_in0	 0.53
                    inport	 data_in1	 0.73
                    inport	 data_in2	 0.64
                    inport	 data_in3	 0.97
                    outport	 REG3	 1.18
                    outport	 REG3	 1.18
                    internal	 1.49
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 0.61
                      path	 r_sel1	 data_out1	 0.61
                      inport	 w_sel0	 0.79
                      inport	 w_sel1	 1.32
                      inport	 w_sel2	 1.34
                      inport	 w_sel3	 1.32
                      inport	 data_in0	 0.76
                      inport	 data_in1	 0.72
                      inport	 data_in2	 0.70
                      inport	 data_in3	 0.74
                      outport	 REG0	 0.74
                      outport	 REG0	 0.74
                      internal	 0.74
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 0.64
                      path	 r_sel1	 data_out1	 0.64
                      inport	 w_sel0	 1.11
                      inport	 w_sel1	 1.41
                      inport	 w_sel2	 1.53
                      inport	 w_sel3	 1.47
                      inport	 data_in0	 0.83
                      inport	 data_in1	 0.77
                      inport	 data_in2	 0.37
                      inport	 data_in3	 0.80
                      outport	 REG0	 0.74
                      outport	 REG0	 0.74
                      internal	 0.86
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 0.70
                      path	 r_sel1	 data_out1	 0.70
                      inport	 w_sel0	 1.52
                      inport	 w_sel1	 1.91
                      inport	 w_sel2	 1.80
                      inport	 w_sel3	 1.82
                      inport	 data_in0	 0.33
                      inport	 data_in1	 0.31
                      inport	 data_in2	 0.39
                      inport	 data_in3	 0.45
                      outport	 REG0	 0.75
                      outport	 REG0	 0.75
                      internal	 0.81
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 0.66
                      path	 r_sel1	 data_out1	 0.66
                      inport	 w_sel0	 0.86
                      inport	 w_sel1	 0.90
                      inport	 w_sel2	 0.90
                      inport	 w_sel3	 0.92
                      inport	 data_in0	 0.81
                      inport	 data_in1	 0.73
                      inport	 data_in2	 0.70
                      inport	 data_in3	 0.90
                      outport	 REG3	 0.95
                      outport	 REG3	 0.95
                      internal	 0.92
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 0.70
                      path	 r_sel1	 data_out1	 0.75
                      inport	 w_sel0	 0.83
                      inport	 w_sel1	 0.88
                      inport	 w_sel2	 0.88
                      inport	 w_sel3	 0.88
                      inport	 data_in0	 0.66
                      inport	 data_in1	 0.74
                      inport	 data_in2	 0.67
                      inport	 data_in3	 0.59
                      outport	 REG3	 0.90
                      outport	 REG3	 0.92
                      internal	 0.84
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 0.79
                      path	 r_sel1	 data_out1	 0.79
                      inport	 w_sel0	 1.07
                      inport	 w_sel1	 1.07
                      inport	 w_sel2	 1.09
                      inport	 w_sel3	 1.11
                      inport	 data_in0	 0.48
                      inport	 data_in1	 0.51
                      inport	 data_in2	 0.48
                      inport	 data_in3	 0.54
                      outport	 REG3	 0.91
                      outport	 REG3	 0.89
                      internal	 0.97
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 0.62
                      path	 r_sel1	 data_out1	 0.75
                      inport	 w_sel0	 1.06
                      inport	 w_sel1	 1.80
                      inport	 w_sel2	 1.80
                      inport	 w_sel3	 1.81
                      inport	 data_in0	 1.17
                      inport	 data_in1	 0.86
                      inport	 data_in2	 1.00
                      inport	 data_in3	 0.92
                      outport	 REG1	 0.96
                      outport	 REG1	 0.96
                      internal	 0.96
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 0.64
                      path	 r_sel1	 data_out1	 0.62
                      inport	 w_sel0	 1.61
                      inport	 w_sel1	 2.03
                      inport	 w_sel2	 1.94
                      inport	 w_sel3	 1.93
                      inport	 data_in0	 1.05
                      inport	 data_in1	 1.10
                      inport	 data_in2	 0.63
                      inport	 data_in3	 1.13
                      outport	 REG1	 0.88
                      outport	 REG1	 0.88
                      internal	 1.04
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 0.98
                      path	 r_sel1	 data_out1	 0.98
                      inport	 w_sel0	 2.13
                      inport	 w_sel1	 2.69
                      inport	 w_sel2	 2.38
                      inport	 w_sel3	 2.36
                      inport	 data_in0	 0.53
                      inport	 data_in1	 0.73
                      inport	 data_in2	 0.64
                      inport	 data_in3	 0.97
                      outport	 REG3	 1.18
                      outport	 REG3	 1.18
                      internal	 1.49
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,4,1">
                <max>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 1.18
                    path	 r_sel1	 data_out1	 1.03
                    path	 r_sel2	 data_out2	 1.14
                    path	 r_sel3	 data_out3	 1.14
                    inport	 w_sel0	 0.74
                    inport	 data_in0	 0.28
                    outport	 REG2	 1.33
                    outport	 REG2	 1.33
                    outport	 REG2	 1.33
                    outport	 REG1	 1.34
                    internal	 1.34
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 0.59
                    path	 r_sel1	 data_out1	 0.59
                    path	 r_sel2	 data_out2	 0.59
                    path	 r_sel3	 data_out3	 0.63
                    inport	 w_sel0	 0.96
                    inport	 data_in0	 0.28
                    outport	 REG0	 0.99
                    outport	 REG2	 0.99
                    outport	 REG1	 0.99
                    outport	 REG2	 0.99
                    internal	 0.99
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 0.78
                    path	 r_sel1	 data_out1	 1.24
                    path	 r_sel2	 data_out2	 0.78
                    path	 r_sel3	 data_out3	 0.78
                    inport	 w_sel0	 0.81
                    inport	 data_in0	 0.29
                    outport	 REG3	 1.18
                    outport	 REG3	 1.23
                    outport	 REG3	 1.18
                    outport	 REG3	 1.18
                    internal	 1.23
                  </data>
                </max>
                <min>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 1.18
                    path	 r_sel1	 data_out1	 1.03
                    path	 r_sel2	 data_out2	 1.14
                    path	 r_sel3	 data_out3	 1.14
                    inport	 w_sel0	 0.74
                    inport	 data_in0	 0.28
                    outport	 REG2	 1.33
                    outport	 REG2	 1.33
                    outport	 REG2	 1.33
                    outport	 REG1	 1.34
                    internal	 1.34
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 0.59
                    path	 r_sel1	 data_out1	 0.59
                    path	 r_sel2	 data_out2	 0.59
                    path	 r_sel3	 data_out3	 0.63
                    inport	 w_sel0	 0.96
                    inport	 data_in0	 0.28
                    outport	 REG0	 0.99
                    outport	 REG2	 0.99
                    outport	 REG1	 0.99
                    outport	 REG2	 0.99
                    internal	 0.99
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 0.78
                    path	 r_sel1	 data_out1	 1.24
                    path	 r_sel2	 data_out2	 0.78
                    path	 r_sel3	 data_out3	 0.78
                    inport	 w_sel0	 0.81
                    inport	 data_in0	 0.29
                    outport	 REG3	 1.18
                    outport	 REG3	 1.23
                    outport	 REG3	 1.18
                    outport	 REG3	 1.18
                    internal	 1.23
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 0.61
                      path	 r_sel1	 data_out1	 0.61
                      path	 r_sel2	 data_out2	 0.61
                      path	 r_sel3	 data_out3	 0.61
                      inport	 w_sel0	 0.78
                      inport	 data_in0	 0.24
                      outport	 REG0	 0.81
                      outport	 REG0	 0.81
                      outport	 REG0	 0.81
                      outport	 REG0	 0.81
                      internal	 0.81
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 0.64
                      path	 r_sel1	 data_out1	 0.64
                      path	 r_sel2	 data_out2	 0.64
                      path	 r_sel3	 data_out3	 0.64
                      inport	 w_sel0	 0.86
                      inport	 data_in0	 0.24
                      outport	 REG0	 0.81
                      outport	 REG0	 0.81
                      outport	 REG0	 0.81
                      outport	 REG0	 0.81
                      internal	 0.81
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 0.69
                      path	 r_sel1	 data_out1	 0.69
                      path	 r_sel2	 data_out2	 0.69
                      path	 r_sel3	 data_out3	 0.69
                      inport	 w_sel0	 0.80
                      inport	 data_in0	 0.24
                      outport	 REG0	 0.81
                      outport	 REG0	 0.81
                      outport	 REG0	 0.81
                      outport	 REG0	 0.81
                      internal	 0.81
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 0.50
                      path	 r_sel1	 data_out1	 0.59
                      path	 r_sel2	 data_out2	 0.50
                      path	 r_sel3	 data_out3	 0.59
                      inport	 w_sel0	 0.68
                      inport	 data_in0	 0.44
                      outport	 REG2	 0.87
                      outport	 REG3	 0.87
                      outport	 REG1	 0.87
                      outport	 REG3	 0.87
                      internal	 0.87
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 0.52
                      path	 r_sel1	 data_out1	 0.57
                      path	 r_sel2	 data_out2	 0.51
                      path	 r_sel3	 data_out3	 0.50
                      inport	 w_sel0	 0.68
                      inport	 data_in0	 0.44
                      outport	 REG1	 0.86
                      outport	 REG2	 0.86
                      outport	 REG2	 0.86
                      outport	 REG2	 0.86
                      internal	 0.86
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 0.52
                      path	 r_sel1	 data_out1	 0.55
                      path	 r_sel2	 data_out2	 0.54
                      path	 r_sel3	 data_out3	 0.60
                      inport	 w_sel0	 0.73
                      inport	 data_in0	 0.45
                      outport	 REG2	 0.87
                      outport	 REG2	 0.89
                      outport	 REG3	 0.89
                      outport	 REG3	 0.89
                      internal	 0.89
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 1.18
                      path	 r_sel1	 data_out1	 1.03
                      path	 r_sel2	 data_out2	 1.14
                      path	 r_sel3	 data_out3	 1.14
                      inport	 w_sel0	 0.74
                      inport	 data_in0	 0.28
                      outport	 REG2	 1.33
                      outport	 REG2	 1.33
                      outport	 REG2	 1.33
                      outport	 REG1	 1.34
                      internal	 1.34
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 0.59
                      path	 r_sel1	 data_out1	 0.59
                      path	 r_sel2	 data_out2	 0.59
                      path	 r_sel3	 data_out3	 0.63
                      inport	 w_sel0	 0.96
                      inport	 data_in0	 0.28
                      outport	 REG0	 0.99
                      outport	 REG2	 0.99
                      outport	 REG1	 0.99
                      outport	 REG2	 0.99
                      internal	 0.99
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 0.78
                      path	 r_sel1	 data_out1	 1.24
                      path	 r_sel2	 data_out2	 0.78
                      path	 r_sel3	 data_out3	 0.78
                      inport	 w_sel0	 0.81
                      inport	 data_in0	 0.29
                      outport	 REG3	 1.18
                      outport	 REG3	 1.23
                      outport	 REG3	 1.18
                      outport	 REG3	 1.18
                      internal	 1.23
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,4,2">
                <max>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 1.03
                    path	 r_sel1	 data_out1	 1.03
                    path	 r_sel2	 data_out2	 1.03
                    path	 r_sel3	 data_out3	 1.03
                    inport	 w_sel0	 1.41
                    inport	 w_sel1	 1.55
                    inport	 data_in0	 0.49
                    inport	 data_in1	 0.42
                    outport	 REG0	 1.33
                    outport	 REG0	 1.33
                    outport	 REG0	 1.33
                    outport	 REG2	 1.33
                    internal	 1.33
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 1.04
                    path	 r_sel1	 data_out1	 1.04
                    path	 r_sel2	 data_out2	 1.04
                    path	 r_sel3	 data_out3	 1.00
                    inport	 w_sel0	 1.65
                    inport	 w_sel1	 1.82
                    inport	 data_in0	 0.42
                    inport	 data_in1	 0.49
                    outport	 REG2	 1.34
                    outport	 REG2	 1.34
                    outport	 REG2	 1.34
                    outport	 REG0	 1.33
                    internal	 1.34
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 0.95
                    path	 r_sel1	 data_out1	 0.95
                    path	 r_sel2	 data_out2	 0.95
                    path	 r_sel3	 data_out3	 1.01
                    inport	 w_sel0	 1.69
                    inport	 w_sel1	 1.96
                    inport	 data_in0	 0.43
                    inport	 data_in1	 0.50
                    outport	 REG3	 1.32
                    outport	 REG3	 1.32
                    outport	 REG3	 1.32
                    outport	 REG3	 1.32
                    internal	 1.32
                  </data>
                </max>
                <min>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 1.03
                    path	 r_sel1	 data_out1	 1.03
                    path	 r_sel2	 data_out2	 1.03
                    path	 r_sel3	 data_out3	 1.03
                    inport	 w_sel0	 1.41
                    inport	 w_sel1	 1.55
                    inport	 data_in0	 0.49
                    inport	 data_in1	 0.42
                    outport	 REG0	 1.33
                    outport	 REG0	 1.33
                    outport	 REG0	 1.33
                    outport	 REG2	 1.33
                    internal	 1.33
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 1.04
                    path	 r_sel1	 data_out1	 1.04
                    path	 r_sel2	 data_out2	 1.04
                    path	 r_sel3	 data_out3	 1.00
                    inport	 w_sel0	 1.65
                    inport	 w_sel1	 1.82
                    inport	 data_in0	 0.42
                    inport	 data_in1	 0.49
                    outport	 REG2	 1.34
                    outport	 REG2	 1.34
                    outport	 REG2	 1.34
                    outport	 REG0	 1.33
                    internal	 1.34
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 0.95
                    path	 r_sel1	 data_out1	 0.95
                    path	 r_sel2	 data_out2	 0.95
                    path	 r_sel3	 data_out3	 1.01
                    inport	 w_sel0	 1.69
                    inport	 w_sel1	 1.96
                    inport	 data_in0	 0.43
                    inport	 data_in1	 0.50
                    outport	 REG3	 1.32
                    outport	 REG3	 1.32
                    outport	 REG3	 1.32
                    outport	 REG3	 1.32
                    internal	 1.32
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 0.61
                      path	 r_sel1	 data_out1	 0.61
                      path	 r_sel2	 data_out2	 0.61
                      path	 r_sel3	 data_out3	 0.61
                      inport	 w_sel0	 1.11
                      inport	 w_sel1	 1.28
                      inport	 data_in0	 0.27
                      inport	 data_in1	 0.42
                      outport	 REG0	 0.81
                      outport	 REG0	 0.81
                      outport	 REG0	 0.81
                      outport	 REG0	 0.81
                      internal	 0.88
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 0.64
                      path	 r_sel1	 data_out1	 0.64
                      path	 r_sel2	 data_out2	 0.64
                      path	 r_sel3	 data_out3	 0.64
                      inport	 w_sel0	 1.13
                      inport	 w_sel1	 1.33
                      inport	 data_in0	 0.27
                      inport	 data_in1	 0.42
                      outport	 REG0	 0.81
                      outport	 REG0	 0.81
                      outport	 REG0	 0.81
                      outport	 REG0	 0.81
                      internal	 0.88
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 0.70
                      path	 r_sel1	 data_out1	 0.70
                      path	 r_sel2	 data_out2	 0.70
                      path	 r_sel3	 data_out3	 0.70
                      inport	 w_sel0	 1.33
                      inport	 w_sel1	 1.52
                      inport	 data_in0	 0.27
                      inport	 data_in1	 0.42
                      outport	 REG0	 0.82
                      outport	 REG0	 0.82
                      outport	 REG0	 0.82
                      outport	 REG0	 0.82
                      internal	 0.89
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 0.66
                      path	 r_sel1	 data_out1	 0.66
                      path	 r_sel2	 data_out2	 0.66
                      path	 r_sel3	 data_out3	 0.66
                      inport	 w_sel0	 0.76
                      inport	 w_sel1	 0.76
                      inport	 data_in0	 0.49
                      inport	 data_in1	 0.50
                      outport	 REG3	 0.92
                      outport	 REG1	 0.92
                      outport	 REG1	 0.92
                      outport	 REG1	 0.92
                      internal	 0.76
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 0.76
                      path	 r_sel1	 data_out1	 0.76
                      path	 r_sel2	 data_out2	 0.76
                      path	 r_sel3	 data_out3	 0.76
                      inport	 w_sel0	 0.82
                      inport	 w_sel1	 0.82
                      inport	 data_in0	 0.54
                      inport	 data_in1	 0.61
                      outport	 REG0	 0.96
                      outport	 REG0	 0.96
                      outport	 REG0	 0.96
                      outport	 REG0	 0.96
                      internal	 0.81
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 0.76
                      path	 r_sel1	 data_out1	 0.76
                      path	 r_sel2	 data_out2	 0.76
                      path	 r_sel3	 data_out3	 0.77
                      inport	 w_sel0	 0.81
                      inport	 w_sel1	 0.81
                      inport	 data_in0	 0.54
                      inport	 data_in1	 0.63
                      outport	 REG3	 0.97
                      outport	 REG3	 0.97
                      outport	 REG3	 0.94
                      outport	 REG3	 0.85
                      internal	 0.81
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 1.03
                      path	 r_sel1	 data_out1	 1.03
                      path	 r_sel2	 data_out2	 1.03
                      path	 r_sel3	 data_out3	 1.03
                      inport	 w_sel0	 1.41
                      inport	 w_sel1	 1.55
                      inport	 data_in0	 0.49
                      inport	 data_in1	 0.42
                      outport	 REG0	 1.33
                      outport	 REG0	 1.33
                      outport	 REG0	 1.33
                      outport	 REG2	 1.33
                      internal	 1.33
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 1.04
                      path	 r_sel1	 data_out1	 1.04
                      path	 r_sel2	 data_out2	 1.04
                      path	 r_sel3	 data_out3	 1.00
                      inport	 w_sel0	 1.65
                      inport	 w_sel1	 1.82
                      inport	 data_in0	 0.42
                      inport	 data_in1	 0.49
                      outport	 REG2	 1.34
                      outport	 REG2	 1.34
                      outport	 REG2	 1.34
                      outport	 REG0	 1.33
                      internal	 1.34
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 0.95
                      path	 r_sel1	 data_out1	 0.95
                      path	 r_sel2	 data_out2	 0.95
                      path	 r_sel3	 data_out3	 1.01
                      inport	 w_sel0	 1.69
                      inport	 w_sel1	 1.96
                      inport	 data_in0	 0.43
                      inport	 data_in1	 0.50
                      outport	 REG3	 1.32
                      outport	 REG3	 1.32
                      outport	 REG3	 1.32
                      outport	 REG3	 1.32
                      internal	 1.32
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,4,4">
                <max>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 0.75
                    path	 r_sel1	 data_out1	 0.59
                    path	 r_sel2	 data_out2	 0.59
                    path	 r_sel3	 data_out3	 0.73
                    inport	 w_sel0	 1.06
                    inport	 w_sel1	 1.80
                    inport	 w_sel2	 1.80
                    inport	 w_sel3	 1.81
                    inport	 data_in0	 1.17
                    inport	 data_in1	 0.86
                    inport	 data_in2	 1.00
                    inport	 data_in3	 0.92
                    outport	 REG2	 0.98
                    outport	 REG1	 0.98
                    outport	 REG1	 0.98
                    outport	 REG1	 0.98
                    internal	 0.98
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 0.60
                    path	 r_sel1	 data_out1	 0.60
                    path	 r_sel2	 data_out2	 0.60
                    path	 r_sel3	 data_out3	 0.61
                    inport	 w_sel0	 1.61
                    inport	 w_sel1	 2.03
                    inport	 w_sel2	 1.89
                    inport	 w_sel3	 1.91
                    inport	 data_in0	 1.09
                    inport	 data_in1	 1.13
                    inport	 data_in2	 0.63
                    inport	 data_in3	 1.00
                    outport	 REG1	 0.99
                    outport	 REG3	 0.99
                    outport	 REG3	 0.99
                    outport	 REG3	 0.99
                    internal	 1.26
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 0.99
                    path	 r_sel1	 data_out1	 0.99
                    path	 r_sel2	 data_out2	 0.98
                    path	 r_sel3	 data_out3	 0.99
                    inport	 w_sel0	 2.12
                    inport	 w_sel1	 2.69
                    inport	 w_sel2	 2.38
                    inport	 w_sel3	 2.36
                    inport	 data_in0	 0.53
                    inport	 data_in1	 0.73
                    inport	 data_in2	 0.64
                    inport	 data_in3	 0.97
                    outport	 REG0	 1.26
                    outport	 REG0	 1.26
                    outport	 REG0	 1.26
                    outport	 REG0	 1.26
                    internal	 1.61
                  </data>
                </max>
                <min>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 0.75
                    path	 r_sel1	 data_out1	 0.59
                    path	 r_sel2	 data_out2	 0.59
                    path	 r_sel3	 data_out3	 0.73
                    inport	 w_sel0	 1.06
                    inport	 w_sel1	 1.80
                    inport	 w_sel2	 1.80
                    inport	 w_sel3	 1.81
                    inport	 data_in0	 1.17
                    inport	 data_in1	 0.86
                    inport	 data_in2	 1.00
                    inport	 data_in3	 0.92
                    outport	 REG2	 0.98
                    outport	 REG1	 0.98
                    outport	 REG1	 0.98
                    outport	 REG1	 0.98
                    internal	 0.98
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 0.60
                    path	 r_sel1	 data_out1	 0.60
                    path	 r_sel2	 data_out2	 0.60
                    path	 r_sel3	 data_out3	 0.61
                    inport	 w_sel0	 1.61
                    inport	 w_sel1	 2.03
                    inport	 w_sel2	 1.89
                    inport	 w_sel3	 1.91
                    inport	 data_in0	 1.09
                    inport	 data_in1	 1.13
                    inport	 data_in2	 0.63
                    inport	 data_in3	 1.00
                    outport	 REG1	 0.99
                    outport	 REG3	 0.99
                    outport	 REG3	 0.99
                    outport	 REG3	 0.99
                    internal	 1.26
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 0.99
                    path	 r_sel1	 data_out1	 0.99
                    path	 r_sel2	 data_out2	 0.98
                    path	 r_sel3	 data_out3	 0.99
                    inport	 w_sel0	 2.12
                    inport	 w_sel1	 2.69
                    inport	 w_sel2	 2.38
                    inport	 w_sel3	 2.36
                    inport	 data_in0	 0.53
                    inport	 data_in1	 0.73
                    inport	 data_in2	 0.64
                    inport	 data_in3	 0.97
                    outport	 REG0	 1.26
                    outport	 REG0	 1.26
                    outport	 REG0	 1.26
                    outport	 REG0	 1.26
                    internal	 1.61
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 0.61
                      path	 r_sel1	 data_out1	 0.61
                      path	 r_sel2	 data_out2	 0.61
                      path	 r_sel3	 data_out3	 0.61
                      inport	 w_sel0	 0.79
                      inport	 w_sel1	 1.32
                      inport	 w_sel2	 1.34
                      inport	 w_sel3	 1.32
                      inport	 data_in0	 0.76
                      inport	 data_in1	 0.72
                      inport	 data_in2	 0.70
                      inport	 data_in3	 0.74
                      outport	 REG0	 0.81
                      outport	 REG0	 0.81
                      outport	 REG0	 0.81
                      outport	 REG0	 0.81
                      internal	 0.81
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 0.64
                      path	 r_sel1	 data_out1	 0.64
                      path	 r_sel2	 data_out2	 0.64
                      path	 r_sel3	 data_out3	 0.64
                      inport	 w_sel0	 1.11
                      inport	 w_sel1	 1.41
                      inport	 w_sel2	 1.53
                      inport	 w_sel3	 1.47
                      inport	 data_in0	 0.83
                      inport	 data_in1	 0.77
                      inport	 data_in2	 0.37
                      inport	 data_in3	 0.80
                      outport	 REG0	 0.81
                      outport	 REG0	 0.81
                      outport	 REG0	 0.81
                      outport	 REG0	 0.81
                      internal	 0.93
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 0.70
                      path	 r_sel1	 data_out1	 0.70
                      path	 r_sel2	 data_out2	 0.70
                      path	 r_sel3	 data_out3	 0.70
                      inport	 w_sel0	 1.52
                      inport	 w_sel1	 1.91
                      inport	 w_sel2	 1.80
                      inport	 w_sel3	 1.82
                      inport	 data_in0	 0.33
                      inport	 data_in1	 0.31
                      inport	 data_in2	 0.39
                      inport	 data_in3	 0.45
                      outport	 REG0	 0.82
                      outport	 REG0	 0.82
                      outport	 REG0	 0.82
                      outport	 REG0	 0.82
                      internal	 0.88
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 0.66
                      path	 r_sel1	 data_out1	 0.66
                      path	 r_sel2	 data_out2	 0.66
                      path	 r_sel3	 data_out3	 0.66
                      inport	 w_sel0	 0.83
                      inport	 w_sel1	 0.87
                      inport	 w_sel2	 0.89
                      inport	 w_sel3	 0.89
                      inport	 data_in0	 0.76
                      inport	 data_in1	 0.82
                      inport	 data_in2	 0.76
                      inport	 data_in3	 0.79
                      outport	 REG0	 0.92
                      outport	 REG0	 0.92
                      outport	 REG0	 0.92
                      outport	 REG0	 0.92
                      internal	 0.89
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 0.69
                      path	 r_sel1	 data_out1	 0.75
                      path	 r_sel2	 data_out2	 0.69
                      path	 r_sel3	 data_out3	 0.68
                      inport	 w_sel0	 0.83
                      inport	 w_sel1	 0.91
                      inport	 w_sel2	 0.91
                      inport	 w_sel3	 0.91
                      inport	 data_in0	 0.65
                      inport	 data_in1	 0.74
                      inport	 data_in2	 0.67
                      inport	 data_in3	 0.63
                      outport	 REG3	 0.96
                      outport	 REG3	 0.96
                      outport	 REG3	 0.96
                      outport	 REG3	 0.96
                      internal	 0.90
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 0.79
                      path	 r_sel1	 data_out1	 0.79
                      path	 r_sel2	 data_out2	 0.83
                      path	 r_sel3	 data_out3	 0.79
                      inport	 w_sel0	 1.07
                      inport	 w_sel1	 1.07
                      inport	 w_sel2	 1.09
                      inport	 w_sel3	 1.11
                      inport	 data_in0	 0.48
                      inport	 data_in1	 0.51
                      inport	 data_in2	 0.48
                      inport	 data_in3	 0.54
                      outport	 REG3	 0.96
                      outport	 REG3	 0.96
                      outport	 REG3	 0.99
                      outport	 REG3	 0.96
                      internal	 1.02
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 0.75
                      path	 r_sel1	 data_out1	 0.59
                      path	 r_sel2	 data_out2	 0.59
                      path	 r_sel3	 data_out3	 0.73
                      inport	 w_sel0	 1.06
                      inport	 w_sel1	 1.80
                      inport	 w_sel2	 1.80
                      inport	 w_sel3	 1.81
                      inport	 data_in0	 1.17
                      inport	 data_in1	 0.86
                      inport	 data_in2	 1.00
                      inport	 data_in3	 0.92
                      outport	 REG2	 0.98
                      outport	 REG1	 0.98
                      outport	 REG1	 0.98
                      outport	 REG1	 0.98
                      internal	 0.98
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 0.60
                      path	 r_sel1	 data_out1	 0.60
                      path	 r_sel2	 data_out2	 0.60
                      path	 r_sel3	 data_out3	 0.61
                      inport	 w_sel0	 1.61
                      inport	 w_sel1	 2.03
                      inport	 w_sel2	 1.89
                      inport	 w_sel3	 1.91
                      inport	 data_in0	 1.09
                      inport	 data_in1	 1.13
                      inport	 data_in2	 0.63
                      inport	 data_in3	 1.00
                      outport	 REG1	 0.99
                      outport	 REG3	 0.99
                      outport	 REG3	 0.99
                      outport	 REG3	 0.99
                      internal	 1.26
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 0.99
                      path	 r_sel1	 data_out1	 0.99
                      path	 r_sel2	 data_out2	 0.98
                      path	 r_sel3	 data_out3	 0.99
                      inport	 w_sel0	 2.12
                      inport	 w_sel1	 2.69
                      inport	 w_sel2	 2.38
                      inport	 w_sel3	 2.36
                      inport	 data_in0	 0.53
                      inport	 data_in1	 0.73
                      inport	 data_in2	 0.64
                      inport	 data_in3	 0.97
                      outport	 REG0	 1.26
                      outport	 REG0	 1.26
                      outport	 REG0	 1.26
                      outport	 REG0	 1.26
                      internal	 1.61
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,1,1">
                <max>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 1.56
                    inport	 w_sel0	 1.13
                    inport	 data_in0	 0.25
                    outport	 REG2	 1.41
                    internal	 1.41
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 1.29
                    inport	 w_sel0	 1.12
                    inport	 data_in0	 0.25
                    outport	 REG10	 1.01
                    internal	 1.01
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 1.81
                    inport	 w_sel0	 1.39
                    inport	 data_in0	 0.25
                    outport	 REG0	 1.58
                    internal	 1.58
                  </data>
                </max>
                <min>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 1.56
                    inport	 w_sel0	 1.13
                    inport	 data_in0	 0.25
                    outport	 REG2	 1.41
                    internal	 1.41
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 1.29
                    inport	 w_sel0	 1.12
                    inport	 data_in0	 0.25
                    outport	 REG10	 1.01
                    internal	 1.01
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 1.81
                    inport	 w_sel0	 1.39
                    inport	 data_in0	 0.25
                    outport	 REG0	 1.58
                    internal	 1.58
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 1.19
                      inport	 w_sel0	 1.21
                      inport	 data_in0	 0.24
                      outport	 REG2	 1.22
                      internal	 1.22
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 1.32
                      inport	 w_sel0	 1.06
                      inport	 data_in0	 0.24
                      outport	 REG2	 1.24
                      internal	 1.24
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 1.41
                      inport	 w_sel0	 1.34
                      inport	 data_in0	 0.24
                      outport	 REG2	 1.27
                      internal	 1.27
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 0.90
                      inport	 w_sel0	 0.88
                      inport	 data_in0	 0.49
                      outport	 REG2	 1.08
                      internal	 1.08
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 1.04
                      inport	 w_sel0	 0.88
                      inport	 data_in0	 0.51
                      outport	 REG11	 1.04
                      internal	 1.04
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 1.03
                      inport	 w_sel0	 0.95
                      inport	 data_in0	 0.51
                      outport	 REG2	 1.14
                      internal	 1.14
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 1.56
                      inport	 w_sel0	 1.13
                      inport	 data_in0	 0.25
                      outport	 REG2	 1.41
                      internal	 1.41
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 1.29
                      inport	 w_sel0	 1.12
                      inport	 data_in0	 0.25
                      outport	 REG10	 1.01
                      internal	 1.01
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 1.81
                      inport	 w_sel0	 1.39
                      inport	 data_in0	 0.25
                      outport	 REG0	 1.58
                      internal	 1.58
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,1,2">
                <max>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 1.37
                    inport	 w_sel0	 1.57
                    inport	 w_sel1	 1.86
                    inport	 data_in0	 0.49
                    inport	 data_in1	 0.42
                    outport	 REG12	 1.38
                    internal	 1.38
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 1.42
                    inport	 w_sel0	 1.64
                    inport	 w_sel1	 1.88
                    inport	 data_in0	 0.43
                    inport	 data_in1	 0.49
                    outport	 REG15	 1.14
                    internal	 1.14
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 1.83
                    inport	 w_sel0	 1.82
                    inport	 w_sel1	 2.10
                    inport	 data_in0	 0.43
                    inport	 data_in1	 0.50
                    outport	 REG0	 1.59
                    internal	 1.59
                  </data>
                </max>
                <min>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 1.37
                    inport	 w_sel0	 1.57
                    inport	 w_sel1	 1.86
                    inport	 data_in0	 0.49
                    inport	 data_in1	 0.42
                    outport	 REG12	 1.38
                    internal	 1.38
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 1.42
                    inport	 w_sel0	 1.64
                    inport	 w_sel1	 1.88
                    inport	 data_in0	 0.43
                    inport	 data_in1	 0.49
                    outport	 REG15	 1.14
                    internal	 1.14
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 1.83
                    inport	 w_sel0	 1.82
                    inport	 w_sel1	 2.10
                    inport	 data_in0	 0.43
                    inport	 data_in1	 0.50
                    outport	 REG0	 1.59
                    internal	 1.59
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 1.19
                      inport	 w_sel0	 1.28
                      inport	 w_sel1	 1.61
                      inport	 data_in0	 0.27
                      inport	 data_in1	 0.42
                      outport	 REG2	 1.22
                      internal	 1.22
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 1.32
                      inport	 w_sel0	 1.33
                      inport	 w_sel1	 1.72
                      inport	 data_in0	 0.27
                      inport	 data_in1	 0.42
                      outport	 REG2	 1.24
                      internal	 1.24
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 1.41
                      inport	 w_sel0	 1.49
                      inport	 w_sel1	 1.84
                      inport	 data_in0	 0.27
                      inport	 data_in1	 0.42
                      outport	 REG2	 1.27
                      internal	 1.27
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 0.89
                      inport	 w_sel0	 0.91
                      inport	 w_sel1	 0.92
                      inport	 data_in0	 0.54
                      inport	 data_in1	 0.61
                      outport	 REG3	 1.07
                      internal	 1.07
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 0.96
                      inport	 w_sel0	 1.01
                      inport	 w_sel1	 1.01
                      inport	 data_in0	 0.52
                      inport	 data_in1	 0.52
                      outport	 REG3	 1.14
                      internal	 1.14
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 1.13
                      inport	 w_sel0	 1.09
                      inport	 w_sel1	 1.10
                      inport	 data_in0	 0.53
                      inport	 data_in1	 0.52
                      outport	 REG12	 1.12
                      internal	 0.97
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 1.37
                      inport	 w_sel0	 1.57
                      inport	 w_sel1	 1.86
                      inport	 data_in0	 0.49
                      inport	 data_in1	 0.42
                      outport	 REG12	 1.38
                      internal	 1.38
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 1.42
                      inport	 w_sel0	 1.64
                      inport	 w_sel1	 1.88
                      inport	 data_in0	 0.43
                      inport	 data_in1	 0.49
                      outport	 REG15	 1.14
                      internal	 1.14
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 1.83
                      inport	 w_sel0	 1.82
                      inport	 w_sel1	 2.10
                      inport	 data_in0	 0.43
                      inport	 data_in1	 0.50
                      outport	 REG0	 1.59
                      internal	 1.59
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,1,4">
                <max>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 1.70
                    inport	 w_sel0	 1.16
                    inport	 w_sel1	 1.87
                    inport	 w_sel2	 1.73
                    inport	 w_sel3	 1.66
                    inport	 data_in0	 0.82
                    inport	 data_in1	 0.86
                    inport	 data_in2	 0.80
                    inport	 data_in3	 0.84
                    outport	 REG2	 1.68
                    internal	 1.68
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 1.40
                    inport	 w_sel0	 2.09
                    inport	 w_sel1	 2.36
                    inport	 w_sel2	 2.46
                    inport	 w_sel3	 2.15
                    inport	 data_in0	 0.89
                    inport	 data_in1	 1.04
                    inport	 data_in2	 1.10
                    inport	 data_in3	 0.50
                    outport	 REG0	 1.14
                    internal	 1.14
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 1.85
                    inport	 w_sel0	 2.60
                    inport	 w_sel1	 2.96
                    inport	 w_sel2	 2.91
                    inport	 w_sel3	 2.86
                    inport	 data_in0	 0.99
                    inport	 data_in1	 0.58
                    inport	 data_in2	 0.53
                    inport	 data_in3	 0.63
                    outport	 REG0	 1.60
                    internal	 1.60
                  </data>
                </max>
                <min>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 1.70
                    inport	 w_sel0	 1.16
                    inport	 w_sel1	 1.87
                    inport	 w_sel2	 1.73
                    inport	 w_sel3	 1.66
                    inport	 data_in0	 0.82
                    inport	 data_in1	 0.86
                    inport	 data_in2	 0.80
                    inport	 data_in3	 0.84
                    outport	 REG2	 1.68
                    internal	 1.68
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 1.40
                    inport	 w_sel0	 2.09
                    inport	 w_sel1	 2.36
                    inport	 w_sel2	 2.46
                    inport	 w_sel3	 2.15
                    inport	 data_in0	 0.89
                    inport	 data_in1	 1.04
                    inport	 data_in2	 1.10
                    inport	 data_in3	 0.50
                    outport	 REG0	 1.14
                    internal	 1.14
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 1.85
                    inport	 w_sel0	 2.60
                    inport	 w_sel1	 2.96
                    inport	 w_sel2	 2.91
                    inport	 w_sel3	 2.86
                    inport	 data_in0	 0.99
                    inport	 data_in1	 0.58
                    inport	 data_in2	 0.53
                    inport	 data_in3	 0.63
                    outport	 REG0	 1.60
                    internal	 1.60
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 1.27
                      inport	 w_sel0	 1.20
                      inport	 w_sel1	 1.61
                      inport	 w_sel2	 1.53
                      inport	 w_sel3	 1.44
                      inport	 data_in0	 0.81
                      inport	 data_in1	 0.85
                      inport	 data_in2	 0.79
                      inport	 data_in3	 0.83
                      outport	 REG4	 1.23
                      internal	 1.23
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 1.38
                      inport	 w_sel0	 1.57
                      inport	 w_sel1	 1.76
                      inport	 w_sel2	 1.73
                      inport	 w_sel3	 1.99
                      inport	 data_in0	 0.61
                      inport	 data_in1	 0.76
                      inport	 data_in2	 0.82
                      inport	 data_in3	 0.44
                      outport	 REG2	 1.27
                      internal	 1.27
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 1.60
                      inport	 w_sel0	 1.85
                      inport	 w_sel1	 2.13
                      inport	 w_sel2	 2.12
                      inport	 w_sel3	 2.22
                      inport	 data_in0	 0.53
                      inport	 data_in1	 0.33
                      inport	 data_in2	 0.42
                      inport	 data_in3	 0.35
                      outport	 REG2	 1.46
                      internal	 1.46
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 1.00
                      inport	 w_sel0	 1.05
                      inport	 w_sel1	 1.08
                      inport	 w_sel2	 1.08
                      inport	 w_sel3	 1.08
                      inport	 data_in0	 0.67
                      inport	 data_in1	 0.76
                      inport	 data_in2	 0.68
                      inport	 data_in3	 0.67
                      outport	 REG12	 1.09
                      internal	 1.09
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 1.08
                      inport	 w_sel0	 1.20
                      inport	 w_sel1	 1.20
                      inport	 w_sel2	 1.20
                      inport	 w_sel3	 1.20
                      inport	 data_in0	 0.85
                      inport	 data_in1	 0.88
                      inport	 data_in2	 0.74
                      inport	 data_in3	 0.73
                      outport	 REG8	 1.14
                      internal	 1.03
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 1.15
                      inport	 w_sel0	 1.39
                      inport	 w_sel1	 1.39
                      inport	 w_sel2	 1.40
                      inport	 w_sel3	 1.39
                      inport	 data_in0	 0.70
                      inport	 data_in1	 0.81
                      inport	 data_in2	 0.70
                      inport	 data_in3	 0.66
                      outport	 REG12	 1.13
                      internal	 1.05
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 1.70
                      inport	 w_sel0	 1.16
                      inport	 w_sel1	 1.87
                      inport	 w_sel2	 1.73
                      inport	 w_sel3	 1.66
                      inport	 data_in0	 0.82
                      inport	 data_in1	 0.86
                      inport	 data_in2	 0.80
                      inport	 data_in3	 0.84
                      outport	 REG2	 1.68
                      internal	 1.68
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 1.40
                      inport	 w_sel0	 2.09
                      inport	 w_sel1	 2.36
                      inport	 w_sel2	 2.46
                      inport	 w_sel3	 2.15
                      inport	 data_in0	 0.89
                      inport	 data_in1	 1.04
                      inport	 data_in2	 1.10
                      inport	 data_in3	 0.50
                      outport	 REG0	 1.14
                      internal	 1.14
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 1.85
                      inport	 w_sel0	 2.60
                      inport	 w_sel1	 2.96
                      inport	 w_sel2	 2.91
                      inport	 w_sel3	 2.86
                      inport	 data_in0	 0.99
                      inport	 data_in1	 0.58
                      inport	 data_in2	 0.53
                      inport	 data_in3	 0.63
                      outport	 REG0	 1.60
                      internal	 1.60
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,2,1">
                <max>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 1.96
                    path	 r_sel1	 data_out1	 1.96
                    inport	 w_sel0	 1.13
                    inport	 data_in0	 0.25
                    outport	 REG8	 1.99
                    outport	 REG7	 1.99
                    internal	 1.99
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 1.82
                    path	 r_sel1	 data_out1	 1.73
                    inport	 w_sel0	 1.12
                    inport	 data_in0	 0.25
                    outport	 REG15	 1.60
                    outport	 REG2	 1.67
                    internal	 1.67
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 1.84
                    path	 r_sel1	 data_out1	 1.84
                    inport	 w_sel0	 1.39
                    inport	 data_in0	 0.29
                    outport	 REG0	 1.64
                    outport	 REG0	 1.64
                    internal	 1.64
                  </data>
                </max>
                <min>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 1.96
                    path	 r_sel1	 data_out1	 1.96
                    inport	 w_sel0	 1.13
                    inport	 data_in0	 0.25
                    outport	 REG8	 1.99
                    outport	 REG7	 1.99
                    internal	 1.99
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 1.82
                    path	 r_sel1	 data_out1	 1.73
                    inport	 w_sel0	 1.12
                    inport	 data_in0	 0.25
                    outport	 REG15	 1.60
                    outport	 REG2	 1.67
                    internal	 1.67
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 1.84
                    path	 r_sel1	 data_out1	 1.84
                    inport	 w_sel0	 1.39
                    inport	 data_in0	 0.29
                    outport	 REG0	 1.64
                    outport	 REG0	 1.64
                    internal	 1.64
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 1.23
                      path	 r_sel1	 data_out1	 1.23
                      inport	 w_sel0	 1.21
                      inport	 data_in0	 0.24
                      outport	 REG2	 1.20
                      outport	 REG2	 1.20
                      internal	 1.20
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 1.36
                      path	 r_sel1	 data_out1	 1.36
                      inport	 w_sel0	 1.06
                      inport	 data_in0	 0.24
                      outport	 REG2	 1.22
                      outport	 REG2	 1.22
                      internal	 1.22
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 1.45
                      path	 r_sel1	 data_out1	 1.45
                      inport	 w_sel0	 1.34
                      inport	 data_in0	 0.24
                      outport	 REG2	 1.25
                      outport	 REG2	 1.25
                      internal	 1.25
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 0.77
                      path	 r_sel1	 data_out1	 0.77
                      inport	 w_sel0	 0.93
                      inport	 data_in0	 0.49
                      outport	 REG3	 1.13
                      outport	 REG2	 1.13
                      internal	 1.13
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 1.04
                      path	 r_sel1	 data_out1	 1.04
                      inport	 w_sel0	 0.90
                      inport	 data_in0	 0.51
                      outport	 REG13	 1.06
                      outport	 REG13	 1.06
                      internal	 1.06
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 1.08
                      path	 r_sel1	 data_out1	 1.17
                      inport	 w_sel0	 1.01
                      inport	 data_in0	 0.52
                      outport	 REG8	 1.23
                      outport	 REG10	 1.23
                      internal	 1.23
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 1.96
                      path	 r_sel1	 data_out1	 1.96
                      inport	 w_sel0	 1.13
                      inport	 data_in0	 0.25
                      outport	 REG8	 1.99
                      outport	 REG7	 1.99
                      internal	 1.99
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 1.82
                      path	 r_sel1	 data_out1	 1.73
                      inport	 w_sel0	 1.12
                      inport	 data_in0	 0.25
                      outport	 REG15	 1.60
                      outport	 REG2	 1.67
                      internal	 1.67
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 1.84
                      path	 r_sel1	 data_out1	 1.84
                      inport	 w_sel0	 1.39
                      inport	 data_in0	 0.29
                      outport	 REG0	 1.64
                      outport	 REG0	 1.64
                      internal	 1.64
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,2,2">
                <max>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 1.73
                    path	 r_sel1	 data_out1	 1.73
                    inport	 w_sel0	 1.51
                    inport	 w_sel1	 1.76
                    inport	 data_in0	 0.49
                    inport	 data_in1	 0.42
                    outport	 REG4	 1.74
                    outport	 REG4	 1.74
                    internal	 1.74
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 1.79
                    path	 r_sel1	 data_out1	 1.79
                    inport	 w_sel0	 1.64
                    inport	 w_sel1	 1.88
                    inport	 data_in0	 0.43
                    inport	 data_in1	 0.49
                    outport	 REG0	 1.60
                    outport	 REG0	 1.60
                    internal	 1.60
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 1.84
                    path	 r_sel1	 data_out1	 1.84
                    inport	 w_sel0	 1.82
                    inport	 w_sel1	 2.10
                    inport	 data_in0	 0.43
                    inport	 data_in1	 0.50
                    outport	 REG0	 1.61
                    outport	 REG0	 1.61
                    internal	 1.61
                  </data>
                </max>
                <min>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 1.73
                    path	 r_sel1	 data_out1	 1.73
                    inport	 w_sel0	 1.51
                    inport	 w_sel1	 1.76
                    inport	 data_in0	 0.49
                    inport	 data_in1	 0.42
                    outport	 REG4	 1.74
                    outport	 REG4	 1.74
                    internal	 1.74
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 1.79
                    path	 r_sel1	 data_out1	 1.79
                    inport	 w_sel0	 1.64
                    inport	 w_sel1	 1.88
                    inport	 data_in0	 0.43
                    inport	 data_in1	 0.49
                    outport	 REG0	 1.60
                    outport	 REG0	 1.60
                    internal	 1.60
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 1.84
                    path	 r_sel1	 data_out1	 1.84
                    inport	 w_sel0	 1.82
                    inport	 w_sel1	 2.10
                    inport	 data_in0	 0.43
                    inport	 data_in1	 0.50
                    outport	 REG0	 1.61
                    outport	 REG0	 1.61
                    internal	 1.61
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 1.27
                      path	 r_sel1	 data_out1	 1.27
                      inport	 w_sel0	 1.32
                      inport	 w_sel1	 1.67
                      inport	 data_in0	 0.27
                      inport	 data_in1	 0.42
                      outport	 REG2	 1.22
                      outport	 REG2	 1.22
                      internal	 1.22
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 1.36
                      path	 r_sel1	 data_out1	 1.36
                      inport	 w_sel0	 1.33
                      inport	 w_sel1	 1.72
                      inport	 data_in0	 0.27
                      inport	 data_in1	 0.42
                      outport	 REG2	 1.22
                      outport	 REG2	 1.22
                      internal	 1.22
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 1.45
                      path	 r_sel1	 data_out1	 1.45
                      inport	 w_sel0	 1.49
                      inport	 w_sel1	 1.84
                      inport	 data_in0	 0.27
                      inport	 data_in1	 0.42
                      outport	 REG2	 1.25
                      outport	 REG2	 1.25
                      internal	 1.25
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 0.91
                      path	 r_sel1	 data_out1	 0.91
                      inport	 w_sel0	 0.99
                      inport	 w_sel1	 0.99
                      inport	 data_in0	 0.48
                      inport	 data_in1	 0.57
                      outport	 REG1	 1.14
                      outport	 REG1	 1.14
                      internal	 1.14
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 1.00
                      path	 r_sel1	 data_out1	 1.00
                      inport	 w_sel0	 0.93
                      inport	 w_sel1	 0.93
                      inport	 data_in0	 0.57
                      inport	 data_in1	 0.51
                      outport	 REG1	 1.08
                      outport	 REG13	 1.08
                      internal	 1.08
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 1.13
                      path	 r_sel1	 data_out1	 1.13
                      inport	 w_sel0	 1.10
                      inport	 w_sel1	 1.11
                      inport	 data_in0	 0.53
                      inport	 data_in1	 0.53
                      outport	 REG12	 1.12
                      outport	 REG12	 1.12
                      internal	 1.12
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 1.73
                      path	 r_sel1	 data_out1	 1.73
                      inport	 w_sel0	 1.51
                      inport	 w_sel1	 1.76
                      inport	 data_in0	 0.49
                      inport	 data_in1	 0.42
                      outport	 REG4	 1.74
                      outport	 REG4	 1.74
                      internal	 1.74
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 1.79
                      path	 r_sel1	 data_out1	 1.79
                      inport	 w_sel0	 1.64
                      inport	 w_sel1	 1.88
                      inport	 data_in0	 0.43
                      inport	 data_in1	 0.49
                      outport	 REG0	 1.60
                      outport	 REG0	 1.60
                      internal	 1.60
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 1.84
                      path	 r_sel1	 data_out1	 1.84
                      inport	 w_sel0	 1.82
                      inport	 w_sel1	 2.10
                      inport	 data_in0	 0.43
                      inport	 data_in1	 0.50
                      outport	 REG0	 1.61
                      outport	 REG0	 1.61
                      internal	 1.61
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,2,4">
                <max>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 1.70
                    path	 r_sel1	 data_out1	 1.70
                    inport	 w_sel0	 1.38
                    inport	 w_sel1	 1.87
                    inport	 w_sel2	 1.79
                    inport	 w_sel3	 1.66
                    inport	 data_in0	 0.82
                    inport	 data_in1	 0.86
                    inport	 data_in2	 0.80
                    inport	 data_in3	 0.84
                    outport	 REG2	 1.70
                    outport	 REG2	 1.70
                    internal	 1.70
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 1.83
                    path	 r_sel1	 data_out1	 1.83
                    inport	 w_sel0	 2.10
                    inport	 w_sel1	 2.37
                    inport	 w_sel2	 2.49
                    inport	 w_sel3	 2.18
                    inport	 data_in0	 0.89
                    inport	 data_in1	 1.04
                    inport	 data_in2	 1.11
                    inport	 data_in3	 0.50
                    outport	 REG15	 1.62
                    outport	 REG15	 1.62
                    internal	 1.62
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 1.86
                    path	 r_sel1	 data_out1	 1.83
                    inport	 w_sel0	 2.40
                    inport	 w_sel1	 2.83
                    inport	 w_sel2	 2.80
                    inport	 w_sel3	 2.60
                    inport	 data_in0	 0.93
                    inport	 data_in1	 0.58
                    inport	 data_in2	 0.53
                    inport	 data_in3	 0.63
                    outport	 REG0	 1.63
                    outport	 REG0	 1.63
                    internal	 1.63
                  </data>
                </max>
                <min>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 1.70
                    path	 r_sel1	 data_out1	 1.70
                    inport	 w_sel0	 1.38
                    inport	 w_sel1	 1.87
                    inport	 w_sel2	 1.79
                    inport	 w_sel3	 1.66
                    inport	 data_in0	 0.82
                    inport	 data_in1	 0.86
                    inport	 data_in2	 0.80
                    inport	 data_in3	 0.84
                    outport	 REG2	 1.70
                    outport	 REG2	 1.70
                    internal	 1.70
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 1.83
                    path	 r_sel1	 data_out1	 1.83
                    inport	 w_sel0	 2.10
                    inport	 w_sel1	 2.37
                    inport	 w_sel2	 2.49
                    inport	 w_sel3	 2.18
                    inport	 data_in0	 0.89
                    inport	 data_in1	 1.04
                    inport	 data_in2	 1.11
                    inport	 data_in3	 0.50
                    outport	 REG15	 1.62
                    outport	 REG15	 1.62
                    internal	 1.62
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 1.86
                    path	 r_sel1	 data_out1	 1.83
                    inport	 w_sel0	 2.40
                    inport	 w_sel1	 2.83
                    inport	 w_sel2	 2.80
                    inport	 w_sel3	 2.60
                    inport	 data_in0	 0.93
                    inport	 data_in1	 0.58
                    inport	 data_in2	 0.53
                    inport	 data_in3	 0.63
                    outport	 REG0	 1.63
                    outport	 REG0	 1.63
                    internal	 1.63
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 1.27
                      path	 r_sel1	 data_out1	 1.27
                      inport	 w_sel0	 1.39
                      inport	 w_sel1	 1.61
                      inport	 w_sel2	 1.56
                      inport	 w_sel3	 1.44
                      inport	 data_in0	 0.81
                      inport	 data_in1	 0.85
                      inport	 data_in2	 0.79
                      inport	 data_in3	 0.83
                      outport	 REG2	 1.24
                      outport	 REG2	 1.24
                      internal	 1.24
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 1.42
                      path	 r_sel1	 data_out1	 1.42
                      inport	 w_sel0	 1.57
                      inport	 w_sel1	 1.76
                      inport	 w_sel2	 1.73
                      inport	 w_sel3	 1.99
                      inport	 data_in0	 0.61
                      inport	 data_in1	 0.76
                      inport	 data_in2	 0.82
                      inport	 data_in3	 0.44
                      outport	 REG2	 1.25
                      outport	 REG2	 1.25
                      internal	 1.25
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 1.62
                      path	 r_sel1	 data_out1	 1.62
                      inport	 w_sel0	 1.85
                      inport	 w_sel1	 2.13
                      inport	 w_sel2	 2.12
                      inport	 w_sel3	 2.22
                      inport	 data_in0	 0.53
                      inport	 data_in1	 0.33
                      inport	 data_in2	 0.42
                      inport	 data_in3	 0.35
                      outport	 REG2	 1.48
                      outport	 REG2	 1.48
                      internal	 1.48
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 1.04
                      path	 r_sel1	 data_out1	 1.04
                      inport	 w_sel0	 1.13
                      inport	 w_sel1	 1.13
                      inport	 w_sel2	 1.13
                      inport	 w_sel3	 1.12
                      inport	 data_in0	 0.68
                      inport	 data_in1	 0.74
                      inport	 data_in2	 0.73
                      inport	 data_in3	 0.72
                      outport	 REG14	 1.12
                      outport	 REG14	 1.12
                      internal	 0.98
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 1.08
                      path	 r_sel1	 data_out1	 1.05
                      inport	 w_sel0	 1.27
                      inport	 w_sel1	 1.27
                      inport	 w_sel2	 1.27
                      inport	 w_sel3	 1.28
                      inport	 data_in0	 0.75
                      inport	 data_in1	 0.81
                      inport	 data_in2	 0.77
                      inport	 data_in3	 0.64
                      outport	 REG12	 1.12
                      outport	 REG14	 1.16
                      internal	 1.10
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 1.15
                      path	 r_sel1	 data_out1	 1.15
                      inport	 w_sel0	 1.34
                      inport	 w_sel1	 1.34
                      inport	 w_sel2	 1.33
                      inport	 w_sel3	 1.34
                      inport	 data_in0	 0.66
                      inport	 data_in1	 0.62
                      inport	 data_in2	 0.62
                      inport	 data_in3	 0.60
                      outport	 REG12	 1.16
                      outport	 REG12	 1.16
                      internal	 1.06
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 1.70
                      path	 r_sel1	 data_out1	 1.70
                      inport	 w_sel0	 1.38
                      inport	 w_sel1	 1.87
                      inport	 w_sel2	 1.79
                      inport	 w_sel3	 1.66
                      inport	 data_in0	 0.82
                      inport	 data_in1	 0.86
                      inport	 data_in2	 0.80
                      inport	 data_in3	 0.84
                      outport	 REG2	 1.70
                      outport	 REG2	 1.70
                      internal	 1.70
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 1.83
                      path	 r_sel1	 data_out1	 1.83
                      inport	 w_sel0	 2.10
                      inport	 w_sel1	 2.37
                      inport	 w_sel2	 2.49
                      inport	 w_sel3	 2.18
                      inport	 data_in0	 0.89
                      inport	 data_in1	 1.04
                      inport	 data_in2	 1.11
                      inport	 data_in3	 0.50
                      outport	 REG15	 1.62
                      outport	 REG15	 1.62
                      internal	 1.62
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 1.86
                      path	 r_sel1	 data_out1	 1.83
                      inport	 w_sel0	 2.40
                      inport	 w_sel1	 2.83
                      inport	 w_sel2	 2.80
                      inport	 w_sel3	 2.60
                      inport	 data_in0	 0.93
                      inport	 data_in1	 0.58
                      inport	 data_in2	 0.53
                      inport	 data_in3	 0.63
                      outport	 REG0	 1.63
                      outport	 REG0	 1.63
                      internal	 1.63
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,4,1">
                <max>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 1.90
                    path	 r_sel1	 data_out1	 1.90
                    path	 r_sel2	 data_out2	 1.86
                    path	 r_sel3	 data_out3	 1.90
                    inport	 w_sel0	 0.94
                    inport	 data_in0	 0.25
                    outport	 REG12	 2.15
                    outport	 REG12	 2.15
                    outport	 REG8	 1.89
                    outport	 REG12	 2.15
                    internal	 2.15
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 1.76
                    path	 r_sel1	 data_out1	 1.87
                    path	 r_sel2	 data_out2	 1.87
                    path	 r_sel3	 data_out3	 1.79
                    inport	 w_sel0	 1.12
                    inport	 data_in0	 0.25
                    outport	 REG2	 1.75
                    outport	 REG2	 1.75
                    outport	 REG2	 1.75
                    outport	 REG0	 1.67
                    internal	 1.75
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 1.84
                    path	 r_sel1	 data_out1	 1.84
                    path	 r_sel2	 data_out2	 1.84
                    path	 r_sel3	 data_out3	 1.84
                    inport	 w_sel0	 1.39
                    inport	 data_in0	 0.29
                    outport	 REG0	 1.72
                    outport	 REG0	 1.72
                    outport	 REG0	 1.72
                    outport	 REG0	 1.72
                    internal	 1.72
                  </data>
                </max>
                <min>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 1.90
                    path	 r_sel1	 data_out1	 1.90
                    path	 r_sel2	 data_out2	 1.86
                    path	 r_sel3	 data_out3	 1.90
                    inport	 w_sel0	 0.94
                    inport	 data_in0	 0.25
                    outport	 REG12	 2.15
                    outport	 REG12	 2.15
                    outport	 REG8	 1.89
                    outport	 REG12	 2.15
                    internal	 2.15
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 1.76
                    path	 r_sel1	 data_out1	 1.87
                    path	 r_sel2	 data_out2	 1.87
                    path	 r_sel3	 data_out3	 1.79
                    inport	 w_sel0	 1.12
                    inport	 data_in0	 0.25
                    outport	 REG2	 1.75
                    outport	 REG2	 1.75
                    outport	 REG2	 1.75
                    outport	 REG0	 1.67
                    internal	 1.75
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 1.84
                    path	 r_sel1	 data_out1	 1.84
                    path	 r_sel2	 data_out2	 1.84
                    path	 r_sel3	 data_out3	 1.84
                    inport	 w_sel0	 1.39
                    inport	 data_in0	 0.29
                    outport	 REG0	 1.72
                    outport	 REG0	 1.72
                    outport	 REG0	 1.72
                    outport	 REG0	 1.72
                    internal	 1.72
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 1.27
                      path	 r_sel1	 data_out1	 1.27
                      path	 r_sel2	 data_out2	 1.27
                      path	 r_sel3	 data_out3	 1.27
                      inport	 w_sel0	 1.09
                      inport	 data_in0	 0.24
                      outport	 REG2	 1.29
                      outport	 REG2	 1.29
                      outport	 REG2	 1.29
                      outport	 REG2	 1.29
                      internal	 1.29
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 1.42
                      path	 r_sel1	 data_out1	 1.42
                      path	 r_sel2	 data_out2	 1.42
                      path	 r_sel3	 data_out3	 1.42
                      inport	 w_sel0	 1.10
                      inport	 data_in0	 0.24
                      outport	 REG2	 1.33
                      outport	 REG2	 1.33
                      outport	 REG2	 1.33
                      outport	 REG2	 1.33
                      internal	 1.33
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 1.62
                      path	 r_sel1	 data_out1	 1.62
                      path	 r_sel2	 data_out2	 1.62
                      path	 r_sel3	 data_out3	 1.62
                      inport	 w_sel0	 1.22
                      inport	 data_in0	 0.24
                      outport	 REG2	 1.56
                      outport	 REG2	 1.56
                      outport	 REG2	 1.56
                      outport	 REG2	 1.56
                      internal	 1.56
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 0.80
                      path	 r_sel1	 data_out1	 0.80
                      path	 r_sel2	 data_out2	 0.80
                      path	 r_sel3	 data_out3	 0.88
                      inport	 w_sel0	 0.93
                      inport	 data_in0	 0.51
                      outport	 REG3	 1.18
                      outport	 REG3	 1.18
                      outport	 REG3	 1.18
                      outport	 REG0	 1.17
                      internal	 1.18
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 1.00
                      path	 r_sel1	 data_out1	 1.00
                      path	 r_sel2	 data_out2	 1.00
                      path	 r_sel3	 data_out3	 1.00
                      inport	 w_sel0	 0.89
                      inport	 data_in0	 0.51
                      outport	 REG4	 1.06
                      outport	 REG2	 1.06
                      outport	 REG13	 1.05
                      outport	 REG7	 1.06
                      internal	 1.06
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 1.10
                      path	 r_sel1	 data_out1	 1.06
                      path	 r_sel2	 data_out2	 1.04
                      path	 r_sel3	 data_out3	 1.07
                      inport	 w_sel0	 1.02
                      inport	 data_in0	 0.53
                      outport	 REG1	 1.33
                      outport	 REG5	 1.33
                      outport	 REG5	 1.33
                      outport	 REG2	 1.33
                      internal	 1.33
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 1.90
                      path	 r_sel1	 data_out1	 1.90
                      path	 r_sel2	 data_out2	 1.86
                      path	 r_sel3	 data_out3	 1.90
                      inport	 w_sel0	 0.94
                      inport	 data_in0	 0.25
                      outport	 REG12	 2.15
                      outport	 REG12	 2.15
                      outport	 REG8	 1.89
                      outport	 REG12	 2.15
                      internal	 2.15
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 1.76
                      path	 r_sel1	 data_out1	 1.87
                      path	 r_sel2	 data_out2	 1.87
                      path	 r_sel3	 data_out3	 1.79
                      inport	 w_sel0	 1.12
                      inport	 data_in0	 0.25
                      outport	 REG2	 1.75
                      outport	 REG2	 1.75
                      outport	 REG2	 1.75
                      outport	 REG0	 1.67
                      internal	 1.75
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 1.84
                      path	 r_sel1	 data_out1	 1.84
                      path	 r_sel2	 data_out2	 1.84
                      path	 r_sel3	 data_out3	 1.84
                      inport	 w_sel0	 1.39
                      inport	 data_in0	 0.29
                      outport	 REG0	 1.72
                      outport	 REG0	 1.72
                      outport	 REG0	 1.72
                      outport	 REG0	 1.72
                      internal	 1.72
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,4,2">
                <max>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 1.77
                    path	 r_sel1	 data_out1	 1.77
                    path	 r_sel2	 data_out2	 1.77
                    path	 r_sel3	 data_out3	 1.77
                    inport	 w_sel0	 1.51
                    inport	 w_sel1	 1.78
                    inport	 data_in0	 0.49
                    inport	 data_in1	 0.43
                    outport	 REG6	 1.79
                    outport	 REG6	 1.79
                    outport	 REG6	 1.79
                    outport	 REG6	 1.79
                    internal	 1.79
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 1.79
                    path	 r_sel1	 data_out1	 1.79
                    path	 r_sel2	 data_out2	 1.79
                    path	 r_sel3	 data_out3	 1.79
                    inport	 w_sel0	 1.64
                    inport	 w_sel1	 1.88
                    inport	 data_in0	 0.43
                    inport	 data_in1	 0.49
                    outport	 REG0	 1.67
                    outport	 REG0	 1.67
                    outport	 REG0	 1.67
                    outport	 REG0	 1.67
                    internal	 1.67
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 1.84
                    path	 r_sel1	 data_out1	 1.84
                    path	 r_sel2	 data_out2	 1.84
                    path	 r_sel3	 data_out3	 1.84
                    inport	 w_sel0	 1.82
                    inport	 w_sel1	 2.10
                    inport	 data_in0	 0.43
                    inport	 data_in1	 0.50
                    outport	 REG0	 1.69
                    outport	 REG0	 1.69
                    outport	 REG0	 1.69
                    outport	 REG0	 1.69
                    internal	 1.69
                  </data>
                </max>
                <min>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 1.77
                    path	 r_sel1	 data_out1	 1.77
                    path	 r_sel2	 data_out2	 1.77
                    path	 r_sel3	 data_out3	 1.77
                    inport	 w_sel0	 1.51
                    inport	 w_sel1	 1.78
                    inport	 data_in0	 0.49
                    inport	 data_in1	 0.43
                    outport	 REG6	 1.79
                    outport	 REG6	 1.79
                    outport	 REG6	 1.79
                    outport	 REG6	 1.79
                    internal	 1.79
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 1.79
                    path	 r_sel1	 data_out1	 1.79
                    path	 r_sel2	 data_out2	 1.79
                    path	 r_sel3	 data_out3	 1.79
                    inport	 w_sel0	 1.64
                    inport	 w_sel1	 1.88
                    inport	 data_in0	 0.43
                    inport	 data_in1	 0.49
                    outport	 REG0	 1.67
                    outport	 REG0	 1.67
                    outport	 REG0	 1.67
                    outport	 REG0	 1.67
                    internal	 1.67
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 1.84
                    path	 r_sel1	 data_out1	 1.84
                    path	 r_sel2	 data_out2	 1.84
                    path	 r_sel3	 data_out3	 1.84
                    inport	 w_sel0	 1.82
                    inport	 w_sel1	 2.10
                    inport	 data_in0	 0.43
                    inport	 data_in1	 0.50
                    outport	 REG0	 1.69
                    outport	 REG0	 1.69
                    outport	 REG0	 1.69
                    outport	 REG0	 1.69
                    internal	 1.69
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 1.27
                      path	 r_sel1	 data_out1	 1.27
                      path	 r_sel2	 data_out2	 1.27
                      path	 r_sel3	 data_out3	 1.27
                      inport	 w_sel0	 1.31
                      inport	 w_sel1	 1.67
                      inport	 data_in0	 0.27
                      inport	 data_in1	 0.42
                      outport	 REG2	 1.29
                      outport	 REG2	 1.29
                      outport	 REG2	 1.29
                      outport	 REG2	 1.29
                      internal	 1.29
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 1.42
                      path	 r_sel1	 data_out1	 1.42
                      path	 r_sel2	 data_out2	 1.42
                      path	 r_sel3	 data_out3	 1.42
                      inport	 w_sel0	 1.38
                      inport	 w_sel1	 1.79
                      inport	 data_in0	 0.27
                      inport	 data_in1	 0.42
                      outport	 REG2	 1.33
                      outport	 REG2	 1.33
                      outport	 REG2	 1.33
                      outport	 REG2	 1.33
                      internal	 1.33
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 1.62
                      path	 r_sel1	 data_out1	 1.62
                      path	 r_sel2	 data_out2	 1.62
                      path	 r_sel3	 data_out3	 1.62
                      inport	 w_sel0	 1.54
                      inport	 w_sel1	 2.02
                      inport	 data_in0	 0.28
                      inport	 data_in1	 0.43
                      outport	 REG2	 1.56
                      outport	 REG2	 1.56
                      outport	 REG2	 1.56
                      outport	 REG2	 1.56
                      internal	 1.56
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 1.06
                      path	 r_sel1	 data_out1	 1.00
                      path	 r_sel2	 data_out2	 1.04
                      path	 r_sel3	 data_out3	 1.07
                      inport	 w_sel0	 0.94
                      inport	 w_sel1	 0.94
                      inport	 data_in0	 0.53
                      inport	 data_in1	 0.57
                      outport	 REG10	 1.10
                      outport	 REG10	 1.10
                      outport	 REG10	 1.10
                      outport	 REG3	 1.10
                      internal	 1.10
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 1.02
                      path	 r_sel1	 data_out1	 1.03
                      path	 r_sel2	 data_out2	 1.03
                      path	 r_sel3	 data_out3	 1.02
                      inport	 w_sel0	 0.99
                      inport	 w_sel1	 0.99
                      inport	 data_in0	 0.52
                      inport	 data_in1	 0.52
                      outport	 REG8	 1.12
                      outport	 REG8	 1.12
                      outport	 REG8	 1.12
                      outport	 REG2	 1.11
                      internal	 1.12
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 1.16
                      path	 r_sel1	 data_out1	 1.15
                      path	 r_sel2	 data_out2	 1.15
                      path	 r_sel3	 data_out3	 1.15
                      inport	 w_sel0	 1.00
                      inport	 w_sel1	 1.00
                      inport	 data_in0	 0.53
                      inport	 data_in1	 0.52
                      outport	 REG12	 1.16
                      outport	 REG12	 1.16
                      outport	 REG12	 1.16
                      outport	 REG12	 1.16
                      internal	 1.16
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 1.77
                      path	 r_sel1	 data_out1	 1.77
                      path	 r_sel2	 data_out2	 1.77
                      path	 r_sel3	 data_out3	 1.77
                      inport	 w_sel0	 1.51
                      inport	 w_sel1	 1.78
                      inport	 data_in0	 0.49
                      inport	 data_in1	 0.43
                      outport	 REG6	 1.79
                      outport	 REG6	 1.79
                      outport	 REG6	 1.79
                      outport	 REG6	 1.79
                      internal	 1.79
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 1.79
                      path	 r_sel1	 data_out1	 1.79
                      path	 r_sel2	 data_out2	 1.79
                      path	 r_sel3	 data_out3	 1.79
                      inport	 w_sel0	 1.64
                      inport	 w_sel1	 1.88
                      inport	 data_in0	 0.43
                      inport	 data_in1	 0.49
                      outport	 REG0	 1.67
                      outport	 REG0	 1.67
                      outport	 REG0	 1.67
                      outport	 REG0	 1.67
                      internal	 1.67
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 1.84
                      path	 r_sel1	 data_out1	 1.84
                      path	 r_sel2	 data_out2	 1.84
                      path	 r_sel3	 data_out3	 1.84
                      inport	 w_sel0	 1.82
                      inport	 w_sel1	 2.10
                      inport	 data_in0	 0.43
                      inport	 data_in1	 0.50
                      outport	 REG0	 1.69
                      outport	 REG0	 1.69
                      outport	 REG0	 1.69
                      outport	 REG0	 1.69
                      internal	 1.69
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,4,4">
                <max>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 1.70
                    path	 r_sel1	 data_out1	 1.70
                    path	 r_sel2	 data_out2	 1.70
                    path	 r_sel3	 data_out3	 1.70
                    inport	 w_sel0	 1.37
                    inport	 w_sel1	 1.87
                    inport	 w_sel2	 1.75
                    inport	 w_sel3	 1.66
                    inport	 data_in0	 0.82
                    inport	 data_in1	 0.86
                    inport	 data_in2	 0.80
                    inport	 data_in3	 0.84
                    outport	 REG2	 1.73
                    outport	 REG2	 1.73
                    outport	 REG2	 1.73
                    outport	 REG2	 1.73
                    internal	 1.73
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 1.77
                    path	 r_sel1	 data_out1	 1.80
                    path	 r_sel2	 data_out2	 1.77
                    path	 r_sel3	 data_out3	 1.77
                    inport	 w_sel0	 2.08
                    inport	 w_sel1	 2.39
                    inport	 w_sel2	 2.49
                    inport	 w_sel3	 2.21
                    inport	 data_in0	 0.89
                    inport	 data_in1	 1.04
                    inport	 data_in2	 1.11
                    inport	 data_in3	 0.50
                    outport	 REG0	 1.70
                    outport	 REG0	 1.70
                    outport	 REG0	 1.70
                    outport	 REG0	 1.70
                    internal	 1.70
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 1.83
                    path	 r_sel1	 data_out1	 1.83
                    path	 r_sel2	 data_out2	 1.83
                    path	 r_sel3	 data_out3	 1.86
                    inport	 w_sel0	 2.52
                    inport	 w_sel1	 2.96
                    inport	 w_sel2	 2.91
                    inport	 w_sel3	 2.61
                    inport	 data_in0	 0.96
                    inport	 data_in1	 0.58
                    inport	 data_in2	 0.53
                    inport	 data_in3	 0.63
                    outport	 REG0	 1.75
                    outport	 REG0	 1.75
                    outport	 REG0	 1.75
                    outport	 REG0	 1.72
                    internal	 1.75
                  </data>
                </max>
                <min>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 1.70
                    path	 r_sel1	 data_out1	 1.70
                    path	 r_sel2	 data_out2	 1.70
                    path	 r_sel3	 data_out3	 1.70
                    inport	 w_sel0	 1.37
                    inport	 w_sel1	 1.87
                    inport	 w_sel2	 1.75
                    inport	 w_sel3	 1.66
                    inport	 data_in0	 0.82
                    inport	 data_in1	 0.86
                    inport	 data_in2	 0.80
                    inport	 data_in3	 0.84
                    outport	 REG2	 1.73
                    outport	 REG2	 1.73
                    outport	 REG2	 1.73
                    outport	 REG2	 1.73
                    internal	 1.73
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 1.77
                    path	 r_sel1	 data_out1	 1.80
                    path	 r_sel2	 data_out2	 1.77
                    path	 r_sel3	 data_out3	 1.77
                    inport	 w_sel0	 2.08
                    inport	 w_sel1	 2.39
                    inport	 w_sel2	 2.49
                    inport	 w_sel3	 2.21
                    inport	 data_in0	 0.89
                    inport	 data_in1	 1.04
                    inport	 data_in2	 1.11
                    inport	 data_in3	 0.50
                    outport	 REG0	 1.70
                    outport	 REG0	 1.70
                    outport	 REG0	 1.70
                    outport	 REG0	 1.70
                    internal	 1.70
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 1.83
                    path	 r_sel1	 data_out1	 1.83
                    path	 r_sel2	 data_out2	 1.83
                    path	 r_sel3	 data_out3	 1.86
                    inport	 w_sel0	 2.52
                    inport	 w_sel1	 2.96
                    inport	 w_sel2	 2.91
                    inport	 w_sel3	 2.61
                    inport	 data_in0	 0.96
                    inport	 data_in1	 0.58
                    inport	 data_in2	 0.53
                    inport	 data_in3	 0.63
                    outport	 REG0	 1.75
                    outport	 REG0	 1.75
                    outport	 REG0	 1.75
                    outport	 REG0	 1.72
                    internal	 1.75
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 1.27
                      path	 r_sel1	 data_out1	 1.27
                      path	 r_sel2	 data_out2	 1.27
                      path	 r_sel3	 data_out3	 1.27
                      inport	 w_sel0	 1.39
                      inport	 w_sel1	 1.61
                      inport	 w_sel2	 1.56
                      inport	 w_sel3	 1.44
                      inport	 data_in0	 0.81
                      inport	 data_in1	 0.85
                      inport	 data_in2	 0.79
                      inport	 data_in3	 0.83
                      outport	 REG2	 1.31
                      outport	 REG2	 1.31
                      outport	 REG2	 1.31
                      outport	 REG2	 1.31
                      internal	 1.31
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 1.42
                      path	 r_sel1	 data_out1	 1.42
                      path	 r_sel2	 data_out2	 1.42
                      path	 r_sel3	 data_out3	 1.42
                      inport	 w_sel0	 1.57
                      inport	 w_sel1	 1.76
                      inport	 w_sel2	 1.73
                      inport	 w_sel3	 1.99
                      inport	 data_in0	 0.61
                      inport	 data_in1	 0.76
                      inport	 data_in2	 0.82
                      inport	 data_in3	 0.44
                      outport	 REG2	 1.33
                      outport	 REG2	 1.33
                      outport	 REG2	 1.33
                      outport	 REG2	 1.33
                      internal	 1.33
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 1.65
                      path	 r_sel1	 data_out1	 1.65
                      path	 r_sel2	 data_out2	 1.65
                      path	 r_sel3	 data_out3	 1.65
                      inport	 w_sel0	 1.90
                      inport	 w_sel1	 2.08
                      inport	 w_sel2	 2.15
                      inport	 w_sel3	 2.28
                      inport	 data_in0	 0.53
                      inport	 data_in1	 0.33
                      inport	 data_in2	 0.42
                      inport	 data_in3	 0.35
                      outport	 REG2	 1.45
                      outport	 REG2	 1.45
                      outport	 REG2	 1.45
                      outport	 REG2	 1.45
                      internal	 1.45
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 1.05
                      path	 r_sel1	 data_out1	 1.06
                      path	 r_sel2	 data_out2	 1.05
                      path	 r_sel3	 data_out3	 1.05
                      inport	 w_sel0	 1.06
                      inport	 w_sel1	 1.07
                      inport	 w_sel2	 1.07
                      inport	 w_sel3	 1.07
                      inport	 data_in0	 0.64
                      inport	 data_in1	 0.79
                      inport	 data_in2	 0.68
                      inport	 data_in3	 0.67
                      outport	 REG10	 1.18
                      outport	 REG10	 1.18
                      outport	 REG10	 1.18
                      outport	 REG12	 1.18
                      internal	 1.18
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 1.11
                      path	 r_sel1	 data_out1	 1.11
                      path	 r_sel2	 data_out2	 1.11
                      path	 r_sel3	 data_out3	 1.15
                      inport	 w_sel0	 1.24
                      inport	 w_sel1	 1.24
                      inport	 w_sel2	 1.24
                      inport	 w_sel3	 1.24
                      inport	 data_in0	 0.66
                      inport	 data_in1	 0.82
                      inport	 data_in2	 0.72
                      inport	 data_in3	 0.64
                      outport	 REG12	 1.22
                      outport	 REG12	 1.22
                      outport	 REG12	 1.22
                      outport	 REG12	 1.22
                      internal	 1.11
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 1.22
                      path	 r_sel1	 data_out1	 1.22
                      path	 r_sel2	 data_out2	 1.22
                      path	 r_sel3	 data_out3	 1.22
                      inport	 w_sel0	 1.38
                      inport	 w_sel1	 1.38
                      inport	 w_sel2	 1.38
                      inport	 w_sel3	 1.37
                      inport	 data_in0	 0.64
                      inport	 data_in1	 0.57
                      inport	 data_in2	 0.61
                      inport	 data_in3	 0.58
                      outport	 REG12	 1.27
                      outport	 REG12	 1.27
                      outport	 REG12	 1.27
                      outport	 REG12	 1.27
                      internal	 1.14
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 1.70
                      path	 r_sel1	 data_out1	 1.70
                      path	 r_sel2	 data_out2	 1.70
                      path	 r_sel3	 data_out3	 1.70
                      inport	 w_sel0	 1.37
                      inport	 w_sel1	 1.87
                      inport	 w_sel2	 1.75
                      inport	 w_sel3	 1.66
                      inport	 data_in0	 0.82
                      inport	 data_in1	 0.86
                      inport	 data_in2	 0.80
                      inport	 data_in3	 0.84
                      outport	 REG2	 1.73
                      outport	 REG2	 1.73
                      outport	 REG2	 1.73
                      outport	 REG2	 1.73
                      internal	 1.73
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 1.77
                      path	 r_sel1	 data_out1	 1.80
                      path	 r_sel2	 data_out2	 1.77
                      path	 r_sel3	 data_out3	 1.77
                      inport	 w_sel0	 2.08
                      inport	 w_sel1	 2.39
                      inport	 w_sel2	 2.49
                      inport	 w_sel3	 2.21
                      inport	 data_in0	 0.89
                      inport	 data_in1	 1.04
                      inport	 data_in2	 1.11
                      inport	 data_in3	 0.50
                      outport	 REG0	 1.70
                      outport	 REG0	 1.70
                      outport	 REG0	 1.70
                      outport	 REG0	 1.70
                      internal	 1.70
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 1.83
                      path	 r_sel1	 data_out1	 1.83
                      path	 r_sel2	 data_out2	 1.83
                      path	 r_sel3	 data_out3	 1.86
                      inport	 w_sel0	 2.52
                      inport	 w_sel1	 2.96
                      inport	 w_sel2	 2.91
                      inport	 w_sel3	 2.61
                      inport	 data_in0	 0.96
                      inport	 data_in1	 0.58
                      inport	 data_in2	 0.53
                      inport	 data_in3	 0.63
                      outport	 REG0	 1.75
                      outport	 REG0	 1.75
                      outport	 REG0	 1.75
                      outport	 REG0	 1.72
                      internal	 1.75
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,1,1">
                <max>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 2.17
                    inport	 w_sel0	 1.19
                    inport	 data_in0	 0.25
                    outport	 REG20	 1.57
                    internal	 1.57
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 2.56
                    inport	 w_sel0	 1.38
                    inport	 data_in0	 0.25
                    outport	 REG13	 2.21
                    internal	 2.21
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 2.62
                    inport	 w_sel0	 1.56
                    inport	 data_in0	 0.30
                    outport	 REG30	 2.23
                    internal	 2.23
                  </data>
                </max>
                <min>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 2.17
                    inport	 w_sel0	 1.19
                    inport	 data_in0	 0.25
                    outport	 REG20	 1.57
                    internal	 1.57
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 2.56
                    inport	 w_sel0	 1.38
                    inport	 data_in0	 0.25
                    outport	 REG13	 2.21
                    internal	 2.21
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 2.62
                    inport	 w_sel0	 1.56
                    inport	 data_in0	 0.30
                    outport	 REG30	 2.23
                    internal	 2.23
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 1.39
                      inport	 w_sel0	 1.21
                      inport	 data_in0	 0.24
                      outport	 REG26	 1.24
                      internal	 1.24
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 1.54
                      inport	 w_sel0	 1.25
                      inport	 data_in0	 0.24
                      outport	 REG26	 1.27
                      internal	 1.27
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 1.89
                      inport	 w_sel0	 1.34
                      inport	 data_in0	 0.24
                      outport	 REG26	 1.58
                      internal	 1.58
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 1.15
                      inport	 w_sel0	 0.97
                      inport	 data_in0	 0.48
                      outport	 REG1	 1.16
                      internal	 1.16
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 1.10
                      inport	 w_sel0	 0.94
                      inport	 data_in0	 0.47
                      outport	 REG14	 1.11
                      internal	 1.11
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 1.24
                      inport	 w_sel0	 1.07
                      inport	 data_in0	 0.48
                      outport	 REG2	 1.23
                      internal	 1.23
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 2.17
                      inport	 w_sel0	 1.19
                      inport	 data_in0	 0.25
                      outport	 REG20	 1.57
                      internal	 1.57
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 2.56
                      inport	 w_sel0	 1.38
                      inport	 data_in0	 0.25
                      outport	 REG13	 2.21
                      internal	 2.21
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 2.62
                      inport	 w_sel0	 1.56
                      inport	 data_in0	 0.30
                      outport	 REG30	 2.23
                      internal	 2.23
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,1,2">
                <max>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 1.92
                    inport	 w_sel0	 1.57
                    inport	 w_sel1	 2.13
                    inport	 data_in0	 0.49
                    inport	 data_in1	 0.49
                    outport	 REG8	 1.30
                    internal	 1.30
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 2.40
                    inport	 w_sel0	 1.76
                    inport	 w_sel1	 2.30
                    inport	 data_in0	 0.43
                    inport	 data_in1	 0.49
                    outport	 REG9	 1.89
                    internal	 1.89
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 2.62
                    inport	 w_sel0	 1.83
                    inport	 w_sel1	 2.41
                    inport	 data_in0	 0.44
                    inport	 data_in1	 0.50
                    outport	 REG4	 2.21
                    internal	 2.21
                  </data>
                </max>
                <min>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 1.92
                    inport	 w_sel0	 1.57
                    inport	 w_sel1	 2.13
                    inport	 data_in0	 0.49
                    inport	 data_in1	 0.49
                    outport	 REG8	 1.30
                    internal	 1.30
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 2.40
                    inport	 w_sel0	 1.76
                    inport	 w_sel1	 2.30
                    inport	 data_in0	 0.43
                    inport	 data_in1	 0.49
                    outport	 REG9	 1.89
                    internal	 1.89
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 2.62
                    inport	 w_sel0	 1.83
                    inport	 w_sel1	 2.41
                    inport	 data_in0	 0.44
                    inport	 data_in1	 0.50
                    outport	 REG4	 2.21
                    internal	 2.21
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 1.59
                      inport	 w_sel0	 1.44
                      inport	 w_sel1	 1.96
                      inport	 data_in0	 0.27
                      inport	 data_in1	 0.42
                      outport	 REG26	 1.24
                      internal	 1.24
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 1.75
                      inport	 w_sel0	 1.52
                      inport	 w_sel1	 2.09
                      inport	 data_in0	 0.27
                      inport	 data_in1	 0.42
                      outport	 REG26	 1.27
                      internal	 1.27
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 1.87
                      inport	 w_sel0	 1.73
                      inport	 w_sel1	 2.38
                      inport	 data_in0	 0.28
                      inport	 data_in1	 0.43
                      outport	 REG26	 1.58
                      internal	 1.58
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 1.25
                      inport	 w_sel0	 1.09
                      inport	 w_sel1	 1.09
                      inport	 data_in0	 0.55
                      inport	 data_in1	 0.51
                      outport	 REG25	 1.26
                      internal	 1.26
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 1.19
                      inport	 w_sel0	 1.08
                      inport	 w_sel1	 1.08
                      inport	 data_in0	 0.58
                      inport	 data_in1	 0.56
                      outport	 REG10	 1.22
                      internal	 1.22
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 1.31
                      inport	 w_sel0	 1.19
                      inport	 w_sel1	 1.19
                      inport	 data_in0	 0.60
                      inport	 data_in1	 0.57
                      outport	 REG27	 1.23
                      internal	 1.23
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 1.92
                      inport	 w_sel0	 1.57
                      inport	 w_sel1	 2.13
                      inport	 data_in0	 0.49
                      inport	 data_in1	 0.49
                      outport	 REG8	 1.30
                      internal	 1.30
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 2.40
                      inport	 w_sel0	 1.76
                      inport	 w_sel1	 2.30
                      inport	 data_in0	 0.43
                      inport	 data_in1	 0.49
                      outport	 REG9	 1.89
                      internal	 1.89
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 2.62
                      inport	 w_sel0	 1.83
                      inport	 w_sel1	 2.41
                      inport	 data_in0	 0.44
                      inport	 data_in1	 0.50
                      outport	 REG4	 2.21
                      internal	 2.21
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,1,4">
                <max>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 2.05
                    inport	 w_sel0	 1.52
                    inport	 w_sel1	 2.41
                    inport	 w_sel2	 2.17
                    inport	 w_sel3	 2.01
                    inport	 data_in0	 1.03
                    inport	 data_in1	 1.05
                    inport	 data_in2	 1.10
                    inport	 data_in3	 0.99
                    outport	 REG26	 1.66
                    internal	 1.66
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 2.38
                    inport	 w_sel0	 2.77
                    inport	 w_sel1	 3.26
                    inport	 w_sel2	 3.22
                    inport	 w_sel3	 3.15
                    inport	 data_in0	 0.58
                    inport	 data_in1	 0.53
                    inport	 data_in2	 0.63
                    inport	 data_in3	 1.12
                    outport	 REG31	 2.10
                    internal	 2.10
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 1.91
                    inport	 w_sel0	 2.65
                    inport	 w_sel1	 2.99
                    inport	 w_sel2	 2.95
                    inport	 w_sel3	 2.99
                    inport	 data_in0	 1.18
                    inport	 data_in1	 0.63
                    inport	 data_in2	 0.72
                    inport	 data_in3	 0.65
                    outport	 REG26	 1.49
                    internal	 1.56
                  </data>
                </max>
                <min>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 2.05
                    inport	 w_sel0	 1.52
                    inport	 w_sel1	 2.41
                    inport	 w_sel2	 2.17
                    inport	 w_sel3	 2.01
                    inport	 data_in0	 1.03
                    inport	 data_in1	 1.05
                    inport	 data_in2	 1.10
                    inport	 data_in3	 0.99
                    outport	 REG26	 1.66
                    internal	 1.66
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 2.38
                    inport	 w_sel0	 2.77
                    inport	 w_sel1	 3.26
                    inport	 w_sel2	 3.22
                    inport	 w_sel3	 3.15
                    inport	 data_in0	 0.58
                    inport	 data_in1	 0.53
                    inport	 data_in2	 0.63
                    inport	 data_in3	 1.12
                    outport	 REG31	 2.10
                    internal	 2.10
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 1.91
                    inport	 w_sel0	 2.65
                    inport	 w_sel1	 2.99
                    inport	 w_sel2	 2.95
                    inport	 w_sel3	 2.99
                    inport	 data_in0	 1.18
                    inport	 data_in1	 0.63
                    inport	 data_in2	 0.72
                    inport	 data_in3	 0.65
                    outport	 REG26	 1.49
                    internal	 1.56
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 1.49
                      inport	 w_sel0	 1.39
                      inport	 w_sel1	 1.83
                      inport	 w_sel2	 1.71
                      inport	 w_sel3	 1.65
                      inport	 data_in0	 0.82
                      inport	 data_in1	 0.84
                      inport	 data_in2	 0.96
                      inport	 data_in3	 0.78
                      outport	 REG26	 1.26
                      internal	 1.26
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 1.76
                      inport	 w_sel0	 2.13
                      inport	 w_sel1	 2.32
                      inport	 w_sel2	 2.25
                      inport	 w_sel3	 2.61
                      inport	 data_in0	 0.33
                      inport	 data_in1	 0.42
                      inport	 data_in2	 0.35
                      inport	 data_in3	 0.52
                      outport	 REG26	 1.46
                      internal	 1.46
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 1.89
                      inport	 w_sel0	 2.10
                      inport	 w_sel1	 2.38
                      inport	 w_sel2	 2.30
                      inport	 w_sel3	 2.38
                      inport	 data_in0	 0.54
                      inport	 data_in1	 0.35
                      inport	 data_in2	 0.43
                      inport	 data_in3	 0.37
                      outport	 REG26	 1.60
                      internal	 1.60
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 1.23
                      inport	 w_sel0	 1.31
                      inport	 w_sel1	 1.31
                      inport	 w_sel2	 1.31
                      inport	 w_sel3	 1.31
                      inport	 data_in0	 0.62
                      inport	 data_in1	 0.75
                      inport	 data_in2	 0.71
                      inport	 data_in3	 0.66
                      outport	 REG29	 1.28
                      internal	 1.28
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 1.26
                      inport	 w_sel0	 1.36
                      inport	 w_sel1	 1.36
                      inport	 w_sel2	 1.36
                      inport	 w_sel3	 1.36
                      inport	 data_in0	 0.61
                      inport	 data_in1	 0.69
                      inport	 data_in2	 0.72
                      inport	 data_in3	 0.74
                      outport	 REG4	 1.26
                      internal	 1.26
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 1.31
                      inport	 w_sel0	 1.44
                      inport	 w_sel1	 1.44
                      inport	 w_sel2	 1.45
                      inport	 w_sel3	 1.45
                      inport	 data_in0	 0.60
                      inport	 data_in1	 0.72
                      inport	 data_in2	 0.81
                      inport	 data_in3	 0.59
                      outport	 REG18	 1.24
                      internal	 1.09
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 2.05
                      inport	 w_sel0	 1.52
                      inport	 w_sel1	 2.41
                      inport	 w_sel2	 2.17
                      inport	 w_sel3	 2.01
                      inport	 data_in0	 1.03
                      inport	 data_in1	 1.05
                      inport	 data_in2	 1.10
                      inport	 data_in3	 0.99
                      outport	 REG26	 1.66
                      internal	 1.66
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 2.38
                      inport	 w_sel0	 2.77
                      inport	 w_sel1	 3.26
                      inport	 w_sel2	 3.22
                      inport	 w_sel3	 3.15
                      inport	 data_in0	 0.58
                      inport	 data_in1	 0.53
                      inport	 data_in2	 0.63
                      inport	 data_in3	 1.12
                      outport	 REG31	 2.10
                      internal	 2.10
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 1.91
                      inport	 w_sel0	 2.65
                      inport	 w_sel1	 2.99
                      inport	 w_sel2	 2.95
                      inport	 w_sel3	 2.99
                      inport	 data_in0	 1.18
                      inport	 data_in1	 0.63
                      inport	 data_in2	 0.72
                      inport	 data_in3	 0.65
                      outport	 REG26	 1.49
                      internal	 1.56
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,2,1">
                <max>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 1.91
                    path	 r_sel1	 data_out1	 2.06
                    inport	 w_sel0	 1.19
                    inport	 data_in0	 0.25
                    outport	 REG26	 1.48
                    outport	 REG26	 1.67
                    internal	 1.67
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 1.95
                    path	 r_sel1	 data_out1	 1.95
                    inport	 w_sel0	 1.26
                    inport	 data_in0	 0.29
                    outport	 REG26	 1.52
                    outport	 REG26	 1.52
                    internal	 1.52
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 2.02
                    path	 r_sel1	 data_out1	 2.02
                    inport	 w_sel0	 1.56
                    inport	 data_in0	 0.30
                    outport	 REG12	 1.53
                    outport	 REG12	 1.53
                    internal	 1.53
                  </data>
                </max>
                <min>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 1.91
                    path	 r_sel1	 data_out1	 2.06
                    inport	 w_sel0	 1.19
                    inport	 data_in0	 0.25
                    outport	 REG26	 1.48
                    outport	 REG26	 1.67
                    internal	 1.67
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 1.95
                    path	 r_sel1	 data_out1	 1.95
                    inport	 w_sel0	 1.26
                    inport	 data_in0	 0.29
                    outport	 REG26	 1.52
                    outport	 REG26	 1.52
                    internal	 1.52
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 2.02
                    path	 r_sel1	 data_out1	 2.02
                    inport	 w_sel0	 1.56
                    inport	 data_in0	 0.30
                    outport	 REG12	 1.53
                    outport	 REG12	 1.53
                    internal	 1.53
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 1.43
                      path	 r_sel1	 data_out1	 1.43
                      inport	 w_sel0	 1.21
                      inport	 data_in0	 0.24
                      outport	 REG26	 1.22
                      outport	 REG26	 1.22
                      internal	 1.22
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 1.58
                      path	 r_sel1	 data_out1	 1.58
                      inport	 w_sel0	 1.25
                      inport	 data_in0	 0.24
                      outport	 REG26	 1.25
                      outport	 REG26	 1.25
                      internal	 1.25
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 1.88
                      path	 r_sel1	 data_out1	 1.87
                      inport	 w_sel0	 1.34
                      inport	 data_in0	 0.24
                      outport	 REG26	 1.61
                      outport	 REG26	 1.61
                      internal	 1.61
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 1.17
                      path	 r_sel1	 data_out1	 1.15
                      inport	 w_sel0	 0.97
                      inport	 data_in0	 0.48
                      outport	 REG1	 1.17
                      outport	 REG7	 1.18
                      internal	 1.18
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 1.20
                      path	 r_sel1	 data_out1	 1.20
                      inport	 w_sel0	 1.03
                      inport	 data_in0	 0.48
                      outport	 REG0	 1.21
                      outport	 REG0	 1.21
                      internal	 1.21
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 1.23
                      path	 r_sel1	 data_out1	 1.23
                      inport	 w_sel0	 1.07
                      inport	 data_in0	 0.49
                      outport	 REG6	 1.23
                      outport	 REG16	 1.23
                      internal	 1.23
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 1.91
                      path	 r_sel1	 data_out1	 2.06
                      inport	 w_sel0	 1.19
                      inport	 data_in0	 0.25
                      outport	 REG26	 1.48
                      outport	 REG26	 1.67
                      internal	 1.67
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 1.95
                      path	 r_sel1	 data_out1	 1.95
                      inport	 w_sel0	 1.26
                      inport	 data_in0	 0.29
                      outport	 REG26	 1.52
                      outport	 REG26	 1.52
                      internal	 1.52
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 2.02
                      path	 r_sel1	 data_out1	 2.02
                      inport	 w_sel0	 1.56
                      inport	 data_in0	 0.30
                      outport	 REG12	 1.53
                      outport	 REG12	 1.53
                      internal	 1.53
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,2,2">
                <max>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 2.70
                    path	 r_sel1	 data_out1	 2.02
                    inport	 w_sel0	 1.57
                    inport	 w_sel1	 2.13
                    inport	 data_in0	 0.49
                    inport	 data_in1	 0.49
                    outport	 REG28	 2.49
                    outport	 REG26	 1.67
                    internal	 2.49
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 1.88
                    path	 r_sel1	 data_out1	 1.88
                    inport	 w_sel0	 1.79
                    inport	 w_sel1	 2.33
                    inport	 data_in0	 0.49
                    inport	 data_in1	 0.49
                    outport	 REG26	 1.50
                    outport	 REG26	 1.50
                    internal	 1.50
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 1.94
                    path	 r_sel1	 data_out1	 1.94
                    inport	 w_sel0	 1.83
                    inport	 w_sel1	 2.41
                    inport	 data_in0	 0.50
                    inport	 data_in1	 0.50
                    outport	 REG26	 1.52
                    outport	 REG26	 1.52
                    internal	 1.52
                  </data>
                </max>
                <min>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 2.70
                    path	 r_sel1	 data_out1	 2.02
                    inport	 w_sel0	 1.57
                    inport	 w_sel1	 2.13
                    inport	 data_in0	 0.49
                    inport	 data_in1	 0.49
                    outport	 REG28	 2.49
                    outport	 REG26	 1.67
                    internal	 2.49
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 1.88
                    path	 r_sel1	 data_out1	 1.88
                    inport	 w_sel0	 1.79
                    inport	 w_sel1	 2.33
                    inport	 data_in0	 0.49
                    inport	 data_in1	 0.49
                    outport	 REG26	 1.50
                    outport	 REG26	 1.50
                    internal	 1.50
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 1.94
                    path	 r_sel1	 data_out1	 1.94
                    inport	 w_sel0	 1.83
                    inport	 w_sel1	 2.41
                    inport	 data_in0	 0.50
                    inport	 data_in1	 0.50
                    outport	 REG26	 1.52
                    outport	 REG26	 1.52
                    internal	 1.52
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 1.70
                      path	 r_sel1	 data_out1	 1.70
                      inport	 w_sel0	 1.50
                      inport	 w_sel1	 2.03
                      inport	 data_in0	 0.27
                      inport	 data_in1	 0.42
                      outport	 REG26	 1.25
                      outport	 REG26	 1.25
                      internal	 1.25
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 1.81
                      path	 r_sel1	 data_out1	 1.81
                      inport	 w_sel0	 1.52
                      inport	 w_sel1	 2.00
                      inport	 data_in0	 0.28
                      inport	 data_in1	 0.43
                      outport	 REG26	 1.48
                      outport	 REG26	 1.48
                      internal	 1.48
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 1.87
                      path	 r_sel1	 data_out1	 1.87
                      inport	 w_sel0	 1.75
                      inport	 w_sel1	 2.36
                      inport	 data_in0	 0.28
                      inport	 data_in1	 0.43
                      outport	 REG26	 1.61
                      outport	 REG26	 1.61
                      internal	 1.61
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 1.20
                      path	 r_sel1	 data_out1	 1.19
                      inport	 w_sel0	 1.05
                      inport	 w_sel1	 1.05
                      inport	 data_in0	 0.60
                      inport	 data_in1	 0.62
                      outport	 REG7	 1.21
                      outport	 REG7	 1.20
                      internal	 1.21
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 1.24
                      path	 r_sel1	 data_out1	 1.21
                      inport	 w_sel0	 1.08
                      inport	 w_sel1	 1.08
                      inport	 data_in0	 0.53
                      inport	 data_in1	 0.53
                      outport	 REG3	 1.22
                      outport	 REG29	 1.23
                      internal	 1.23
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 1.33
                      path	 r_sel1	 data_out1	 1.33
                      inport	 w_sel0	 1.17
                      inport	 w_sel1	 1.17
                      inport	 data_in0	 0.65
                      inport	 data_in1	 0.60
                      outport	 REG0	 1.27
                      outport	 REG10	 1.32
                      internal	 1.32
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 2.70
                      path	 r_sel1	 data_out1	 2.02
                      inport	 w_sel0	 1.57
                      inport	 w_sel1	 2.13
                      inport	 data_in0	 0.49
                      inport	 data_in1	 0.49
                      outport	 REG28	 2.49
                      outport	 REG26	 1.67
                      internal	 2.49
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 1.88
                      path	 r_sel1	 data_out1	 1.88
                      inport	 w_sel0	 1.79
                      inport	 w_sel1	 2.33
                      inport	 data_in0	 0.49
                      inport	 data_in1	 0.49
                      outport	 REG26	 1.50
                      outport	 REG26	 1.50
                      internal	 1.50
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 1.94
                      path	 r_sel1	 data_out1	 1.94
                      inport	 w_sel0	 1.83
                      inport	 w_sel1	 2.41
                      inport	 data_in0	 0.50
                      inport	 data_in1	 0.50
                      outport	 REG26	 1.52
                      outport	 REG26	 1.52
                      internal	 1.52
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,2,4">
                <max>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 2.04
                    path	 r_sel1	 data_out1	 2.00
                    inport	 w_sel0	 1.40
                    inport	 w_sel1	 2.33
                    inport	 w_sel2	 2.11
                    inport	 w_sel3	 1.95
                    inport	 data_in0	 1.03
                    inport	 data_in1	 1.05
                    inport	 data_in2	 1.10
                    inport	 data_in3	 0.99
                    outport	 REG10	 1.69
                    outport	 REG26	 1.69
                    internal	 1.69
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 2.13
                    path	 r_sel1	 data_out1	 2.20
                    inport	 w_sel0	 2.69
                    inport	 w_sel1	 3.27
                    inport	 w_sel2	 3.01
                    inport	 w_sel3	 3.02
                    inport	 data_in0	 0.58
                    inport	 data_in1	 0.53
                    inport	 data_in2	 0.63
                    inport	 data_in3	 1.12
                    outport	 REG26	 1.71
                    outport	 REG26	 1.71
                    internal	 1.71
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 1.94
                    path	 r_sel1	 data_out1	 2.12
                    inport	 w_sel0	 2.84
                    inport	 w_sel1	 3.19
                    inport	 w_sel2	 3.31
                    inport	 w_sel3	 3.15
                    inport	 data_in0	 0.99
                    inport	 data_in1	 0.63
                    inport	 data_in2	 0.72
                    inport	 data_in3	 0.65
                    outport	 REG26	 1.52
                    outport	 REG26	 1.52
                    internal	 1.56
                  </data>
                </max>
                <min>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 2.04
                    path	 r_sel1	 data_out1	 2.00
                    inport	 w_sel0	 1.40
                    inport	 w_sel1	 2.33
                    inport	 w_sel2	 2.11
                    inport	 w_sel3	 1.95
                    inport	 data_in0	 1.03
                    inport	 data_in1	 1.05
                    inport	 data_in2	 1.10
                    inport	 data_in3	 0.99
                    outport	 REG10	 1.69
                    outport	 REG26	 1.69
                    internal	 1.69
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 2.13
                    path	 r_sel1	 data_out1	 2.20
                    inport	 w_sel0	 2.69
                    inport	 w_sel1	 3.27
                    inport	 w_sel2	 3.01
                    inport	 w_sel3	 3.02
                    inport	 data_in0	 0.58
                    inport	 data_in1	 0.53
                    inport	 data_in2	 0.63
                    inport	 data_in3	 1.12
                    outport	 REG26	 1.71
                    outport	 REG26	 1.71
                    internal	 1.71
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 1.94
                    path	 r_sel1	 data_out1	 2.12
                    inport	 w_sel0	 2.84
                    inport	 w_sel1	 3.19
                    inport	 w_sel2	 3.31
                    inport	 w_sel3	 3.15
                    inport	 data_in0	 0.99
                    inport	 data_in1	 0.63
                    inport	 data_in2	 0.72
                    inport	 data_in3	 0.65
                    outport	 REG26	 1.52
                    outport	 REG26	 1.52
                    internal	 1.56
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 1.70
                      path	 r_sel1	 data_out1	 1.67
                      inport	 w_sel0	 1.39
                      inport	 w_sel1	 1.98
                      inport	 w_sel2	 1.86
                      inport	 w_sel3	 1.77
                      inport	 data_in0	 0.82
                      inport	 data_in1	 0.84
                      inport	 data_in2	 0.96
                      inport	 data_in3	 0.78
                      outport	 REG18	 1.26
                      outport	 REG18	 1.26
                      internal	 1.26
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 1.88
                      path	 r_sel1	 data_out1	 1.89
                      inport	 w_sel0	 2.10
                      inport	 w_sel1	 2.26
                      inport	 w_sel2	 2.27
                      inport	 w_sel3	 2.67
                      inport	 data_in0	 0.33
                      inport	 data_in1	 0.42
                      inport	 data_in2	 0.35
                      inport	 data_in3	 0.52
                      outport	 REG26	 1.61
                      outport	 REG26	 1.61
                      internal	 1.61
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 1.89
                      path	 r_sel1	 data_out1	 1.93
                      inport	 w_sel0	 2.10
                      inport	 w_sel1	 2.38
                      inport	 w_sel2	 2.30
                      inport	 w_sel3	 2.38
                      inport	 data_in0	 0.54
                      inport	 data_in1	 0.35
                      inport	 data_in2	 0.43
                      inport	 data_in3	 0.37
                      outport	 REG26	 1.63
                      outport	 REG26	 1.63
                      internal	 1.63
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 1.30
                      path	 r_sel1	 data_out1	 1.28
                      inport	 w_sel0	 1.25
                      inport	 w_sel1	 1.25
                      inport	 w_sel2	 1.25
                      inport	 w_sel3	 1.25
                      inport	 data_in0	 0.84
                      inport	 data_in1	 1.20
                      inport	 data_in2	 0.79
                      inport	 data_in3	 0.74
                      outport	 REG25	 1.31
                      outport	 REG15	 1.33
                      internal	 1.33
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 1.29
                      path	 r_sel1	 data_out1	 1.24
                      inport	 w_sel0	 1.40
                      inport	 w_sel1	 1.40
                      inport	 w_sel2	 1.40
                      inport	 w_sel3	 1.40
                      inport	 data_in0	 0.82
                      inport	 data_in1	 0.74
                      inport	 data_in2	 0.68
                      inport	 data_in3	 0.74
                      outport	 REG6	 1.29
                      outport	 REG12	 1.25
                      internal	 1.29
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 1.33
                      path	 r_sel1	 data_out1	 1.32
                      inport	 w_sel0	 1.39
                      inport	 w_sel1	 1.39
                      inport	 w_sel2	 1.39
                      inport	 w_sel3	 1.39
                      inport	 data_in0	 0.79
                      inport	 data_in1	 0.64
                      inport	 data_in2	 0.69
                      inport	 data_in3	 0.73
                      outport	 REG24	 1.28
                      outport	 REG11	 1.24
                      internal	 1.28
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 2.04
                      path	 r_sel1	 data_out1	 2.00
                      inport	 w_sel0	 1.40
                      inport	 w_sel1	 2.33
                      inport	 w_sel2	 2.11
                      inport	 w_sel3	 1.95
                      inport	 data_in0	 1.03
                      inport	 data_in1	 1.05
                      inport	 data_in2	 1.10
                      inport	 data_in3	 0.99
                      outport	 REG10	 1.69
                      outport	 REG26	 1.69
                      internal	 1.69
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 2.13
                      path	 r_sel1	 data_out1	 2.20
                      inport	 w_sel0	 2.69
                      inport	 w_sel1	 3.27
                      inport	 w_sel2	 3.01
                      inport	 w_sel3	 3.02
                      inport	 data_in0	 0.58
                      inport	 data_in1	 0.53
                      inport	 data_in2	 0.63
                      inport	 data_in3	 1.12
                      outport	 REG26	 1.71
                      outport	 REG26	 1.71
                      internal	 1.71
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 1.94
                      path	 r_sel1	 data_out1	 2.12
                      inport	 w_sel0	 2.84
                      inport	 w_sel1	 3.19
                      inport	 w_sel2	 3.31
                      inport	 w_sel3	 3.15
                      inport	 data_in0	 0.99
                      inport	 data_in1	 0.63
                      inport	 data_in2	 0.72
                      inport	 data_in3	 0.65
                      outport	 REG26	 1.52
                      outport	 REG26	 1.52
                      internal	 1.56
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,4,1">
                <max>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 1.91
                    path	 r_sel1	 data_out1	 1.91
                    path	 r_sel2	 data_out2	 1.91
                    path	 r_sel3	 data_out3	 2.06
                    inport	 w_sel0	 1.38
                    inport	 data_in0	 0.25
                    outport	 REG18	 1.59
                    outport	 REG18	 1.59
                    outport	 REG18	 1.59
                    outport	 REG18	 1.78
                    internal	 1.78
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 1.95
                    path	 r_sel1	 data_out1	 1.95
                    path	 r_sel2	 data_out2	 1.95
                    path	 r_sel3	 data_out3	 1.95
                    inport	 w_sel0	 1.26
                    inport	 data_in0	 0.29
                    outport	 REG26	 1.60
                    outport	 REG26	 1.60
                    outport	 REG26	 1.60
                    outport	 REG26	 1.60
                    internal	 1.60
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 2.01
                    path	 r_sel1	 data_out1	 2.01
                    path	 r_sel2	 data_out2	 2.01
                    path	 r_sel3	 data_out3	 2.01
                    inport	 w_sel0	 1.53
                    inport	 data_in0	 0.25
                    outport	 REG26	 1.61
                    outport	 REG26	 1.61
                    outport	 REG26	 1.61
                    outport	 REG26	 1.61
                    internal	 1.61
                  </data>
                </max>
                <min>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 1.91
                    path	 r_sel1	 data_out1	 1.91
                    path	 r_sel2	 data_out2	 1.91
                    path	 r_sel3	 data_out3	 2.06
                    inport	 w_sel0	 1.38
                    inport	 data_in0	 0.25
                    outport	 REG18	 1.59
                    outport	 REG18	 1.59
                    outport	 REG18	 1.59
                    outport	 REG18	 1.78
                    internal	 1.78
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 1.95
                    path	 r_sel1	 data_out1	 1.95
                    path	 r_sel2	 data_out2	 1.95
                    path	 r_sel3	 data_out3	 1.95
                    inport	 w_sel0	 1.26
                    inport	 data_in0	 0.29
                    outport	 REG26	 1.60
                    outport	 REG26	 1.60
                    outport	 REG26	 1.60
                    outport	 REG26	 1.60
                    internal	 1.60
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 2.01
                    path	 r_sel1	 data_out1	 2.01
                    path	 r_sel2	 data_out2	 2.01
                    path	 r_sel3	 data_out3	 2.01
                    inport	 w_sel0	 1.53
                    inport	 data_in0	 0.25
                    outport	 REG26	 1.61
                    outport	 REG26	 1.61
                    outport	 REG26	 1.61
                    outport	 REG26	 1.61
                    internal	 1.61
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 1.49
                      path	 r_sel1	 data_out1	 1.49
                      path	 r_sel2	 data_out2	 1.49
                      path	 r_sel3	 data_out3	 1.49
                      inport	 w_sel0	 1.27
                      inport	 data_in0	 0.24
                      outport	 REG26	 1.33
                      outport	 REG26	 1.33
                      outport	 REG26	 1.33
                      outport	 REG26	 1.33
                      internal	 1.33
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 1.77
                      path	 r_sel1	 data_out1	 1.77
                      path	 r_sel2	 data_out2	 1.77
                      path	 r_sel3	 data_out3	 1.77
                      inport	 w_sel0	 1.29
                      inport	 data_in0	 0.24
                      outport	 REG26	 1.56
                      outport	 REG26	 1.56
                      outport	 REG26	 1.56
                      outport	 REG26	 1.56
                      internal	 1.56
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 1.92
                      path	 r_sel1	 data_out1	 1.92
                      path	 r_sel2	 data_out2	 1.90
                      path	 r_sel3	 data_out3	 1.90
                      inport	 w_sel0	 1.36
                      inport	 data_in0	 0.25
                      outport	 REG26	 1.72
                      outport	 REG26	 1.72
                      outport	 REG26	 1.72
                      outport	 REG26	 1.72
                      internal	 1.72
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 1.18
                      path	 r_sel1	 data_out1	 1.17
                      path	 r_sel2	 data_out2	 1.17
                      path	 r_sel3	 data_out3	 1.19
                      inport	 w_sel0	 0.97
                      inport	 data_in0	 0.48
                      outport	 REG29	 1.20
                      outport	 REG6	 1.20
                      outport	 REG6	 1.20
                      outport	 REG29	 1.20
                      internal	 1.20
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 1.22
                      path	 r_sel1	 data_out1	 1.21
                      path	 r_sel2	 data_out2	 1.22
                      path	 r_sel3	 data_out3	 1.24
                      inport	 w_sel0	 1.07
                      inport	 data_in0	 0.48
                      outport	 REG1	 1.24
                      outport	 REG12	 1.24
                      outport	 REG2	 1.23
                      outport	 REG10	 1.25
                      internal	 1.25
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 1.22
                      path	 r_sel1	 data_out1	 1.23
                      path	 r_sel2	 data_out2	 1.22
                      path	 r_sel3	 data_out3	 1.23
                      inport	 w_sel0	 1.07
                      inport	 data_in0	 0.49
                      outport	 REG28	 1.23
                      outport	 REG26	 1.23
                      outport	 REG26	 1.22
                      outport	 REG31	 1.23
                      internal	 1.23
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 1.91
                      path	 r_sel1	 data_out1	 1.91
                      path	 r_sel2	 data_out2	 1.91
                      path	 r_sel3	 data_out3	 2.06
                      inport	 w_sel0	 1.38
                      inport	 data_in0	 0.25
                      outport	 REG18	 1.59
                      outport	 REG18	 1.59
                      outport	 REG18	 1.59
                      outport	 REG18	 1.78
                      internal	 1.78
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 1.95
                      path	 r_sel1	 data_out1	 1.95
                      path	 r_sel2	 data_out2	 1.95
                      path	 r_sel3	 data_out3	 1.95
                      inport	 w_sel0	 1.26
                      inport	 data_in0	 0.29
                      outport	 REG26	 1.60
                      outport	 REG26	 1.60
                      outport	 REG26	 1.60
                      outport	 REG26	 1.60
                      internal	 1.60
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 2.01
                      path	 r_sel1	 data_out1	 2.01
                      path	 r_sel2	 data_out2	 2.01
                      path	 r_sel3	 data_out3	 2.01
                      inport	 w_sel0	 1.53
                      inport	 data_in0	 0.25
                      outport	 REG26	 1.61
                      outport	 REG26	 1.61
                      outport	 REG26	 1.61
                      outport	 REG26	 1.61
                      internal	 1.61
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,4,2">
                <max>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 1.99
                    path	 r_sel1	 data_out1	 2.02
                    path	 r_sel2	 data_out2	 2.02
                    path	 r_sel3	 data_out3	 1.99
                    inport	 w_sel0	 1.57
                    inport	 w_sel1	 2.11
                    inport	 data_in0	 0.49
                    inport	 data_in1	 0.49
                    outport	 REG26	 1.75
                    outport	 REG26	 1.75
                    outport	 REG26	 1.75
                    outport	 REG26	 1.75
                    internal	 1.75
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 1.88
                    path	 r_sel1	 data_out1	 1.88
                    path	 r_sel2	 data_out2	 1.88
                    path	 r_sel3	 data_out3	 1.88
                    inport	 w_sel0	 1.76
                    inport	 w_sel1	 2.30
                    inport	 data_in0	 0.43
                    inport	 data_in1	 0.49
                    outport	 REG26	 1.58
                    outport	 REG26	 1.58
                    outport	 REG26	 1.58
                    outport	 REG26	 1.58
                    internal	 1.58
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 1.94
                    path	 r_sel1	 data_out1	 1.94
                    path	 r_sel2	 data_out2	 1.94
                    path	 r_sel3	 data_out3	 1.94
                    inport	 w_sel0	 1.81
                    inport	 w_sel1	 2.39
                    inport	 data_in0	 0.44
                    inport	 data_in1	 0.50
                    outport	 REG26	 1.61
                    outport	 REG26	 1.61
                    outport	 REG26	 1.61
                    outport	 REG26	 1.61
                    internal	 1.61
                  </data>
                </max>
                <min>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 1.99
                    path	 r_sel1	 data_out1	 2.02
                    path	 r_sel2	 data_out2	 2.02
                    path	 r_sel3	 data_out3	 1.99
                    inport	 w_sel0	 1.57
                    inport	 w_sel1	 2.11
                    inport	 data_in0	 0.49
                    inport	 data_in1	 0.49
                    outport	 REG26	 1.75
                    outport	 REG26	 1.75
                    outport	 REG26	 1.75
                    outport	 REG26	 1.75
                    internal	 1.75
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 1.88
                    path	 r_sel1	 data_out1	 1.88
                    path	 r_sel2	 data_out2	 1.88
                    path	 r_sel3	 data_out3	 1.88
                    inport	 w_sel0	 1.76
                    inport	 w_sel1	 2.30
                    inport	 data_in0	 0.43
                    inport	 data_in1	 0.49
                    outport	 REG26	 1.58
                    outport	 REG26	 1.58
                    outport	 REG26	 1.58
                    outport	 REG26	 1.58
                    internal	 1.58
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 1.94
                    path	 r_sel1	 data_out1	 1.94
                    path	 r_sel2	 data_out2	 1.94
                    path	 r_sel3	 data_out3	 1.94
                    inport	 w_sel0	 1.81
                    inport	 w_sel1	 2.39
                    inport	 data_in0	 0.44
                    inport	 data_in1	 0.50
                    outport	 REG26	 1.61
                    outport	 REG26	 1.61
                    outport	 REG26	 1.61
                    outport	 REG26	 1.61
                    internal	 1.61
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 1.70
                      path	 r_sel1	 data_out1	 1.70
                      path	 r_sel2	 data_out2	 1.70
                      path	 r_sel3	 data_out3	 1.70
                      inport	 w_sel0	 1.50
                      inport	 w_sel1	 2.03
                      inport	 data_in0	 0.27
                      inport	 data_in1	 0.42
                      outport	 REG26	 1.33
                      outport	 REG26	 1.33
                      outport	 REG26	 1.33
                      outport	 REG26	 1.33
                      internal	 1.33
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 1.84
                      path	 r_sel1	 data_out1	 1.84
                      path	 r_sel2	 data_out2	 1.84
                      path	 r_sel3	 data_out3	 1.84
                      inport	 w_sel0	 1.52
                      inport	 w_sel1	 2.26
                      inport	 data_in0	 0.28
                      inport	 data_in1	 0.43
                      outport	 REG26	 1.69
                      outport	 REG26	 1.69
                      outport	 REG26	 1.69
                      outport	 REG26	 1.69
                      internal	 1.69
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 1.89
                      path	 r_sel1	 data_out1	 1.89
                      path	 r_sel2	 data_out2	 1.89
                      path	 r_sel3	 data_out3	 1.89
                      inport	 w_sel0	 1.74
                      inport	 w_sel1	 2.15
                      inport	 data_in0	 0.28
                      inport	 data_in1	 0.43
                      outport	 REG26	 1.72
                      outport	 REG26	 1.72
                      outport	 REG26	 1.72
                      outport	 REG26	 1.72
                      internal	 1.72
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 1.22
                      path	 r_sel1	 data_out1	 1.21
                      path	 r_sel2	 data_out2	 1.22
                      path	 r_sel3	 data_out3	 1.20
                      inport	 w_sel0	 1.06
                      inport	 w_sel1	 1.06
                      inport	 data_in0	 0.60
                      inport	 data_in1	 0.53
                      outport	 REG1	 1.21
                      outport	 REG21	 1.22
                      outport	 REG20	 1.22
                      outport	 REG6	 1.22
                      internal	 1.22
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 1.25
                      path	 r_sel1	 data_out1	 1.25
                      path	 r_sel2	 data_out2	 1.24
                      path	 r_sel3	 data_out3	 1.25
                      inport	 w_sel0	 1.12
                      inport	 w_sel1	 1.12
                      inport	 data_in0	 0.62
                      inport	 data_in1	 0.57
                      outport	 REG3	 1.26
                      outport	 REG31	 1.28
                      outport	 REG2	 1.27
                      outport	 REG31	 1.27
                      internal	 1.28
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 1.30
                      path	 r_sel1	 data_out1	 1.27
                      path	 r_sel2	 data_out2	 1.27
                      path	 r_sel3	 data_out3	 1.31
                      inport	 w_sel0	 1.19
                      inport	 w_sel1	 1.18
                      inport	 data_in0	 0.64
                      inport	 data_in1	 0.67
                      outport	 REG24	 1.31
                      outport	 REG31	 1.30
                      outport	 REG31	 1.30
                      outport	 REG22	 1.33
                      internal	 1.33
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 1.99
                      path	 r_sel1	 data_out1	 2.02
                      path	 r_sel2	 data_out2	 2.02
                      path	 r_sel3	 data_out3	 1.99
                      inport	 w_sel0	 1.57
                      inport	 w_sel1	 2.11
                      inport	 data_in0	 0.49
                      inport	 data_in1	 0.49
                      outport	 REG26	 1.75
                      outport	 REG26	 1.75
                      outport	 REG26	 1.75
                      outport	 REG26	 1.75
                      internal	 1.75
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 1.88
                      path	 r_sel1	 data_out1	 1.88
                      path	 r_sel2	 data_out2	 1.88
                      path	 r_sel3	 data_out3	 1.88
                      inport	 w_sel0	 1.76
                      inport	 w_sel1	 2.30
                      inport	 data_in0	 0.43
                      inport	 data_in1	 0.49
                      outport	 REG26	 1.58
                      outport	 REG26	 1.58
                      outport	 REG26	 1.58
                      outport	 REG26	 1.58
                      internal	 1.58
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 1.94
                      path	 r_sel1	 data_out1	 1.94
                      path	 r_sel2	 data_out2	 1.94
                      path	 r_sel3	 data_out3	 1.94
                      inport	 w_sel0	 1.81
                      inport	 w_sel1	 2.39
                      inport	 data_in0	 0.44
                      inport	 data_in1	 0.50
                      outport	 REG26	 1.61
                      outport	 REG26	 1.61
                      outport	 REG26	 1.61
                      outport	 REG26	 1.61
                      internal	 1.61
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,4,4">
                <max>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 2.01
                    path	 r_sel1	 data_out1	 2.00
                    path	 r_sel2	 data_out2	 2.00
                    path	 r_sel3	 data_out3	 2.04
                    inport	 w_sel0	 1.40
                    inport	 w_sel1	 2.33
                    inport	 w_sel2	 2.11
                    inport	 w_sel3	 1.95
                    inport	 data_in0	 1.03
                    inport	 data_in1	 1.05
                    inport	 data_in2	 1.10
                    inport	 data_in3	 0.99
                    outport	 REG26	 1.77
                    outport	 REG26	 1.77
                    outport	 REG26	 1.77
                    outport	 REG26	 1.77
                    internal	 1.77
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 1.98
                    path	 r_sel1	 data_out1	 2.01
                    path	 r_sel2	 data_out2	 2.01
                    path	 r_sel3	 data_out3	 1.98
                    inport	 w_sel0	 2.67
                    inport	 w_sel1	 3.25
                    inport	 w_sel2	 2.99
                    inport	 w_sel3	 2.96
                    inport	 data_in0	 0.58
                    inport	 data_in1	 0.53
                    inport	 data_in2	 0.63
                    inport	 data_in3	 1.12
                    outport	 REG26	 1.61
                    outport	 REG26	 1.61
                    outport	 REG26	 1.61
                    outport	 REG26	 1.61
                    internal	 1.61
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 0.00
                    path	 r_sel1	 data_out1	 0.00
                    path	 r_sel2	 data_out2	 0.00
                    path	 r_sel3	 data_out3	 0.00
                    inport	 w_sel0	 0
                    inport	 w_sel1	 0
                    inport	 data_in0	 0
                    inport	 data_in1	 0
                    inport	 data_in0	 0
                    inport	 data_in1	 0
                    inport	 data_in2	 0
                    inport	 data_in3	 0
                    outport	 REG26	 0
                    outport	 REG26	 0
                    outport	 REG26	 0
                    outport	 REG26	 0
                    internal	 1.63
                  </data>
                </max>
                <min>
                  <data bit_width="4">
                    path	 r_sel0	 data_out0	 2.01
                    path	 r_sel1	 data_out1	 2.00
                    path	 r_sel2	 data_out2	 2.00
                    path	 r_sel3	 data_out3	 2.04
                    inport	 w_sel0	 1.40
                    inport	 w_sel1	 2.33
                    inport	 w_sel2	 2.11
                    inport	 w_sel3	 1.95
                    inport	 data_in0	 1.03
                    inport	 data_in1	 1.05
                    inport	 data_in2	 1.10
                    inport	 data_in3	 0.99
                    outport	 REG26	 1.77
                    outport	 REG26	 1.77
                    outport	 REG26	 1.77
                    outport	 REG26	 1.77
                    internal	 1.77
                  </data>
                  <data bit_width="8">
                    path	 r_sel0	 data_out0	 1.98
                    path	 r_sel1	 data_out1	 2.01
                    path	 r_sel2	 data_out2	 2.01
                    path	 r_sel3	 data_out3	 1.98
                    inport	 w_sel0	 2.67
                    inport	 w_sel1	 3.25
                    inport	 w_sel2	 2.99
                    inport	 w_sel3	 2.96
                    inport	 data_in0	 0.58
                    inport	 data_in1	 0.53
                    inport	 data_in2	 0.63
                    inport	 data_in3	 1.12
                    outport	 REG26	 1.61
                    outport	 REG26	 1.61
                    outport	 REG26	 1.61
                    outport	 REG26	 1.61
                    internal	 1.61
                  </data>
                  <data bit_width="16">
                    path	 r_sel0	 data_out0	 100
                    path	 r_sel1	 data_out1	 100
                    path	 r_sel2	 data_out2	 100
                    path	 r_sel3	 data_out3	 100
                    inport	 w_sel0	 100
                    inport	 w_sel1	 100
                    inport	 data_in0	 100
                    inport	 data_in1	 100
                    inport	 data_in0	 100
                    inport	 data_in1	 100
                    inport	 data_in2	 100
                    inport	 data_in3	 100
                    outport	 REG26	 100
                    outport	 REG26	 100
                    outport	 REG26	 100
                    outport	 REG26	 100
                    internal	 1.63
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 1.70
                      path	 r_sel1	 data_out1	 1.67
                      path	 r_sel2	 data_out2	 1.67
                      path	 r_sel3	 data_out3	 1.70
                      inport	 w_sel0	 1.39
                      inport	 w_sel1	 1.98
                      inport	 w_sel2	 1.86
                      inport	 w_sel3	 1.77
                      inport	 data_in0	 0.82
                      inport	 data_in1	 0.84
                      inport	 data_in2	 0.96
                      inport	 data_in3	 0.78
                      outport	 REG18	 1.33
                      outport	 REG18	 1.33
                      outport	 REG18	 1.33
                      outport	 REG18	 1.33
                      internal	 1.33
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 1.88
                      path	 r_sel1	 data_out1	 1.89
                      path	 r_sel2	 data_out2	 1.89
                      path	 r_sel3	 data_out3	 1.88
                      inport	 w_sel0	 2.10
                      inport	 w_sel1	 2.26
                      inport	 w_sel2	 2.27
                      inport	 w_sel3	 2.67
                      inport	 data_in0	 0.33
                      inport	 data_in1	 0.42
                      inport	 data_in2	 0.35
                      inport	 data_in3	 0.52
                      outport	 REG26	 1.69
                      outport	 REG26	 1.69
                      outport	 REG26	 1.69
                      outport	 REG26	 1.69
                      internal	 1.69
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 1.89
                      path	 r_sel1	 data_out1	 1.93
                      path	 r_sel2	 data_out2	 1.92
                      path	 r_sel3	 data_out3	 1.89
                      inport	 w_sel0	 2.19
                      inport	 w_sel1	 2.31
                      inport	 w_sel2	 2.26
                      inport	 w_sel3	 2.52
                      inport	 data_in0	 0.35
                      inport	 data_in1	 0.54
                      inport	 data_in2	 0.43
                      inport	 data_in3	 0.37
                      outport	 REG26	 1.72
                      outport	 REG26	 1.72
                      outport	 REG26	 1.72
                      outport	 REG26	 1.72
                      internal	 1.72
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 1.29
                      path	 r_sel1	 data_out1	 1.31
                      path	 r_sel2	 data_out2	 1.31
                      path	 r_sel3	 data_out3	 1.26
                      inport	 w_sel0	 1.31
                      inport	 w_sel1	 1.30
                      inport	 w_sel2	 1.31
                      inport	 w_sel3	 1.31
                      inport	 data_in0	 0.60
                      inport	 data_in1	 0.67
                      inport	 data_in2	 0.66
                      inport	 data_in3	 0.67
                      outport	 REG25	 1.35
                      outport	 REG15	 1.41
                      outport	 REG15	 1.41
                      outport	 REG12	 1.35
                      internal	 1.41
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 1.25
                      path	 r_sel1	 data_out1	 1.27
                      path	 r_sel2	 data_out2	 1.26
                      path	 r_sel3	 data_out3	 1.26
                      inport	 w_sel0	 1.34
                      inport	 w_sel1	 1.34
                      inport	 w_sel2	 1.34
                      inport	 w_sel3	 1.34
                      inport	 data_in0	 0.72
                      inport	 data_in1	 0.61
                      inport	 data_in2	 0.64
                      inport	 data_in3	 0.77
                      outport	 REG22	 1.33
                      outport	 REG20	 1.30
                      outport	 REG28	 1.30
                      outport	 REG10	 1.37
                      internal	 1.37
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 1.35
                      path	 r_sel1	 data_out1	 1.34
                      path	 r_sel2	 data_out2	 1.34
                      path	 r_sel3	 data_out3	 1.31
                      inport	 w_sel0	 1.41
                      inport	 w_sel1	 1.41
                      inport	 w_sel2	 1.41
                      inport	 w_sel3	 1.41
                      inport	 data_in0	 0.79
                      inport	 data_in1	 0.64
                      inport	 data_in2	 0.69
                      inport	 data_in3	 0.73
                      outport	 REG3	 1.30
                      outport	 REG17	 1.28
                      outport	 REG17	 1.28
                      outport	 REG29	 1.33
                      internal	 1.19
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4">
                      path	 r_sel0	 data_out0	 2.01
                      path	 r_sel1	 data_out1	 2.00
                      path	 r_sel2	 data_out2	 2.00
                      path	 r_sel3	 data_out3	 2.04
                      inport	 w_sel0	 1.40
                      inport	 w_sel1	 2.33
                      inport	 w_sel2	 2.11
                      inport	 w_sel3	 1.95
                      inport	 data_in0	 1.03
                      inport	 data_in1	 1.05
                      inport	 data_in2	 1.10
                      inport	 data_in3	 0.99
                      outport	 REG26	 1.77
                      outport	 REG26	 1.77
                      outport	 REG26	 1.77
                      outport	 REG26	 1.77
                      internal	 1.77
                    </data>
                    <data bit_width="8">
                      path	 r_sel0	 data_out0	 1.98
                      path	 r_sel1	 data_out1	 2.01
                      path	 r_sel2	 data_out2	 2.01
                      path	 r_sel3	 data_out3	 1.98
                      inport	 w_sel0	 2.67
                      inport	 w_sel1	 3.25
                      inport	 w_sel2	 2.99
                      inport	 w_sel3	 2.96
                      inport	 data_in0	 0.58
                      inport	 data_in1	 0.53
                      inport	 data_in2	 0.63
                      inport	 data_in3	 1.12
                      outport	 REG26	 1.61
                      outport	 REG26	 1.61
                      outport	 REG26	 1.61
                      outport	 REG26	 1.61
                      internal	 1.61
                    </data>
                    <data bit_width="16">
                      path	 r_sel0	 data_out0	 1.61
                      path	 r_sel1	 data_out1	 1.61
                      path	 r_sel2	 data_out2	 1.61
                      path	 r_sel3	 data_out3	 1.61
                      inport	 w_sel0	 1.61
                      inport	 w_sel1	 1.61
                      inport	 data_in0	 1.61
                      inport	 data_in1	 1.61
                      inport	 data_in0	 0.99
                      inport	 data_in1	 0.63
                      inport	 data_in2	 0.72
                      inport	 data_in3	 0.65
                      outport	 REG26	 1.61
                      outport	 REG26	 1.61
                      outport	 REG26	 1.61
                      outport	 REG26	 1.61
                      internal	 1.63
                    </data>
                  </priority>
                </typ>
              </parameters>

            </est_index>
          </est_type>

          <est_type name="power">
            <est_index name="static_power">
              <unit> mW </unit>
              <parameters name="4,1,1">
                <max>
                  <data bit_width="4"> 20.5804 </data>
                  <data bit_width="8"> 44.9130 </data>
                  <data bit_width="16"> 77.4691 </data>
                  <data bit_width="32"> 168.8547 </data>
                  <data bit_width="128"> 557.2665 </data>
                </max>
                <min>
                  <data bit_width="4"> 13.5633 </data>
                  <data bit_width="8"> 24.9273 </data>
                  <data bit_width="16"> 50.3200 </data>
                  <data bit_width="32"> 97.6542 </data>
                  <data bit_width="128"> 443.6625 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 14.3665 </data>
                    <data bit_width="8"> 27.7890 </data>
                    <data bit_width="16"> 57.2970 </data>
                    <data bit_width="32"> 117.4755 </data>
                    <data bit_width="128"> 456.2700 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 20.5804 </data>
                    <data bit_width="8"> 44.9130 </data>
                    <data bit_width="16"> 77.4691 </data>
                    <data bit_width="32"> 168.8547 </data>
                    <data bit_width="128"> 557.2665 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 13.5633 </data>
                    <data bit_width="8"> 24.9273 </data>
                    <data bit_width="16"> 50.3200 </data>
                    <data bit_width="32"> 97.6542 </data>
                    <data bit_width="128"> 443.6625 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,1,2">
                <max>
                  <data bit_width="4"> 29.2949 </data>
                  <data bit_width="8"> 53.8455 </data>
                  <data bit_width="16"> 108.4822 </data>
                  <data bit_width="32"> 208.4122 </data>
                  <data bit_width="128"> 821.4230 </data>
                </max>
                <min>
                  <data bit_width="4"> 21.9914 </data>
                  <data bit_width="8"> 39.8052 </data>
                  <data bit_width="16"> 81.0126 </data>
                  <data bit_width="32"> 163.0881 </data>
                  <data bit_width="128"> 708.6562 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 25.4518 </data>
                    <data bit_width="8"> 45.4762 </data>
                    <data bit_width="16"> 92.6619 </data>
                    <data bit_width="32"> 178.8640 </data>
                    <data bit_width="128"> 775.7109 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 29.2949 </data>
                    <data bit_width="8"> 53.8455 </data>
                    <data bit_width="16"> 108.4822 </data>
                    <data bit_width="32"> 208.4122 </data>
                    <data bit_width="128"> 821.4230 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 21.9914 </data>
                    <data bit_width="8"> 39.8052 </data>
                    <data bit_width="16"> 81.0126 </data>
                    <data bit_width="32"> 163.0881 </data>
                    <data bit_width="128"> 708.6562 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,1,4">
                <max>
                  <data bit_width="4"> 60.2832 </data>
                  <data bit_width="8"> 111.9424 </data>
                  <data bit_width="16"> 202.6993 </data>
                  <data bit_width="32"> 401.5742 </data>
                  <data bit_width="128"> 1597.7 </data>
                </max>
                <min>
                  <data bit_width="4"> 35.7398 </data>
                  <data bit_width="8"> 59.5589 </data>
                  <data bit_width="16"> 120.3938 </data>
                  <data bit_width="32"> 246.6424 </data>
                  <data bit_width="128"> 1081.9 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 45.4382 </data>
                    <data bit_width="8"> 79.4766 </data>
                    <data bit_width="16"> 157.1879 </data>
                    <data bit_width="32"> 316.8700 </data>
                    <data bit_width="128"> 1355.3 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 60.2832 </data>
                    <data bit_width="8"> 111.9424 </data>
                    <data bit_width="16"> 202.6993 </data>
                    <data bit_width="32"> 401.5742 </data>
                    <data bit_width="128"> 1597.7 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 35.7398 </data>
                    <data bit_width="8"> 59.5589 </data>
                    <data bit_width="16"> 120.3938 </data>
                    <data bit_width="32"> 246.6424 </data>
                    <data bit_width="128"> 1081.9 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,2,1">
                <max>
                  <data bit_width="4"> 27.6226 </data>
                  <data bit_width="8"> 53.1672 </data>
                  <data bit_width="16"> 94.5212 </data>
                  <data bit_width="32"> 169.6517 </data>
                  <data bit_width="128"> 675.3947 </data>
                </max>
                <min>
                  <data bit_width="4"> 15.3800 </data>
                  <data bit_width="8"> 27.8183 </data>
                  <data bit_width="16"> 55.9045 </data>
                  <data bit_width="32"> 114.8690 </data>
                  <data bit_width="128"> 516.5344 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 15.6968 </data>
                    <data bit_width="8"> 30.3632 </data>
                    <data bit_width="16"> 65.3162 </data>
                    <data bit_width="32"> 128.5209 </data>
                    <data bit_width="128"> 516.5344 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 27.6226 </data>
                    <data bit_width="8"> 53.1672 </data>
                    <data bit_width="16"> 94.5212 </data>
                    <data bit_width="32"> 169.6517 </data>
                    <data bit_width="128"> 675.3947 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 15.3800 </data>
                    <data bit_width="8"> 27.8183 </data>
                    <data bit_width="16"> 55.9045 </data>
                    <data bit_width="32"> 114.8690 </data>
                    <data bit_width="128"> 525.3261 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,2,2">
                <max>
                  <data bit_width="4"> 35.7524 </data>
                  <data bit_width="8"> 60.1887 </data>
                  <data bit_width="16"> 115.4595 </data>
                  <data bit_width="32"> 229.7784 </data>
                  <data bit_width="128"> 983.6292 </data>
                </max>
                <min>
                  <data bit_width="4"> 23.8484 </data>
                  <data bit_width="8"> 42.6764 </data>
                  <data bit_width="16"> 86.1885 </data>
                  <data bit_width="32"> 174.2150 </data>
                  <data bit_width="128"> 762.7571 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 26.7726 </data>
                    <data bit_width="8"> 48.0502 </data>
                    <data bit_width="16"> 97.6634 </data>
                    <data bit_width="32"> 199.2864 </data>
                    <data bit_width="128"> 835.0687 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 35.7524 </data>
                    <data bit_width="8"> 60.1887 </data>
                    <data bit_width="16"> 115.4595 </data>
                    <data bit_width="32"> 229.7784 </data>
                    <data bit_width="128"> 983.6292 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 23.8484 </data>
                    <data bit_width="8"> 42.6764 </data>
                    <data bit_width="16"> 86.1885 </data>
                    <data bit_width="32"> 174.2150 </data>
                    <data bit_width="128"> 762.7571 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,2,4">
                <max>
                  <data bit_width="4"> 63.7339 </data>
                  <data bit_width="8"> 117.3557 </data>
                  <data bit_width="16"> 213.2360 </data>
                  <data bit_width="32"> 420.9263 </data>
                  <data bit_width="128"> 1767.7 </data>
                </max>
                <min>
                  <data bit_width="4"> 37.6432 </data>
                  <data bit_width="8"> 66.5866 </data>
                  <data bit_width="16"> 126.1164 </data>
                  <data bit_width="32"> 258.2926 </data>
                  <data bit_width="128"> 1187.1 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 46.5972 </data>
                    <data bit_width="8"> 82.3066 </data>
                    <data bit_width="16"> 162.5665 </data>
                    <data bit_width="32"> 328.1465 </data>
                    <data bit_width="128"> 1420.5 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 63.7339 </data>
                    <data bit_width="8"> 117.3557 </data>
                    <data bit_width="16"> 213.2360 </data>
                    <data bit_width="32"> 420.9263 </data>
                    <data bit_width="128"> 1767.7 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 37.6432 </data>
                    <data bit_width="8"> 66.5866 </data>
                    <data bit_width="16"> 126.1164 </data>
                    <data bit_width="32"> 258.2926 </data>
                    <data bit_width="128"> 1187.1 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,4,1">
                <max>
                  <data bit_width="4"> 35.5045 </data>
                  <data bit_width="8"> 64.8772 </data>
                  <data bit_width="16"> 113.0330 </data>
                  <data bit_width="32"> 208.7905 </data>
                  <data bit_width="128"> 870.6218 </data>
                </max>
                <min>
                  <data bit_width="4"> 18.2331 </data>
                  <data bit_width="8"> 33.6470 </data>
                  <data bit_width="16"> 66.6919 </data>
                  <data bit_width="32"> 137.6970 </data>
                  <data bit_width="128"> 652.3039 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 18.2331 </data>
                    <data bit_width="8"> 35.5331 </data>
                    <data bit_width="16"> 75.9454 </data>
                    <data bit_width="32"> 156.5947 </data>
                    <data bit_width="128"> 684.0002 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 35.5045 </data>
                    <data bit_width="8"> 64.8772 </data>
                    <data bit_width="16"> 113.0330 </data>
                    <data bit_width="32"> 208.7905 </data>
                    <data bit_width="128"> 870.6218 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 19.0642 </data>
                    <data bit_width="8"> 33.6470 </data>
                    <data bit_width="16"> 66.6919 </data>
                    <data bit_width="32"> 137.6970 </data>
                    <data bit_width="128"> 652.3039 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,4,2">
                <max>
                  <data bit_width="4"> 53.2471 </data>
                  <data bit_width="8"> 76.9154 </data>
                  <data bit_width="16"> 140.3746 </data>
                  <data bit_width="32"> 275.0448 </data>
                  <data bit_width="128"> 1179.7 </data>
                </max>
                <min>
                  <data bit_width="4"> 27.4772 </data>
                  <data bit_width="8"> 51.6926 </data>
                  <data bit_width="16"> 97.4092 </data>
                  <data bit_width="32"> 197.3078 </data>
                  <data bit_width="128"> 904.7524 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 29.2896 </data>
                    <data bit_width="8"> 53.3593 </data>
                    <data bit_width="16"> 108.7367 </data>
                    <data bit_width="32"> 221.5021 </data>
                    <data bit_width="128"> 997.1841 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 53.2471 </data>
                    <data bit_width="8"> 76.9154 </data>
                    <data bit_width="16"> 140.3746 </data>
                    <data bit_width="32"> 275.0448 </data>
                    <data bit_width="128"> 1179.7 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 27.4772 </data>
                    <data bit_width="8"> 51.6926 </data>
                    <data bit_width="16"> 97.4092 </data>
                    <data bit_width="32"> 197.3078 </data>
                    <data bit_width="128"> 904.7524 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,4,4">
                <max>
                  <data bit_width="4"> 71.2574 </data>
                  <data bit_width="8"> 131.5429 </data>
                  <data bit_width="16"> 241.0484 </data>
                  <data bit_width="32"> 482.5485 </data>
                  <data bit_width="128"> 1995.8 </data>
                </max>
                <min>
                  <data bit_width="4"> 41.1960 </data>
                  <data bit_width="8"> 72.8358 </data>
                  <data bit_width="16"> 146.0583 </data>
                  <data bit_width="32"> 281.1491 </data>
                  <data bit_width="128"> 1278.6 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 49.1700 </data>
                    <data bit_width="8"> 87.2682 </data>
                    <data bit_width="16"> 172.9416 </data>
                    <data bit_width="32"> 351.5620 </data>
                    <data bit_width="128"> 1552.2 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 71.2574 </data>
                    <data bit_width="8"> 131.5429 </data>
                    <data bit_width="16"> 241.0484 </data>
                    <data bit_width="32"> 482.5485 </data>
                    <data bit_width="128"> 1995.8 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 41.1960 </data>
                    <data bit_width="8"> 72.8358 </data>
                    <data bit_width="16"> 146.0583 </data>
                    <data bit_width="32"> 281.1491 </data>
                    <data bit_width="128"> 1278.6 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,1,1">
                <max>
                  <data bit_width="4"> 44.2818 </data>
                  <data bit_width="8"> 79.1006 </data>
                  <data bit_width="16"> 137.9136 </data>
                  <data bit_width="32"> 255.6437 </data>
                  <data bit_width="128"> 3691.7 </data>
                </max>
                <min>
                  <data bit_width="4"> 24.5136 </data>
                  <data bit_width="8"> 44.6187 </data>
                  <data bit_width="16"> 82.4628 </data>
                  <data bit_width="32"> 170.2826 </data>
                  <data bit_width="128"> 3384.6 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 31.4604 </data>
                    <data bit_width="8"> 56.9668 </data>
                    <data bit_width="16"> 92.3513 </data>
                    <data bit_width="32"> 221.6048 </data>
                    <data bit_width="128"> 3534.3 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 44.2818 </data>
                    <data bit_width="8"> 79.1006 </data>
                    <data bit_width="16"> 137.9136 </data>
                    <data bit_width="32"> 255.6437 </data>
                    <data bit_width="128"> 3691.7 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 24.5136 </data>
                    <data bit_width="8"> 44.6187 </data>
                    <data bit_width="16"> 82.4628 </data>
                    <data bit_width="32"> 170.2826 </data>
                    <data bit_width="128"> 3384.6 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,1,2">
                <max>
                  <data bit_width="4"> 53.5259 </data>
                  <data bit_width="8"> 102.3034 </data>
                  <data bit_width="16"> 187.9554 </data>
                  <data bit_width="32"> 378.1707 </data>
                  <data bit_width="128"> 4159.1 </data>
                </max>
                <min>
                  <data bit_width="4"> 36.6340 </data>
                  <data bit_width="8"> 68.8426 </data>
                  <data bit_width="16"> 141.1915 </data>
                  <data bit_width="32"> 284.8900 </data>
                  <data bit_width="128"> 3838.8 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 46.7843 </data>
                    <data bit_width="8"> 85.0703 </data>
                    <data bit_width="16"> 153.6584 </data>
                    <data bit_width="32"> 321.0623 </data>
                    <data bit_width="128"> 3998 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 53.5259 </data>
                    <data bit_width="8"> 102.3034 </data>
                    <data bit_width="16"> 187.9554 </data>
                    <data bit_width="32"> 378.1707 </data>
                    <data bit_width="128"> 4159.1 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 36.6340 </data>
                    <data bit_width="8"> 68.8426 </data>
                    <data bit_width="16"> 141.1915 </data>
                    <data bit_width="32"> 284.8900 </data>
                    <data bit_width="128"> 3838.8 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,1,4">
                <max>
                  <data bit_width="4"> 108.0861 </data>
                  <data bit_width="8"> 190.0581 </data>
                  <data bit_width="16"> 335.4138 </data>
                  <data bit_width="32"> 673.9583 </data>
                  <data bit_width="128"> 6041.6 </data>
                </max>
                <min>
                  <data bit_width="4"> 67.6213 </data>
                  <data bit_width="8"> 117.9681 </data>
                  <data bit_width="16"> 215.0509 </data>
                  <data bit_width="32"> 438.7869 </data>
                  <data bit_width="128"> 4584.1 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 81.2691 </data>
                    <data bit_width="8"> 153.6523 </data>
                    <data bit_width="16"> 274.3612 </data>
                    <data bit_width="32"> 567.1193 </data>
                    <data bit_width="128"> 5030.4 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 108.0861 </data>
                    <data bit_width="8"> 190.0581 </data>
                    <data bit_width="16"> 335.4138 </data>
                    <data bit_width="32"> 673.9583 </data>
                    <data bit_width="128"> 6041.6 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 67.6213 </data>
                    <data bit_width="8"> 117.9681 </data>
                    <data bit_width="16"> 215.0509 </data>
                    <data bit_width="32"> 438.7869 </data>
                    <data bit_width="128"> 4584.1 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,2,1">
                <max>
                  <data bit_width="4"> 50.1762 </data>
                  <data bit_width="8"> 86.6701 </data>
                  <data bit_width="16"> 162.2519 </data>
                  <data bit_width="32"> 303.3904 </data>
                  <data bit_width="128"> 3909.1 </data>
                </max>
                <min>
                  <data bit_width="4"> 28.2866 </data>
                  <data bit_width="8"> 50.4696 </data>
                  <data bit_width="16"> 96.3225 </data>
                  <data bit_width="32"> 195.7934 </data>
                  <data bit_width="128"> 3479.7 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 36.5484 </data>
                    <data bit_width="8"> 64.1097 </data>
                    <data bit_width="16"> 103.9959 </data>
                    <data bit_width="32"> 243.2387 </data>
                    <data bit_width="128"> 3636.3 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 50.1762 </data>
                    <data bit_width="8"> 86.6701 </data>
                    <data bit_width="16"> 162.2519 </data>
                    <data bit_width="32"> 303.3904 </data>
                    <data bit_width="128"> 3909.1 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 28.2866 </data>
                    <data bit_width="8"> 50.4696 </data>
                    <data bit_width="16"> 96.3225 </data>
                    <data bit_width="32"> 195.7934 </data>
                    <data bit_width="128"> 3479.7 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,2,2">
                <max>
                  <data bit_width="4"> 69.5422 </data>
                  <data bit_width="8"> 109.6688 </data>
                  <data bit_width="16"> 211.7064 </data>
                  <data bit_width="32"> 417.0823 </data>
                  <data bit_width="128"> 4350.5 </data>
                </max>
                <min>
                  <data bit_width="4"> 40.5411 </data>
                  <data bit_width="8"> 74.4291 </data>
                  <data bit_width="16"> 150.9996 </data>
                  <data bit_width="32"> 303.7450 </data>
                  <data bit_width="128"> 3943.4 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 51.8509 </data>
                    <data bit_width="8"> 92.5234 </data>
                    <data bit_width="16"> 173.0006 </data>
                    <data bit_width="32"> 356.8834 </data>
                    <data bit_width="128"> 4120.7 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 69.5422 </data>
                    <data bit_width="8"> 109.6688 </data>
                    <data bit_width="16"> 211.7064 </data>
                    <data bit_width="32"> 417.0823 </data>
                    <data bit_width="128"> 4350.5 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 40.5411 </data>
                    <data bit_width="8"> 74.4291 </data>
                    <data bit_width="16"> 150.9996 </data>
                    <data bit_width="32"> 303.7450 </data>
                    <data bit_width="128"> 3943.4 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,2,4">
                <max>
                  <data bit_width="4"> 118.9161 </data>
                  <data bit_width="8"> 203.8159 </data>
                  <data bit_width="16"> 359.6348 </data>
                  <data bit_width="32"> 715.5589 </data>
                  <data bit_width="128"> 5775.1 </data>
                </max>
                <min>
                  <data bit_width="4"> 71.7925 </data>
                  <data bit_width="8"> 123.5696 </data>
                  <data bit_width="16"> 224.7163 </data>
                  <data bit_width="32"> 471.9748 </data>
                  <data bit_width="128"> 4766.6 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 86.5228 </data>
                    <data bit_width="8"> 161.1237 </data>
                    <data bit_width="16"> 286.7791 </data>
                    <data bit_width="32"> 589.6545 </data>
                    <data bit_width="128"> 5139.3 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 118.9161 </data>
                    <data bit_width="8"> 203.8159 </data>
                    <data bit_width="16"> 359.6348 </data>
                    <data bit_width="32"> 715.5589 </data>
                    <data bit_width="128"> 5775.1 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 71.7925 </data>
                    <data bit_width="8"> 123.5696 </data>
                    <data bit_width="16"> 224.7163 </data>
                    <data bit_width="32"> 471.9748 </data>
                    <data bit_width="128"> 4766.6 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,4,1">
                <max>
                  <data bit_width="4"> 67.0058 </data>
                  <data bit_width="8"> 103.3606 </data>
                  <data bit_width="16"> 207.7953 </data>
                  <data bit_width="32"> 356.8437 </data>
                  <data bit_width="128"> 4113.2 </data>
                </max>
                <min>
                  <data bit_width="4"> 37.8930 </data>
                  <data bit_width="8"> 61.5822 </data>
                  <data bit_width="16"> 114.9500 </data>
                  <data bit_width="32"> 231.9924 </data>
                  <data bit_width="128"> 3688.1 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 46.3938 </data>
                    <data bit_width="8"> 78.0463 </data>
                    <data bit_width="16"> 132.8532 </data>
                    <data bit_width="32"> 298.5559 </data>
                    <data bit_width="128"> 3840.5 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 67.0058 </data>
                    <data bit_width="8"> 103.3606 </data>
                    <data bit_width="16"> 207.7953 </data>
                    <data bit_width="32"> 356.8437 </data>
                    <data bit_width="128"> 4113.2 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 37.8930 </data>
                    <data bit_width="8"> 61.5822 </data>
                    <data bit_width="16"> 114.9500 </data>
                    <data bit_width="32"> 231.9924 </data>
                    <data bit_width="128"> 3688.1 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,4,2">
                <max>
                  <data bit_width="4"> 83.7888 </data>
                  <data bit_width="8"> 148.2602 </data>
                  <data bit_width="16"> 257.7296 </data>
                  <data bit_width="32"> 496.2325 </data>
                  <data bit_width="128"> 4698.5 </data>
                </max>
                <min>
                  <data bit_width="4"> 50.9473 </data>
                  <data bit_width="8"> 85.5244 </data>
                  <data bit_width="16"> 169.1122 </data>
                  <data bit_width="32"> 347.4869 </data>
                  <data bit_width="128"> 4182.9 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 61.9036 </data>
                    <data bit_width="8"> 106.4697 </data>
                    <data bit_width="16"> 196.1122 </data>
                    <data bit_width="32"> 401.6104 </data>
                    <data bit_width="128"> 4318 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 83.7888 </data>
                    <data bit_width="8"> 148.2602 </data>
                    <data bit_width="16"> 257.7296 </data>
                    <data bit_width="32"> 496.2325 </data>
                    <data bit_width="128"> 4698.5 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 50.9473 </data>
                    <data bit_width="8"> 85.5244 </data>
                    <data bit_width="16"> 169.1122 </data>
                    <data bit_width="32"> 347.4869 </data>
                    <data bit_width="128"> 4182.9 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,4,4">
                <max>
                  <data bit_width="4"> 139.8267 </data>
                  <data bit_width="8"> 231.4904 </data>
                  <data bit_width="16"> 391.4349 </data>
                  <data bit_width="32"> 816.1765 </data>
                  <data bit_width="128"> 6110.7 </data>
                </max>
                <min>
                  <data bit_width="4"> 79.5438 </data>
                  <data bit_width="8"> 143.0618 </data>
                  <data bit_width="16"> 244.0108 </data>
                  <data bit_width="32"> 508.1832 </data>
                  <data bit_width="128"> 4948.8 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 101.2938 </data>
                    <data bit_width="8"> 174.8891 </data>
                    <data bit_width="16"> 311.2664 </data>
                    <data bit_width="32"> 635.7241 </data>
                    <data bit_width="128"> 5393.2 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 139.8267 </data>
                    <data bit_width="8"> 231.4904 </data>
                    <data bit_width="16"> 391.4349 </data>
                    <data bit_width="32"> 816.1765 </data>
                    <data bit_width="128"> 6110.7 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 79.5438 </data>
                    <data bit_width="8"> 143.0618 </data>
                    <data bit_width="16"> 244.0108 </data>
                    <data bit_width="32"> 508.1832 </data>
                    <data bit_width="128"> 4948.8 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,1,1">
                <max>
                  <data bit_width="4"> 78.9290 </data>
                  <data bit_width="8"> 142.9744 </data>
                  <data bit_width="16"> 244.0664 </data>
                  <data bit_width="32"> 477.0008 </data>
                  <data bit_width="128"> 4571.1 </data>
                </max>
                <min>
                  <data bit_width="4"> 44.7475 </data>
                  <data bit_width="8"> 86.6901 </data>
                  <data bit_width="16"> 159.1180 </data>
                  <data bit_width="32"> 333.8986 </data>
                  <data bit_width="128"> 3898.3 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 54.8174 </data>
                    <data bit_width="8"> 86.6901 </data>
                    <data bit_width="16"> 195.8404 </data>
                    <data bit_width="32"> 422.3318 </data>
                    <data bit_width="128"> 4242.3 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 78.9290 </data>
                    <data bit_width="8"> 142.9744 </data>
                    <data bit_width="16"> 244.0664 </data>
                    <data bit_width="32"> 477.0008 </data>
                    <data bit_width="128"> 4571.1 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 44.7475 </data>
                    <data bit_width="8"> 89.0959 </data>
                    <data bit_width="16"> 159.1180 </data>
                    <data bit_width="32"> 333.8986 </data>
                    <data bit_width="128"> 3898.3 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,1,2">
                <max>
                  <data bit_width="4"> 98.7029 </data>
                  <data bit_width="8"> 201.7215 </data>
                  <data bit_width="16"> 351.2638 </data>
                  <data bit_width="32"> 713.3400 </data>
                  <data bit_width="128"> 5413.3 </data>
                </max>
                <min>
                  <data bit_width="4"> 68.9929 </data>
                  <data bit_width="8"> 129.8528 </data>
                  <data bit_width="16"> 253.2118 </data>
                  <data bit_width="32"> 536.8629 </data>
                  <data bit_width="128"> 4797.2 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 83.1462 </data>
                    <data bit_width="8"> 144.3853 </data>
                    <data bit_width="16"> 289.4995 </data>
                    <data bit_width="32"> 598.5710 </data>
                    <data bit_width="128"> 5053.4 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 98.7029 </data>
                    <data bit_width="8"> 201.7215 </data>
                    <data bit_width="16"> 351.2638 </data>
                    <data bit_width="32"> 713.3400 </data>
                    <data bit_width="128"> 5413.3 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 68.9929 </data>
                    <data bit_width="8"> 129.8528 </data>
                    <data bit_width="16"> 253.2118 </data>
                    <data bit_width="32"> 536.8629 </data>
                    <data bit_width="128"> 4797.2 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,1,4">
                <max>
                  <data bit_width="4"> 180.3970 </data>
                  <data bit_width="8"> 324.6187 </data>
                  <data bit_width="16"> 629.2366 </data>
                  <data bit_width="32"> 1290.1 </data>
                  <data bit_width="128"> 8062.7 </data>
                </max>
                <min>
                  <data bit_width="4"> 112.1778 </data>
                  <data bit_width="8"> 208.7989 </data>
                  <data bit_width="16"> 395.7309 </data>
                  <data bit_width="32"> 803.9778 </data>
                  <data bit_width="128"> 6193.1 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 141.2339 </data>
                    <data bit_width="8"> 258.0294 </data>
                    <data bit_width="16"> 496.5216 </data>
                    <data bit_width="32"> 1032.2 </data>
                    <data bit_width="128"> 6980.1 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 180.3970 </data>
                    <data bit_width="8"> 324.6187 </data>
                    <data bit_width="16"> 629.2366 </data>
                    <data bit_width="32"> 1290.1 </data>
                    <data bit_width="128"> 8062.7 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 112.1778 </data>
                    <data bit_width="8"> 208.7989 </data>
                    <data bit_width="16"> 395.7309 </data>
                    <data bit_width="32"> 803.9778 </data>
                    <data bit_width="128"> 6193.1 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,2,1">
                <max>
                  <data bit_width="4"> 95.3404 </data>
                  <data bit_width="8"> 168.8513 </data>
                  <data bit_width="16"> 294.3015 </data>
                  <data bit_width="32"> 680.7032 </data>
                  <data bit_width="128"> 5015.2 </data>
                </max>
                <min>
                  <data bit_width="4"> 51.1008 </data>
                  <data bit_width="8"> 96.2636 </data>
                  <data bit_width="16"> 180.4914 </data>
                  <data bit_width="32"> 377.6214 </data>
                  <data bit_width="128"> 4062.3 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 61.8121 </data>
                    <data bit_width="8"> 96.2636 </data>
                    <data bit_width="16"> 210.9292 </data>
                    <data bit_width="32"> 453.2034 </data>
                    <data bit_width="128"> 4371.7 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 95.3404 </data>
                    <data bit_width="8"> 168.8513 </data>
                    <data bit_width="16"> 294.3015 </data>
                    <data bit_width="32"> 680.7032 </data>
                    <data bit_width="128"> 5015.2 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 51.1008 </data>
                    <data bit_width="8"> 103.0963 </data>
                    <data bit_width="16"> 180.4914 </data>
                    <data bit_width="32"> 377.6214 </data>
                    <data bit_width="128"> 4062.3 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,2,2">
                <max>
                  <data bit_width="4"> 111.0486 </data>
                  <data bit_width="8"> 200.6019 </data>
                  <data bit_width="16"> 403.3046 </data>
                  <data bit_width="32"> 772.2564 </data>
                  <data bit_width="128"> 5631.3 </data>
                </max>
                <min>
                  <data bit_width="4"> 75.1689 </data>
                  <data bit_width="8"> 138.7840 </data>
                  <data bit_width="16"> 267.8338 </data>
                  <data bit_width="32"> 562.1494 </data>
                  <data bit_width="128"> 4976.7 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 89.9178 </data>
                    <data bit_width="8"> 161.9066 </data>
                    <data bit_width="16"> 315.9150 </data>
                    <data bit_width="32"> 655.9431 </data>
                    <data bit_width="128"> 5264.5 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 111.0486 </data>
                    <data bit_width="8"> 200.6019 </data>
                    <data bit_width="16"> 403.3046 </data>
                    <data bit_width="32"> 772.2564 </data>
                    <data bit_width="128"> 5631.3 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 75.1689 </data>
                    <data bit_width="8"> 138.7840 </data>
                    <data bit_width="16"> 267.8338 </data>
                    <data bit_width="32"> 562.1494 </data>
                    <data bit_width="128"> 4976.7 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,2,4">
                <max>
                  <data bit_width="4"> 205.0537 </data>
                  <data bit_width="8"> 360.9079 </data>
                  <data bit_width="16"> 679.4906 </data>
                  <data bit_width="32"> 1381 </data>
                  <data bit_width="128"> 8321 </data>
                </max>
                <min>
                  <data bit_width="4"> 126.1937 </data>
                  <data bit_width="8"> 217.6192 </data>
                  <data bit_width="16"> 410.4709 </data>
                  <data bit_width="32"> 869.6191 </data>
                  <data bit_width="128"> 6451.2 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 147.9144 </data>
                    <data bit_width="8"> 269.4358 </data>
                    <data bit_width="16"> 514.3333 </data>
                    <data bit_width="32"> 1057.3 </data>
                    <data bit_width="128"> 7140.4 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 205.0537 </data>
                    <data bit_width="8"> 360.9079 </data>
                    <data bit_width="16"> 679.4906 </data>
                    <data bit_width="32"> 1381 </data>
                    <data bit_width="128"> 8321 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 126.1937 </data>
                    <data bit_width="8"> 217.6192 </data>
                    <data bit_width="16"> 410.4709 </data>
                    <data bit_width="32"> 869.6191 </data>
                    <data bit_width="128"> 6451.2 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,4,1">
                <max>
                  <data bit_width="4"> 127.5667 </data>
                  <data bit_width="8"> 453.3206 </data>
                  <data bit_width="16"> 386.7081 </data>
                  <data bit_width="32"> 734.3495 </data>
                  <data bit_width="128"> 5397 </data>
                </max>
                <min>
                  <data bit_width="4"> 63.7425 </data>
                  <data bit_width="8"> 120.6093 </data>
                  <data bit_width="16"> 207.9501 </data>
                  <data bit_width="32"> 428.4631 </data>
                  <data bit_width="128"> 4336.7 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 76.2537 </data>
                    <data bit_width="8"> 122.0686 </data>
                    <data bit_width="16"> 252.0859 </data>
                    <data bit_width="32"> 537.1251 </data>
                    <data bit_width="128"> 4692 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 127.5667 </data>
                    <data bit_width="8"> 453.3206 </data>
                    <data bit_width="16"> 386.7081 </data>
                    <data bit_width="32"> 734.3495 </data>
                    <data bit_width="128"> 5397 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 63.7425 </data>
                    <data bit_width="8"> 120.6093 </data>
                    <data bit_width="16"> 207.9501 </data>
                    <data bit_width="32"> 428.4631 </data>
                    <data bit_width="128"> 4336.7 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,4,2">
                <max>
                  <data bit_width="4"> 151.9785 </data>
                  <data bit_width="8"> 240.0016 </data>
                  <data bit_width="16"> 460.9129 </data>
                  <data bit_width="32"> 984.0888 </data>
                  <data bit_width="128"> 6400.7 </data>
                </max>
                <min>
                  <data bit_width="4"> 87.9286 </data>
                  <data bit_width="8"> 156.2693 </data>
                  <data bit_width="16"> 304.2787 </data>
                  <data bit_width="32"> 642.4151 </data>
                  <data bit_width="128"> 5271.6 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 104.2400 </data>
                    <data bit_width="8"> 182.1753 </data>
                    <data bit_width="16"> 348.5039 </data>
                    <data bit_width="32"> 718.4535 </data>
                    <data bit_width="128"> 5466.9 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 151.9785 </data>
                    <data bit_width="8"> 240.0016 </data>
                    <data bit_width="16"> 460.9129 </data>
                    <data bit_width="32"> 984.0888 </data>
                    <data bit_width="128"> 6400.7 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 87.9286 </data>
                    <data bit_width="8"> 156.2693 </data>
                    <data bit_width="16"> 304.2787 </data>
                    <data bit_width="32"> 642.4151 </data>
                    <data bit_width="128"> 5271.6 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,4,4">
                <max>
                  <data bit_width="4"> 230.4246 </data>
                  <data bit_width="8"> 384.0279 </data>
                  <data bit_width="16"> 768.4489 </data>
                  <data bit_width="32"> 1729 </data>
                  <data bit_width="128"> 8966.3 </data>
                </max>
                <min>
                  <data bit_width="4"> 141.3295 </data>
                  <data bit_width="8"> 246.7914 </data>
                  <data bit_width="16"> 462.5402 </data>
                  <data bit_width="32"> 972.9071 </data>
                  <data bit_width="128"> 6848.6 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 162.3209 </data>
                    <data bit_width="8"> 289.6004 </data>
                    <data bit_width="16"> 544.8672 </data>
                    <data bit_width="32"> 1130.9 </data>
                    <data bit_width="128"> 7532.2 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 230.4246 </data>
                    <data bit_width="8"> 384.0279 </data>
                    <data bit_width="16"> 768.4489 </data>
                    <data bit_width="32"> 1729 </data>
                    <data bit_width="128"> 8966.3 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 141.3295 </data>
                    <data bit_width="8"> 246.7914 </data>
                    <data bit_width="16"> 462.5402 </data>
                    <data bit_width="32"> 972.9071 </data>
                    <data bit_width="128"> 6848.6 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,1,1">
                <max>
                  <data bit_width="4"> 140.8920 </data>
                  <data bit_width="8"> 221.7878 </data>
                  <data bit_width="16"> 517.5786 </data>
                  <data bit_width="32"> 3603.8 </data>
                  <data bit_width="128"> 7049.9 </data>
                </max>
                <min>
                  <data bit_width="4"> 88.6583 </data>
                  <data bit_width="8"> 168.1806 </data>
                  <data bit_width="16"> 343.8908 </data>
                  <data bit_width="32"> 3295.7 </data>
                  <data bit_width="128"> 5147.5 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 101.9873 </data>
                    <data bit_width="8"> 195.2877 </data>
                    <data bit_width="16"> 394.8924 </data>
                    <data bit_width="32"> 3435.8 </data>
                    <data bit_width="128"> 5617.2 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 140.8920 </data>
                    <data bit_width="8"> 221.7878 </data>
                    <data bit_width="16"> 517.5786 </data>
                    <data bit_width="32"> 3603.8 </data>
                    <data bit_width="128"> 7049.9 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 88.6583 </data>
                    <data bit_width="8"> 168.1806 </data>
                    <data bit_width="16"> 343.8908 </data>
                    <data bit_width="32"> 3295.7 </data>
                    <data bit_width="128"> 5147.5 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,1,2">
                <max>
                  <data bit_width="4"> 210.7749 </data>
                  <data bit_width="8"> 348.5937 </data>
                  <data bit_width="16"> 671.4823 </data>
                  <data bit_width="32"> 3997.1 </data>
                  <data bit_width="128"> 7845.2 </data>
                </max>
                <min>
                  <data bit_width="4"> 130.2411 </data>
                  <data bit_width="8"> 245.3770 </data>
                  <data bit_width="16"> 507.0766 </data>
                  <data bit_width="32"> 3644.7 </data>
                  <data bit_width="128"> 6832.7 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 152.2326 </data>
                    <data bit_width="8"> 266.5857 </data>
                    <data bit_width="16"> 551.9550 </data>
                    <data bit_width="32"> 3755.4 </data>
                    <data bit_width="128"> 7204.4 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 210.7749 </data>
                    <data bit_width="8"> 348.5937 </data>
                    <data bit_width="16"> 671.4823 </data>
                    <data bit_width="32"> 3997.1 </data>
                    <data bit_width="128"> 7845.2 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 130.2411 </data>
                    <data bit_width="8"> 245.3770 </data>
                    <data bit_width="16"> 507.0766 </data>
                    <data bit_width="32"> 3644.7 </data>
                    <data bit_width="128"> 6832.7 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,1,4">
                <max>
                  <data bit_width="4"> 388.9868 </data>
                  <data bit_width="8"> 649.0566 </data>
                  <data bit_width="16"> 1198.6 </data>
                  <data bit_width="32"> 5124.6 </data>
                  <data bit_width="128"> 13279.9 </data>
                </max>
                <min>
                  <data bit_width="4"> 202.3507 </data>
                  <data bit_width="8"> 391.2351 </data>
                  <data bit_width="16"> 754.3760 </data>
                  <data bit_width="32"> 4161.3 </data>
                  <data bit_width="128"> 10236.2 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 253.4321 </data>
                    <data bit_width="8"> 464.5366 </data>
                    <data bit_width="16"> 920.6589 </data>
                    <data bit_width="32"> 4521.1 </data>
                    <data bit_width="128"> 10800.2 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 388.9868 </data>
                    <data bit_width="8"> 649.0566 </data>
                    <data bit_width="16"> 1198.6 </data>
                    <data bit_width="32"> 5124.6 </data>
                    <data bit_width="128"> 13279.9 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 202.3507 </data>
                    <data bit_width="8"> 391.2351 </data>
                    <data bit_width="16"> 754.3760 </data>
                    <data bit_width="32"> 4161.3 </data>
                    <data bit_width="128"> 10236.2 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,2,1">
                <max>
                  <data bit_width="4"> 160.8217 </data>
                  <data bit_width="8"> 300.0117 </data>
                  <data bit_width="16"> 622.6309 </data>
                  <data bit_width="32"> 3739.6 </data>
                  <data bit_width="128"> 7623.9 </data>
                </max>
                <min>
                  <data bit_width="4"> 99.3635 </data>
                  <data bit_width="8"> 182.1013 </data>
                  <data bit_width="16"> 365.0015 </data>
                  <data bit_width="32"> 3355.5 </data>
                  <data bit_width="128"> 5398.2 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 113.8838 </data>
                    <data bit_width="8"> 210.6943 </data>
                    <data bit_width="16"> 418.4265 </data>
                    <data bit_width="32"> 3477 </data>
                    <data bit_width="128"> 5790.8 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 160.8217 </data>
                    <data bit_width="8"> 300.0117 </data>
                    <data bit_width="16"> 622.6309 </data>
                    <data bit_width="32"> 3739.6 </data>
                    <data bit_width="128"> 7623.9 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 99.3635 </data>
                    <data bit_width="8"> 182.1013 </data>
                    <data bit_width="16"> 365.0015 </data>
                    <data bit_width="32"> 3355.5 </data>
                    <data bit_width="128"> 5398.2 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,2,2">
                <max>
                  <data bit_width="4"> 235.5584 </data>
                  <data bit_width="8"> 425.1257 </data>
                  <data bit_width="16"> 832.0634 </data>
                  <data bit_width="32"> 4299.3 </data>
                  <data bit_width="128"> 8102.7 </data>
                </max>
                <min>
                  <data bit_width="4"> 141.0872 </data>
                  <data bit_width="8"> 259.5631 </data>
                  <data bit_width="16"> 528.1114 </data>
                  <data bit_width="32"> 3706.9 </data>
                  <data bit_width="128"> 7216.7 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 164.7980 </data>
                    <data bit_width="8"> 294.8267 </data>
                    <data bit_width="16"> 600.1563 </data>
                    <data bit_width="32"> 3838.1 </data>
                    <data bit_width="128"> 7445.7 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 235.5584 </data>
                    <data bit_width="8"> 425.1257 </data>
                    <data bit_width="16"> 832.0634 </data>
                    <data bit_width="32"> 4299.3 </data>
                    <data bit_width="128"> 8102.7 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 141.0872 </data>
                    <data bit_width="8"> 259.5631 </data>
                    <data bit_width="16"> 528.1114 </data>
                    <data bit_width="32"> 3706.9 </data>
                    <data bit_width="128"> 7216.7 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,2,4">
                <max>
                  <data bit_width="4"> 419.4192 </data>
                  <data bit_width="8"> 654.6131 </data>
                  <data bit_width="16"> 1271.4 </data>
                  <data bit_width="32"> 4951.5 </data>
                  <data bit_width="128"> 13401.7 </data>
                </max>
                <min>
                  <data bit_width="4"> 213.2508 </data>
                  <data bit_width="8"> 405.4702 </data>
                  <data bit_width="16"> 777.9342 </data>
                  <data bit_width="32"> 4281 </data>
                  <data bit_width="128"> 10325.8 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 265.6632 </data>
                    <data bit_width="8"> 479.3258 </data>
                    <data bit_width="16"> 943.7398 </data>
                    <data bit_width="32"> 4568.2 </data>
                    <data bit_width="128"> 11208.1 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 419.4192 </data>
                    <data bit_width="8"> 654.6131 </data>
                    <data bit_width="16"> 1271.4 </data>
                    <data bit_width="32"> 4951.5 </data>
                    <data bit_width="128"> 13401.7 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 213.2508 </data>
                    <data bit_width="8"> 405.4702 </data>
                    <data bit_width="16"> 777.9342 </data>
                    <data bit_width="32"> 4281 </data>
                    <data bit_width="128"> 10325.8 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,4,1">
                <max>
                  <data bit_width="4"> 193.7529 </data>
                  <data bit_width="8"> 425.1550 </data>
                  <data bit_width="16"> 619.9796 </data>
                  <data bit_width="32"> 4400.9 </data>
                  <data bit_width="128"> 8222.9 </data>
                </max>
                <min>
                  <data bit_width="4"> 120.8241 </data>
                  <data bit_width="8"> 216.6663 </data>
                  <data bit_width="16"> 425.8960 </data>
                  <data bit_width="32"> 3489 </data>
                  <data bit_width="128"> 5898.6 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 145.0569 </data>
                    <data bit_width="8"> 251.8188 </data>
                    <data bit_width="16"> 483.2270 </data>
                    <data bit_width="32"> 3593.2 </data>
                    <data bit_width="128"> 6252.3 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 193.7529 </data>
                    <data bit_width="8"> 425.1550 </data>
                    <data bit_width="16"> 619.9796 </data>
                    <data bit_width="32"> 4400.9 </data>
                    <data bit_width="128"> 8222.9 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 120.8241 </data>
                    <data bit_width="8"> 216.6663 </data>
                    <data bit_width="16"> 425.8960 </data>
                    <data bit_width="32"> 3489 </data>
                    <data bit_width="128"> 5898.6 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,4,2">
                <max>
                  <data bit_width="4"> 294.8621 </data>
                  <data bit_width="8"> 575.7906 </data>
                  <data bit_width="16"> 981.5940 </data>
                  <data bit_width="32"> 4995.4 </data>
                  <data bit_width="128"> 8921.3 </data>
                </max>
                <min>
                  <data bit_width="4"> 162.4859 </data>
                  <data bit_width="8"> 298.2977 </data>
                  <data bit_width="16"> 596.0532 </data>
                  <data bit_width="32"> 3840.6 </data>
                  <data bit_width="128"> 7756.9 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 189.9802 </data>
                    <data bit_width="8"> 326.9024 </data>
                    <data bit_width="16"> 646.6494 </data>
                    <data bit_width="32"> 3930.2 </data>
                    <data bit_width="128"> 7946 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 294.8621 </data>
                    <data bit_width="8"> 575.7906 </data>
                    <data bit_width="16"> 981.5940 </data>
                    <data bit_width="32"> 4995.4 </data>
                    <data bit_width="128"> 8921.3 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 162.4859 </data>
                    <data bit_width="8"> 298.2977 </data>
                    <data bit_width="16"> 596.0532 </data>
                    <data bit_width="32"> 3840.6 </data>
                    <data bit_width="128"> 7756.9 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,4,4">
                <max>
                  <data bit_width="4"> 403.1370 </data>
                  <data bit_width="8"> 721.5023 </data>
                  <data bit_width="16"> 1406.6 </data>
                  <data bit_width="32"> 5664.3 </data>
                  <data bit_width="128"> 15397.2 </data>
                </max>
                <min>
                  <data bit_width="4"> 246.9478 </data>
                  <data bit_width="8"> 457.6314 </data>
                  <data bit_width="16"> 863.1900 </data>
                  <data bit_width="32"> 4450.7 </data>
                  <data bit_width="128"> 10877.1 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 289.8372 </data>
                    <data bit_width="8"> 524.6943 </data>
                    <data bit_width="16"> 994.2303 </data>
                    <data bit_width="32"> 4692.1 </data>
                    <data bit_width="128"> 11970.1 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 403.1370 </data>
                    <data bit_width="8"> 721.5023 </data>
                    <data bit_width="16"> 1406.6 </data>
                    <data bit_width="32"> 5664.3 </data>
                    <data bit_width="128"> 15397.2 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 246.9478 </data>
                    <data bit_width="8"> 457.6314 </data>
                    <data bit_width="16"> 863.1900 </data>
                    <data bit_width="32"> 4450.7 </data>
                    <data bit_width="128"> 10877.1 </data>
                  </priority>
                </typ>
              </parameters>
            </est_index>
          </est_type>

          <est_type name="function_cycle">
            <unit> cycle </unit>

            <est_index name="cycle">
              <parameters name="4,1,1">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="4,1,2">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="4,1,4">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="4,2,1">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="4,2,2">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="4,2,4">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="4,4,1">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="4,4,2">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="4,4,4">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="8,1,1">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="8,1,2">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="8,1,4">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="8,2,1">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="8,2,2">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="8,2,4">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="8,4,1">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="8,4,2">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="8,4,4">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="16,1,1">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="16,1,2">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="16,1,4">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="16,2,1">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="16,2,2">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="16,2,4">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="16,4,1">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="16,4,2">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="16,4,4">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="32,1,1">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="32,1,2">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="32,1,4">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="32,2,1">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="32,2,2">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="32,2,4">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="32,4,1">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="32,4,2">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="32,4,4">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
            </est_index>

            <est_index name="latency">
              <parameters name="4,1,1">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="4,1,2">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="4,1,4">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="4,2,1">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="4,2,2">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="4,2,4">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="4,4,1">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="4,4,2">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="4,4,4">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="8,1,1">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="8,1,2">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="8,1,4">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="8,2,1">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="8,2,2">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="8,2,4">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="8,4,1">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="8,4,2">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="8,4,4">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="16,1,1">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="16,1,2">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="16,1,4">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="16,2,1">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="16,2,2">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="16,2,4">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="16,4,1">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="16,4,2">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="16,4,4">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="32,1,1">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="32,1,2">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="32,1,4">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="32,2,1">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="32,2,2">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="32,2,4">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="32,4,1">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="32,4,2">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="32,4,4">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
            </est_index>

            <est_index name="throughput">
              <parameters name="4,1,1">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="4,1,2">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="4,1,4">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="4,2,1">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="4,2,2">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="4,2,4">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="4,4,1">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="4,4,2">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="4,4,4">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="8,1,1">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="8,1,2">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="8,1,4">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="8,2,1">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="8,2,2">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="8,2,4">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="8,4,1">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="8,4,2">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="8,4,4">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="16,1,1">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="16,1,2">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="16,1,4">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="16,2,1">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="16,2,2">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="16,2,4">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="16,4,1">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="16,4,2">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="16,4,4">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="32,1,1">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="32,1,2">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="32,1,4">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="32,2,1">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="32,2,2">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="32,2,4">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="32,4,1">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="32,4,2">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="32,4,4">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="write0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read0">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read1">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read2">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read3">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
            </est_index>
          </est_type>

          <est_type name="function_power">
            <!-- Dummy yet -->
          </est_type>
        </library>
      </estimation_data>

      <estimation_method>
         
        <est_type name="shape">

          <est_index name="area">

            <parameters name="4,1,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(4,1,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,1,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(4,1,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,1,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(4,1,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,2,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(4,2,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,2,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(4,2,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,2,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(4,2,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,4,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(4,4,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,4,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(4,4,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,4,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(4,4,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="8,1,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(8,1,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="8,1,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(8,1,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="8,1,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(8,1,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="8,2,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(8,2,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="8,2,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(8,2,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="8,2,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(8,2,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="8,4,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(8,4,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="8,4,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(8,4,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="8,4,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(8,4,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,1,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(16,1,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,1,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(16,1,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,1,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(16,1,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,2,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(16,2,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,2,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(16,2,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,2,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(16,2,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,4,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(16,4,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,4,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(16,4,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,4,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(16,4,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,1,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(32,1,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,1,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(32,1,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,1,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(32,1,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,2,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(32,2,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,2,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(32,2,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,2,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(32,2,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,4,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(32,4,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,4,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(32,4,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,4,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for registerfile(32,4,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

          </est_index>

           <est_index name="aspect_ratio">

             <!-- Dummy yet -->

           </est_index>
		
           <est_index name="height">

             <!-- Dummy yet -->

           </est_index>
		
           <est_index name="width">

             <!-- Dummy yet -->

           </est_index>
		
        </est_type>

        <est_type name="timing">

          <est_index name="delay">

            <parameters name="4,1,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(4,1,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,1,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(4,1,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,1,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(4,1,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,2,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(4,2,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,2,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(4,2,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,2,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(4,2,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,4,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(4,4,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,4,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(4,4,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,4,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(4,4,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="8,1,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(8,1,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="8,1,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(8,1,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="8,1,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(8,1,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="8,2,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(8,2,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="8,2,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(8,2,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="8,2,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(8,2,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="8,4,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(8,4,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="8,4,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(8,4,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="8,4,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(8,4,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,1,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(16,1,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,1,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(16,1,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,1,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(16,1,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,2,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(16,2,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,2,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(16,2,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,2,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(16,2,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,4,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(16,4,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,4,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(16,4,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,4,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(16,4,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,1,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(32,1,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,1,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(32,1,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,1,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(32,1,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,2,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(32,2,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,2,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(32,2,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,2,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(32,2,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,4,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(32,4,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,4,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(32,4,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,4,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for registerfile(32,4,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

          </est_index>

          <est_index name="delay_fullpath">

            <parameters name="4,1,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(4,1,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="4,1,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(4,1,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="4,1,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(4,1,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="4,2,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(4,2,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="4,2,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(4,2,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="4,2,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(4,2,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="4,4,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(4,4,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="4,4,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(4,4,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="4,4,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(4,4,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="16,1,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(16,1,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="16,1,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(16,1,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="16,1,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(16,1,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="16,2,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(16,2,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="16,2,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(16,2,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="16,2,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(16,2,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="16,4,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(16,4,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="16,4,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(16,4,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="16,4,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(16,4,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="32,1,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(32,1,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="32,1,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(32,1,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="32,1,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(32,1,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="32,2,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(32,2,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="32,2,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(32,2,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="32,2,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(32,2,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="32,4,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(32,4,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="32,4,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(32,4,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="32,4,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for registerfile(32,4,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

          </est_index>

        </est_type>

        <est_type name="power">

          <est_index name="static_power">

            <parameters name="4,1,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(4,1,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,1,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(4,1,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,1,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(4,1,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,2,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(4,2,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,2,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(4,2,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,2,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(4,2,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,4,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(4,4,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,4,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(4,4,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,4,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(4,4,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="8,1,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(8,1,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="8,1,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(8,1,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="8,1,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(8,1,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="8,2,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(8,2,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="8,2,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(8,2,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="8,2,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(8,2,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="8,4,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(8,4,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="8,4,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(8,4,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="8,4,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(8,4,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,1,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(16,1,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,1,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(16,1,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,1,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(16,1,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,2,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(16,2,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,2,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(16,2,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,2,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(16,2,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,4,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(16,4,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,4,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(16,4,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,4,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(16,4,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,1,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(32,1,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,1,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(32,1,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,1,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(32,1,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,2,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(32,2,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,2,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(32,2,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,2,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(32,2,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,4,1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(32,4,1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,4,2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(32,4,2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,4,4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for registerfile(32,4,4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[5]")) {
    print STDOUT ("Data file '$ARGV[5]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

          </est_index>

        </est_type>

        <est_type name="function_cycle">
          <est_index name="cycle">
            <parameters name="4,1,1">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="4,1,2">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="4,1,4">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="4,2,1">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="4,2,2">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="4,2,4">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="4,4,1">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="4,4,2">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="4,4,4">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="8,1,1">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="8,1,2">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="8,1,4">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="8,2,1">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="8,2,2">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="8,2,4">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="8,4,1">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="8,4,2">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="8,4,4">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="16,1,1">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="16,1,2">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="16,1,4">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="16,2,1">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="16,2,2">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="16,2,4">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="16,4,1">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="16,4,2">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="16,4,4">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="32,1,1">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="32,1,2">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="32,1,4">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="32,2,1">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="32,2,2">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="32,2,4">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="32,4,1">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="32,4,2">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="32,4,4">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>
          </est_index>

          <est_index name="latency">
            <parameters name="4,1,1">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="4,1,2">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="4,1,4">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="4,2,1">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="4,2,2">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="4,2,4">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="4,4,1">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="4,4,2">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="4,4,4">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="8,1,1">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="8,1,2">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="8,1,4">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="8,2,1">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="8,2,2">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="8,2,4">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="8,4,1">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="8,4,2">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="8,4,4">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="16,1,1">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="16,1,2">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="16,1,4">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="16,2,1">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="16,2,2">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="16,2,4">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="16,4,1">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="16,4,2">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="16,4,4">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="32,1,1">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="32,1,2">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="32,1,4">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="32,2,1">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="32,2,2">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="32,2,4">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="32,4,1">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="32,4,2">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="32,4,4">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>
          </est_index>

          <est_index name="throughput">
            <parameters name="4,1,1">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="4,1,2">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="4,1,4">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="4,2,1">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="4,2,2">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="4,2,4">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="4,4,1">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="4,4,2">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="4,4,4">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="8,1,1">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="8,1,2">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="8,1,4">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="8,2,1">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="8,2,2">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="8,2,4">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="8,4,1">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="8,4,2">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="8,4,4">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="16,1,1">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="16,1,2">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="16,1,4">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="16,2,1">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="16,2,2">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="16,2,4">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="16,4,1">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="16,4,2">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="16,4,4">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="32,1,1">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="32,1,2">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="32,1,4">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="32,2,1">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="32,2,2">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="32,2,4">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="32,4,1">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="32,4,2">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="32,4,4">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[4]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>
          </est_index>

        </est_type>

        <est_type name="function_power">

        </est_type>

    
      </estimation_method>

    </estimation>

  </model>
</FHM>
