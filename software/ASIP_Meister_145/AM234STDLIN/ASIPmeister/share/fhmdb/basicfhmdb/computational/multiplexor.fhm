<?xml version="1.0" encoding="UTF-8" ?>
<!-- Modified by T.Hamabe on 2006/12/05 -->
<!-- Modified by T.Hamabe on 2006/11/30 -->
<FHM>
  <model_name> multiplexor </model_name>

  <model>
    <design_level> behavior </design_level>
    <version> 1.0 </version>
    <author> <![CDATA[ Tak. Tokihisa ]]> </author>
    <affiliation> <![CDATA[ Osaka Univ. ]]> </affiliation>
    <model_info> <![CDATA[
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                %
%    Copyright 2008 ASIP Solutions, Inc. All rights reserved.    %
%              Copyright 2002-2005 PEAS Project                  %
%                                                                %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
]]> </model_info>

    <parameter>
      <parameter_value key="bit_width">
        <value> 1 </value>
        <value> 2 </value>
        <value> 3 </value>
        <value> 4 </value>
        <value> 5 </value>
        <value> 6 </value>
        <value> 7 </value>
        <value> 8 </value>
        <value> 9 </value>
        <value> 10 </value>
        <value> 11 </value>
        <value> 12 </value>
        <value> 13 </value>
        <value> 14 </value>
        <value> 15 </value>
        <value> 16 </value>
        <value> 17 </value>
        <value> 18 </value>
        <value> 19 </value>
        <value> 20 </value>
        <value> 21 </value>
        <value> 22 </value>
        <value> 23 </value>
        <value> 24 </value>
        <value> 25 </value>
        <value> 26 </value>
        <value> 27 </value>
        <value> 28 </value>
        <value> 29 </value>
        <value> 30 </value>
        <value> 31 </value>
        <value> 32 </value>
        <value> 64 </value>
        <value> 128 </value>
      </parameter_value>
      <parameter_value key="number_of_ports">
        <value> 2 </value>
        <value> 3 </value>
        <value> 4 </value>
        <value> 5 </value>
        <value> 6 </value>
        <value> 7 </value>
        <value> 8 </value>
        <value> 9 </value>
        <value> 10 </value>
        <value> 11 </value>
        <value> 12 </value>
        <value> 13 </value>
        <value> 14 </value>
        <value> 15 </value>
        <value> 16 </value>
      </parameter_value>
    </parameter>

    <function_description>
      <script>
        <![CDATA[
#!/usr/bin/perl
# this script generates multiplexor function definition in behavior level
# parameter : bit_width number_of_ports

if ($#ARGV != 1){
    print "number of parameters is wrong.\n";
    print "usage : this_script bit_width number_of_ports\n";
    exit (100);
}

$bit_width = $ARGV[0];
$number_of_ports = $ARGV[1];
$number_of_ports2 = logn(2, $ARGV[1]);
sub logn {
    my ($p, $q) = @_;
    log($q)/log($p);
}

if ($number_of_ports == 1){
    print "number_of_ports 1 is not supported.\n";
    exit (100);
}

$a = int $number_of_ports2;
$b = $number_of_ports2 - $a;
if ($b != 0){
    $number_of_ports2 = $a + 1;
}

if ($bit_width == 1){
    $data1 = "";
}
else{
    $w = $bit_width - 1;
    $data1 = "[" . $w .":0]";
}

if ($number_of_ports2 == 1){
    $data2 = "";
    $v2    = "bit";
}
else{
    $w2 = $number_of_ports2 - 1;
    $data2 = "[" . $w2 .":0]";
    $v2    = "bit_vector";
}
{
    print <<FHM_DL_FUNC_BEGIN1;
/** ${number_of_ports} multiplexor */

model mux${bit_width}_${number_of_ports}{
  port{
FHM_DL_FUNC_BEGIN1
}
print "    in  ";
for ($i=0; $i < $number_of_ports ; ++$i){
    print "data_in${i}${data1}, ";
}

print "sel${data2};\n";
{
    print <<FHM_DL_FUNC_BEGIN2;
    out data_out${data1};
  }

  /** select */
  function sel{
    input{
FHM_DL_FUNC_BEGIN2
}

for ($i=0; $i < $number_of_ports ; ++$i){
    print "      unsigned data_in$i;\n";
}
{
print <<FHM_DL_FUNC
      $v2 sel;
    }
    output{
      unsigned data_out;
    }
  }
}
FHM_DL_FUNC
}

exit (0);
        ]]>
      </script>
    </function_description>

    <function_conv>
      <script>
        <![CDATA[
#!/usr/bin/perl
# this script generates multiplexor function definition in behavior level
# parameter : bit_width number_of_ports

if ($#ARGV != 1){
    print "number of parameters is wrong.\n";
    print "usage : this_script bit_width number_of_ports\n";
    exit (100);
}

$bit_width = $ARGV[0];
$number_of_ports = $ARGV[1];
$number_of_ports2 = logn(2, $ARGV[1]);
sub logn {
    my ($p, $q) = @_;
    log($q)/log($p);
}

if ($number_of_ports == 1){
    print "number_of_ports 1 is not supported.\n";
    exit (100);
}

$a = int $number_of_ports2;
$b = $number_of_ports2 - $a;
if ($b != 0){
    $number_of_ports2 = $a + 1;
}

if ($bit_width == 1){
    $data1 = "";
}
else{
    $w = $bit_width - 1;
    $data1 = "[" . $w .":0]";
}

if ($number_of_ports2 == 1){
    $data2 = "";
}
else{
    $w2 = $number_of_ports2 - 1;
    $data2 = "[" . $w2 .":0]";
}

{
    print <<FHM_DL_FUNC_BEGIN;
/** select */
function sel{
  input{
FHM_DL_FUNC_BEGIN
}

for ($i=0; $i < $number_of_ports ; ++$i){
    print "    bit [$w:0] data_in$i;\n";
}
print "    bit [$w2:0] sel;\n";
{
print <<FHM_DL_FUNC
  }
  output{
    bit [$w:0] data_out;
  }

  control{
  }

  protocol{
  }
}
FHM_DL_FUNC
}

exit (0);
        ]]>
      </script>
    </function_conv>

    <function_port>
      <script>
        <![CDATA[
#!/usr/bin/perl
# this script generates multiplexor port infomation in behavior level
# parameter : bit_width number_of_ports

if ($#ARGV != 1){
    print "number of parameters is wrong.\n";
    print "usage : this_script bit_width number_of_ports\n";
    exit (100);
}

$bit_width     = $ARGV[0];
$number_of_ports     = $ARGV[1];
$number_of_ports2    = logn(2, $ARGV[1]);
sub logn {
    my ($p, $q) = @_;
    log($q)/log($p);
}

if ($number_of_ports == 1){
    print "number_of_ports 1 is not supported.\n";
    exit (100);
}


$a = int $number_of_ports2;
$b = $number_of_ports2 - $a;
if ($b != 0){
    $number_of_ports2 = $a + 1;
}



if ($bit_width!=1){
    for ($i = 0; $i <= $number_of_ports-1 ; ++$i){
	print "data_in";
        print $i;
	print "	in	bit_vector   ";
	print $bit_width-1;
	print "   0";
	print "	data\n";
    }

}
else{
    for ($i = 0; $i <= $number_of_ports-1 ; ++$i){
	print "data_in";
        print $i;
	print "	in	bit		data";
	print "\n";
    }
}


if ($number_of_ports2 != 1){
    print "sel	in	bit_vector   ";
    print $number_of_ports2-1;
    print "   0";
    print "	data\n";
}
else{
    print "sel	in	bit		data\n";
}


if ($bit_width!=1){
    print "data_out	out	bit_vector   ";
    print $bit_width-1;
    print "   0";
    print "	data\n";
}
else{
    print "data_out	out	bit		data\n";
}
exit (0);
        ]]>
      </script>
    </function_port>

    <design>
      <design_lang> vhdl </design_lang>

      <instance>
        <script>
          <![CDATA[
#!/usr/bin/perl
# this script generates  multiplexor instance in behavior level
# parameter : instance_name bit_width number_of_ports

if ($#ARGV != 2){
    print "number of parameters is wrong.\n";
    print "usage : this_script instance_name bit_width number_of_ports\n";
    exit (100);
}

$instance_name = $ARGV[0];
$bit_width     = $ARGV[1];
$number_of_ports     = $ARGV[2];

if ($number_of_ports == 1){
    print "number_of_ports 1 is not supported.\n";
    exit (100);
}

$number_of_ports2    = logn(2, $number_of_ports);
sub logn {
    my ($p, $q) = @_;
    log($q)/log($p);
}

$a = int $number_of_ports2;
$b = $number_of_ports2 - $a;
if ($b != 0){
    $number_of_ports2 = $a + 1;
}


if ($bit_width == 1){
    $data1 = "";
}
else{
    $w = $bit_width - 1;
    $data1 = "_vector($w downto 0)";
}

if ($number_of_ports2 == 1){
    $data2 = "";
}
else{
    $w2 = $number_of_ports2 - 1;
    $data2 = "_vector($w2 downto 0)";
}

if ($number_of_ports2 == 1){
    $data3 =  "data_out <= data_in0 when sel = \'0\' else\n--            : data_out <= data_in1";
}
else{
    for ($i = 0; $i <= $number_of_ports-1 ; ++$i){
        $sel_string = '';
        if ($i != 0){
            $f = 0;
	    for ($d = $i; $d != 0; ++$f){
	        $e = $d%2;
	        $d = ($d - $e)/2;
	        $sel_string = $e . $sel_string;
	    }
	    if ($f != $number_of_ports2){
	        for (;$f != $number_of_ports2; ++$f){
		    $sel_string = '0' . $sel_string;
	        }
	    }
        }
        else{
	    for ($d = 0; $d != $number_of_ports2; ++$d){
	        $sel_string = '0' . $sel_string;
	    }
        }
        if ($i == 0){
	    $data3 = "data_out <= data_in0 when sel = \"";
            $data3 = $data3 . $sel_string;
	    $data3 = $data3 . "\" else\n";
        }
	elsif ($i != $number_of_ports -1) {
            $data3 = $data3 . "--            : data_in";
	    $data3 = $data3 . $i;
	    $data3 = $data3 . " when sel = \"";
	    $data3 = $data3 . $sel_string;
	    $data3 = $data3 . "\" else\n";
        }
	else {
	    $data3 = $data3 . "--            : data_in";
	    $data3 = $data3 . $i;
	    $data3 = $data3 . ";";
	}
        
    }     

}


print <<FHM_DL_INSTANCE;
-- VHDL Preprocessor version 0.57
-- module     : $bit_width-bit $number_of_ports-port multiplexor
-- feature    : select one input from n input ports.
-- references : start from scratch
-- author     : Tak. Tokihisa
-- version    : 1.0  : first cut 2002/01/15

-- Functionality : behavior level
--  port
--   data_in  : input data
--   data_out : selected data 
--   sel     : $data3



library ieee;
  use ieee.std_logic_1164.all;
  use ieee.std_logic_unsigned.all;
  use ieee.std_logic_arith.all;

entity $instance_name is
  port (
FHM_DL_INSTANCE

for ($i = 0; $i <= $number_of_ports-1 ; ++$i){
  print "        data_in";
  print $i;
  print " : in std_logic$data1;";
  print "\n";
}

{
print <<FHM_DL_INSTANCE2
        sel      : in std_logic$data2;
        data_out : out std_logic$data1);
end $instance_name;

architecture behavior of $instance_name is

begin
FHM_DL_INSTANCE2
}

print "  process (sel, "; 
for ($i = 0; $i <= $number_of_ports-2 ; ++$i){
  print "data_in";
  print $i;
  print ", ";
}
print "data_in";
print $number_of_ports-1;
print ")\n";
print "  begin\n";

if ($number_of_ports2 == 1){
    print <<FHM_DL_INSTANCE3;
    if sel = '0' then
      data_out <= data_in0;
    elsif sel = '1' then
      data_out <= data_in1;
    else
      data_out <= (others => 'X');
    end if;
FHM_DL_INSTANCE3
}
else{
    for ($i = 0; $i <= $number_of_ports-1 ; ++$i){
        $sel_string = '';
        if ($i != 0){
            $f = 0;
	    for ($d = $i; $d != 0; ++$f){
	        $e = $d%2;
	        $d = ($d - $e)/2;
	        $sel_string = $e . $sel_string;
	    }
	    if ($f != $number_of_ports2){
	        for (;$f != $number_of_ports2; ++$f){
		    $sel_string = '0' . $sel_string;
	        }
	    }
        }
        else{
	    for ($d = 0; $d != $number_of_ports2; ++$d){
	        $sel_string = '0' . $sel_string;
	    }
        }
        if ($i == 0){
            print <<FHM_DL_INSTANCE4;
	if sel = "$sel_string" then
          data_out <= data_in$i;
FHM_DL_INSTANCE4
        }
        else {
		print <<FHM_DL_INSTANCE5;
        elsif sel = "$sel_string" then
	  data_out <= data_in$i;
FHM_DL_INSTANCE5
        }
        if ($i == $number_of_ports -1){
	    print <<FHM_DL_INSTANCE0
        else
          data_out <= (others => 'X');
        end if;
FHM_DL_INSTANCE0
        }
    }     
}

print <<FHM_DL_INSTANCE6;
  end process;  
end behavior;
FHM_DL_INSTANCE6


exit (0);
          ]]>
        </script>
      </instance>

      <entity></entity>

      <testvector>
        <testvector_script>
          <![CDATA[ ]]>
        </testvector_script>
      </testvector>

      <synthesis></synthesis>
    </design>

    <design>
      <design_lang> Verilog </design_lang>
                                                                                
      <instance>
        <script>
          <![CDATA[
#!/usr/bin/perl
# this script generates  multiplexor instance in behavior level
# parameter : instance_name bit_width number_of_ports

if ($#ARGV != 2){
    print "number of parameters is wrong.\n";
    print "usage : this_script instance_name bit_width number_of_ports\n";
    exit (100);
}

$instance_name = $ARGV[0];
$bit_width     = $ARGV[1];
$number_of_ports     = $ARGV[2];

if ($number_of_ports == 1){
    print "number_of_ports 1 is not supported.\n";
    exit (100);
}


$number_of_ports2    = logn(2, $ARGV[2]);
sub logn {
    my ($p, $q) = @_;
    log($q)/log($p);
}
$a = int $number_of_ports2;
$b = $number_of_ports2 - $a;
if ($b != 0){
    $number_of_ports2 = $a + 1;
}


if ($bit_width == 1){
    $data1 = "";
}
else{
    $w = $bit_width - 1;
    $data1 = "[$w:0]";
}

if ($number_of_ports2 == 1){
    $data2 = "";
}
else{
    $w2 = $number_of_ports2 - 1;
    $data2 = "[ $w2:0]";
}

if ($number_of_ports2 == 1){
    $data3 =  "data_out <= data_in0 when sel = \'0\' else\n//            : data_out <= data_in1";
}
else{
    for ($i = 0; $i <= $number_of_ports-1 ; ++$i){
        $sel_string = '';
        if ($i != 0){
            $f = 0;
	    for ($d = $i; $d != 0; ++$f){
	        $e = $d%2;
	        $d = ($d - $e)/2;
	        $sel_string = $e . $sel_string;
	    }
	    if ($f != $number_of_ports2){
	        for (;$f != $number_of_ports2; ++$f){
		    $sel_string = '0' . $sel_string;
	        }
	    }
        }
        else{
	    for ($d = 0; $d != $number_of_ports2; ++$d){
	        $sel_string = '0' . $sel_string;
	    }
        }
        if ($i == 0){
	    $data3 = "data_out <= data_in0 when sel = \"";
            $data3 = $data3 . $sel_string;
	    $data3 = $data3 . "\" else\n";
        }
	elsif ($i != $number_of_ports -1) {
            $data3 = $data3 . "//            : data_in";
	    $data3 = $data3 . $i;
	    $data3 = $data3 . " when sel = \"";
	    $data3 = $data3 . $sel_string;
	    $data3 = $data3 . "\" else\n";
        }
	else {
	    $data3 = $data3 . "//            : data_in";
	    $data3 = $data3 . $i;
	    $data3 = $data3 . ";";
	}
        
    }     

}


print <<FHM_DL_INSTANCE;
// VHDL Preprocessor version 0.57
// module     : $bit_width-bit $number_of_ports-port multiplexor
// feature    : select one input from n input ports.
// references : start from scratch
// author     : Tak. Tokihisa
// version    : 1.0  : first cut 2002/01/15
\n
// Functionality : behavior level
//  port
//   data_in  : input data
//   data_out : selected data 
//   sel     : $data3
\n

module $instance_name (
FHM_DL_INSTANCE
for ($i = 0; $i <= $number_of_ports-1 ; ++$i){
  print "  data_in$i ,\n";
}

{
print <<FHM_DL_INSTANCE2
  sel      , 
  data_out );
\n
FHM_DL_INSTANCE2
}

for ($i = 0; $i <= $number_of_ports-1 ; ++$i){
  print "input  $data1";
  print " data_in";
  print "$i ;\n";
}

{
print <<FHM_DL_INSTANCE2
input  $data2 sel      ;
output $data1 data_out ;
\n
FHM_DL_INSTANCE2
}

for ($i = 0; $i <= $number_of_ports-1 ; ++$i){
  print "wire  $data1";
  print " data_in";
  print "$i ;\n";
}

{
print <<FHM_DL_INSTANCE2
wire  $data2 sel      ;
reg   $data1 data_out ;
\n
FHM_DL_INSTANCE2
}


print "always@ (sel "; 
for ($i = 0; $i <= $number_of_ports-2 ; ++$i){
  print "or data_in";
  print "$i ";
}
print "or data_in";
print $number_of_ports-1;
print ")\n";
print "begin\n";

if ($number_of_ports2 == 1){
    print <<FHM_DL_INSTANCE3;
    if (sel == 1'b0)
      data_out <= data_in0;
    else if (sel == 1'b1)
      data_out <= data_in1;
    else
      data_out <= \{$bit_width\{1'bX}};
FHM_DL_INSTANCE3
}
else{
    for ($i = 0; $i <= $number_of_ports-1 ; ++$i){
        $sel_string = '';
        if ($i != 0){
            $f = 0;
	    for ($d = $i; $d != 0; ++$f){
	        $e = $d%2;
	        $d = ($d - $e)/2;
	        $sel_string = $e . $sel_string;
	    }
	    if ($f != $number_of_ports2){
	        for (;$f != $number_of_ports2; ++$f){
		    $sel_string = '0' . $sel_string;
	        }
	    }
        }
        else{
	    for ($d = 0; $d != $number_of_ports2; ++$d){
	        $sel_string = '0' . $sel_string;
	    }
        }
        if ($i == 0){
            print <<FHM_DL_INSTANCE4;
	if (sel == ${number_of_ports2}'b$sel_string)
          data_out <= data_in$i;
FHM_DL_INSTANCE4
        }
        else {
		print <<FHM_DL_INSTANCE5;
        else if (sel == ${number_of_ports2}'b$sel_string)
	  data_out <= data_in$i;
FHM_DL_INSTANCE5
        }
        if ($i == $number_of_ports -1){
	    print <<FHM_DL_INSTANCE0
        else
          data_out <= \{$bit_width\{1'bX}};
FHM_DL_INSTANCE0
        }
    }     
}

print <<FHM_DL_INSTANCE6;
end  
\n
endmodule
FHM_DL_INSTANCE6


exit (0);
          ]]>
        </script>
      </instance>
                                                                                
      <entity></entity>
                                                                                
      <testvector></testvector>
                                                                                
      <synthesis></synthesis>
    </design>

    <design>
      <design_lang> SystemC Header </design_lang>

      <instance>
        <script>
          <![CDATA[
#!/usr/bin/perl
# this script generates  multiplexor instance in behavior level
# parameter : name_space instance_name bit_width number_of_ports

if ($#ARGV != 3){
    print "number of parameters is wrong.\n";
    print "usage : this_script name_space instance_name bit_width number_of_ports\n";
    exit (100);
}

$name_space      = $ARGV[0];
$instance_name   = $ARGV[1];
$bit_width       = $ARGV[2];
$number_of_ports = $ARGV[3];

if ($number_of_ports == 1){
    print "number_of_ports 1 is not supported.\n";
    exit (100);
}

$number_of_ports2    = logn(2, $number_of_ports);
sub logn {
    my ($p, $q) = @_;
    log($q)/log($p);
}

$a = int $number_of_ports2;
$b = $number_of_ports2 - $a;
if ($b != 0){
    $number_of_ports2 = $a + 1;
}

if ($bit_width == 1){
    $data1 = "bool";
} elsif ($bit_width <= 64) {
    $data1 = "sc_dt::sc_uint<${bit_width}>";
} else{
    $data1 = "sc_dt::sc_biguint<${bit_width}>";
}

if ($number_of_ports2 == 1){
    $data2 = "bool";
} elsif ($number_of_ports2 <= 64) {
    $data2 = "sc_dt::sc_uint<${number_of_ports2}>";
} else{
    $data2 = "sc_dt::sc_biguint<${number_of_ports2}>";
}

$macro = "__" . uc($name_space) . "_" . uc($instance_name) . "_H__";

{
print <<FHM_DL_INSTANCE
#ifndef $macro
#define $macro 1

// VHDL Preprocessor version 0.57
// module     : $bit_width-bit $number_of_ports-port multiplexor
// feature    : select one input from n input ports.
// references : start from scratch
// author     : Tak. Tokihisa
// version    : 1.0  : first cut 2002/01/15

// Functionality : behavior level
//  port
//   data_in  : input data
//   data_out : selected data 
//   sel      : selector (0 : data_in0, 1 : data_in1, ...)

#include <systemc>

namespace ${name_space} {
  SC_MODULE(${instance_name}) {
FHM_DL_INSTANCE
}

for ($i = 0; $i <= $number_of_ports-1 ; ++$i){
  print "    sc_core::sc_in< ${data1} > data_in${i};\n";
}

{
print <<FHM_DL_INSTANCE
    sc_core::sc_in< $data2 > sel;
    sc_core::sc_out< $data1 > data_out;

    SC_CTOR(${instance_name}) :
FHM_DL_INSTANCE
}

for ($i = 0; $i <= $number_of_ports-1 ; ++$i){
  print "      data_in${i}(\"data_in${i}\"),\n";
}

{
print <<FHM_DL_INSTANCE
      sel("sel"),
      data_out("data_out")
    {
      SC_METHOD(process);
FHM_DL_INSTANCE
}

print "      sensitive << sel";
for ($i = 0; $i < $number_of_ports ; ++$i){
  print " << data_in$i";
}
print ";\n";

{
    print <<EOF
    }

    void process();
  };
};

#endif // $macro
EOF
}

          ]]>
        </script>
      </instance>

      <entity>
        <script>
          <![CDATA[
          ]]>
        </script>
      </entity>

      <testvector>
        <testvector_script>
          <![CDATA[ ]]>
        </testvector_script>
      </testvector>
    </design>

    <design>
      <design_lang> SystemC Program </design_lang>

      <instance>
        <script>
          <![CDATA[
#!/usr/bin/perl
# this script generates  multiplexor instance in behavior level
# parameter : name_space instance_name bit_width number_of_ports

if ($#ARGV != 3){
    print "number of parameters is wrong.\n";
    print "usage : this_script name_space instance_name bit_width number_of_ports\n";
    exit (100);
}

$name_space      = $ARGV[0];
$instance_name   = $ARGV[1];
$bit_width       = $ARGV[2];
$number_of_ports = $ARGV[3];

if ($number_of_ports == 1){
    print "number_of_ports 1 is not supported.\n";
    exit (100);
}

$number_of_ports2    = logn(2, $number_of_ports);
sub logn {
    my ($p, $q) = @_;
    log($q)/log($p);
}

$a = int $number_of_ports2;
$b = $number_of_ports2 - $a;
if ($b != 0){
    $number_of_ports2 = $a + 1;
}

if ($bit_width == 1){
    $data1 = "bool";
} elsif ($bit_width <= 64) {
    $data1 = "sc_dt::sc_uint<${bit_width}>";
} else{
    $data1 = "sc_dt::sc_biguint<${bit_width}>";
}

if ($number_of_ports2 == 1){
    $data2 = "bool";
} elsif ($number_of_ports2 <= 64) {
    $data2 = "sc_dt::sc_uint<${number_of_ports2}>";
} else {
    $data2 = "sc_dt::sc_biguint<${number_of_ports2}>";
}

if ($number_of_ports2 == 1){
    $data3 =  <<EOF
  if ( sel.read() == false ) {
    data_out.write( data_in0.read() );
  } else {
    data_out.write( data_in1.read() );
  }
EOF
} else {
  $data3 = "  switch( sel.read() ) {\n";
  for ($i = 0; $i < $number_of_ports; ++$i){
    $data3 .= <<EOF
    case $i:
      data_out.write( data_in${i}.read() );
      break;
EOF
  }     
  $data3 .= "  }\n";
}

{
print <<FHM_DL_INSTANCE
#include "${instance_name}.h"

// VHDL Preprocessor version 0.57
// module     : $bit_width-bit $number_of_ports-port multiplexor
// feature    : select one input from n input ports.
// references : start from scratch
// author     : Tak. Tokihisa
// version    : 1.0  : first cut 2002/01/15

// Functionality : behavior level
//  port
//   data_in  : input data
//   data_out : selected data 
//   sel      : selector (0 : data_in0, 1 : data_in1, ...)

void ${name_space}::${instance_name}::process()
{
FHM_DL_INSTANCE
}

print $data3;

print "}\n";
          ]]>
        </script>
      </instance>

      <entity>
        <script>
          <![CDATA[
          ]]>
        </script>
      </entity>

      <testvector>
        <testvector_script>
          <![CDATA[ ]]>
        </testvector_script>
      </testvector>
    </design>

    <estimation>
      <estimation_data>
        <library name="OSAKA">

          <est_type name="shape">
            <est_index name="area">
              <unit> mm2 </unit>
              <translate>
                <translate_value key="gate"> 4201.68 </translate_value>
                <translate_value key="mm2">  1 </translate_value>
              </translate>

              <parameters name="2">
                <max>
                  <data bit_width="1"> 0.00216802802688448 </data>
                  <data bit_width="4"> 0.0086721118695379 </data>
                  <data bit_width="8"> 0.0173442237390758 </data>
                  <data bit_width="16"> 0.0346884474781516 </data>
                  <data bit_width="32"> 0.0615805487328878 </data>
                  <data bit_width="128"> 0.150177820776451 </data>
                </max>
                <min>
                  <data bit_width="1"> 0.00105426400868224 </data>
                  <data bit_width="4"> 0.00421705579672893 </data>
                  <data bit_width="8"> 0.00843411183145789 </data>
                  <data bit_width="16"> 0.0168682236629158 </data>
                  <data bit_width="32"> 0.0337364473258316 </data>
                  <data bit_width="128"> 0.134945818339331 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 0.00105426400868224 </data>
                    <data bit_width="4"> 0.00421705579672893 </data>
                    <data bit_width="8"> 0.00843411183145789 </data>
                    <data bit_width="16"> 0.0168682236629158 </data>
                    <data bit_width="32"> 0.0337364473258316 </data>
                    <data bit_width="128"> 0.134945818339331 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 0.00216802802688448 </data>
                    <data bit_width="4"> 0.0086721118695379 </data>
                    <data bit_width="8"> 0.0173442237390758 </data>
                    <data bit_width="16"> 0.0346884474781516 </data>
                    <data bit_width="32"> 0.0615805487328878 </data>
                    <data bit_width="128"> 0.134945818339331 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 0.00117326402772224 </data>
                    <data bit_width="4"> 0.00469305587288894 </data>
                    <data bit_width="8"> 0.00938611198377792 </data>
                    <data bit_width="16"> 0.0187722239675558 </data>
                    <data bit_width="32"> 0.0375444479351117 </data>
                    <data bit_width="128"> 0.150177820776451 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="3">
                <max>
                  <data bit_width="1"> 0.00266959406713505 </data>
                  <data bit_width="4"> 0.0184319600731136 </data>
                  <data bit_width="8"> 0.0368639201462272 </data>
                  <data bit_width="16"> 0.0758456614973058 </data>
                  <data bit_width="32"> 0.143859198463472 </data>
                  <data bit_width="128"> 0.617329274956684 </data>
                </max>
                <min>
                  <data bit_width="1"> 0.00243159402905504 </data>
                  <data bit_width="4"> 0.00870696959311513 </data>
                  <data bit_width="8"> 0.0165465425734468 </data>
                  <data bit_width="16"> 0.0321578230612517 </data>
                  <data bit_width="32"> 0.0635165797966528 </data>
                  <data bit_width="128"> 0.251889484444318 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 0.00243159402905504 </data>
                    <data bit_width="4"> 0.00870696959311513 </data>
                    <data bit_width="8"> 0.0165465425734468 </data>
                    <data bit_width="16"> 0.0321578230612517 </data>
                    <data bit_width="32"> 0.0635165797966528 </data>
                    <data bit_width="128"> 0.251889484444318 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 0.0026440281030445 </data>
                    <data bit_width="4"> 0.0184319600731136 </data>
                    <data bit_width="8"> 0.0368639201462272 </data>
                    <data bit_width="16"> 0.0758456614973058 </data>
                    <data bit_width="32"> 0.143859198463472 </data>
                    <data bit_width="128"> 0.617329274956684 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 0.00266959406713505 </data>
                    <data bit_width="4"> 0.00907187577350012 </data>
                    <data bit_width="8"> 0.017327487576398 </data>
                    <data bit_width="16"> 0.033243712752994 </data>
                    <data bit_width="32"> 0.0659602927876468 </data>
                    <data bit_width="128"> 0.260313035500086 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4">
                <max>
                  <data bit_width="1"> 0.00214246206279393 </data>
                  <data bit_width="4"> 0.0231250161840026 </data>
                  <data bit_width="8"> 0.0576331167532987 </data>
                  <data bit_width="16"> 0.0342793920527027 </data>
                  <data bit_width="32"> 0.113370600569296 </data>
                  <data bit_width="128"> 0.334280524694884 </data>
                </max>
                <min>
                  <data bit_width="1"> 0.00214246206279393 </data>
                  <data bit_width="4"> 0.00856984801317568 </data>
                  <data bit_width="8"> 0.0171396960263514 </data>
                  <data bit_width="16"> 0.0342793920527027 </data>
                  <data bit_width="32"> 0.0685587843434055 </data>
                  <data bit_width="128"> 0.274235195207631 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 0.00214246206279393 </data>
                    <data bit_width="4"> 0.00856984801317568 </data>
                    <data bit_width="8"> 0.0171396960263514 </data>
                    <data bit_width="16"> 0.0342793920527027 </data>
                    <data bit_width="32"> 0.0685587843434055 </data>
                    <data bit_width="128"> 0.334280524694884 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 0.00214246206279393 </data>
                    <data bit_width="4"> 0.0231250161840026 </data>
                    <data bit_width="8"> 0.0576331167532987 </data>
                    <data bit_width="16"> 0.0342793920527027 </data>
                    <data bit_width="32"> 0.113370600569296 </data>
                    <data bit_width="128"> 0.284505425686868 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 0.00214246206279393 </data>
                    <data bit_width="4"> 0.00856984801317568 </data>
                    <data bit_width="8"> 0.0171396960263514 </data>
                    <data bit_width="16"> 0.0342793920527027 </data>
                    <data bit_width="32"> 0.0685587843434055 </data>
                    <data bit_width="128"> 0.274235195207631 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="5">
                <max>
                  <data bit_width="1"> 0.00637625402220064 </data>
                  <data bit_width="4"> 0.0221218848175016 </data>
                  <data bit_width="8"> 0.0935710644313703 </data>
                  <data bit_width="16"> 0.240281636869062 </data>
                  <data bit_width="32"> 0.374359707783553 </data>
                  <data bit_width="128"> 1.80300798680528 </data>
                </max>
                <min>
                  <data bit_width="1"> 0.00539031982445117 </data>
                  <data bit_width="4"> 0.0149289043906247 </data>
                  <data bit_width="8"> 0.0306935797109727 </data>
                  <data bit_width="16"> 0.0569999704879953 </data>
                  <data bit_width="32"> 0.110089217170275 </data>
                  <data bit_width="128"> 0.46976887364102 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 0.00539031982445117 </data>
                    <data bit_width="4"> 0.0171238840178214 </data>
                    <data bit_width="8"> 0.0306935797109727 </data>
                    <data bit_width="16"> 0.0569999704879953 </data>
                    <data bit_width="32"> 0.110089217170275 </data>
                    <data bit_width="128"> 0.46976887364102 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 0.00637625402220064 </data>
                    <data bit_width="4"> 0.0149289043906247 </data>
                    <data bit_width="8"> 0.0935710644313703 </data>
                    <data bit_width="16"> 0.240281636869062 </data>
                    <data bit_width="32"> 0.374359707783553 </data>
                    <data bit_width="128"> 1.80300798680528 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 0.00622331995773119 </data>
                    <data bit_width="4"> 0.0221218848175016 </data>
                    <data bit_width="8"> 0.038785581005693 </data>
                    <data bit_width="16"> 0.0725889729822357 </data>
                    <data bit_width="32"> 0.13207212472154 </data>
                    <data bit_width="128"> 0.589324700833952 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="6">
                <max>
                  <data bit_width="1"> 0.00771965047314408 </data>
                  <data bit_width="4"> 0.0661183614649378 </data>
                  <data bit_width="8"> 0.132416152586584 </data>
                  <data bit_width="16"> 0.23940212319834 </data>
                  <data bit_width="32"> 0.440040164648426 </data>
                  <data bit_width="128"> 1.88007246886959 </data>
                </max>
                <min>
                  <data bit_width="1"> 0.00676765032082405 </data>
                  <data bit_width="4"> 0.0200063734030197 </data>
                  <data bit_width="8"> 0.036500862512138 </data>
                  <data bit_width="16"> 0.0680023371603739 </data>
                  <data bit_width="32"> 0.130300110908018 </data>
                  <data bit_width="128"> 0.551392108156737 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 0.00676765032082405 </data>
                    <data bit_width="4"> 0.0200063734030197 </data>
                    <data bit_width="8"> 0.036500862512138 </data>
                    <data bit_width="16"> 0.0680023371603739 </data>
                    <data bit_width="32"> 0.130300110908018 </data>
                    <data bit_width="128"> 0.551392108156737 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 0.00732871589459454 </data>
                    <data bit_width="4"> 0.0661183614649378 </data>
                    <data bit_width="8"> 0.132416152586584 </data>
                    <data bit_width="16"> 0.23940212319834 </data>
                    <data bit_width="32"> 0.440040164648426 </data>
                    <data bit_width="128"> 1.88007246886959 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 0.00771965047314408 </data>
                    <data bit_width="4"> 0.0250127413320386 </data>
                    <data bit_width="8"> 0.0451794932027189 </data>
                    <data bit_width="16"> 0.0838804725728756 </data>
                    <data bit_width="32"> 0.16236224890996 </data>
                    <data bit_width="128"> 0.680093475942956 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="7">
                <max>
                  <data bit_width="1"> 0.0213562908170065 </data>
                  <data bit_width="4"> 0.0743907075265132 </data>
                  <data bit_width="8"> 0.132714102930256 </data>
                  <data bit_width="16"> 0.267860268987643 </data>
                  <data bit_width="32"> 0.567922942489671 </data>
                  <data bit_width="128"> 2.27824327864092 </data>
                </max>
                <min>
                  <data bit_width="1"> 0.00773684787989566 </data>
                  <data bit_width="4"> 0.0242922207307553 </data>
                  <data bit_width="8"> 0.0444942915690866 </data>
                  <data bit_width="16"> 0.0831134365301498 </data>
                  <data bit_width="32"> 0.159077110346338 </data>
                  <data bit_width="128"> 0.683210486281678 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 0.00773684787989566 </data>
                    <data bit_width="4"> 0.0242922207307553 </data>
                    <data bit_width="8"> 0.0444942915690866 </data>
                    <data bit_width="16"> 0.0831134365301498 </data>
                    <data bit_width="32"> 0.159077110346338 </data>
                    <data bit_width="128"> 0.683210486281678 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 0.0213562908170065 </data>
                    <data bit_width="4"> 0.0743907075265132 </data>
                    <data bit_width="8"> 0.132714102930256 </data>
                    <data bit_width="16"> 0.267860268987643 </data>
                    <data bit_width="32"> 0.567922942489671 </data>
                    <data bit_width="128"> 2.27824327864092 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 0.00880784805125569 </data>
                    <data bit_width="4"> 0.0291191663810666 </data>
                    <data bit_width="8"> 0.0503401820224291 </data>
                    <data bit_width="16"> 0.0939722175415548 </data>
                    <data bit_width="32"> 0.181925172074028 </data>
                    <data bit_width="128"> 0.762279142390663 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8">
                <max>
                  <data bit_width="1"> 0.0134841677614668 </data>
                  <data bit_width="4"> 0.0694675613088098 </data>
                  <data bit_width="8"> 0.204850339864054 </data>
                  <data bit_width="16"> 0.361271274585404 </data>
                  <data bit_width="32"> 0.643571452133432 </data>
                  <data bit_width="128"> 2.39119289046286 </data>
                </max>
                <min>
                  <data bit_width="1"> 0.00744771591363455 </data>
                  <data bit_width="4"> 0.0275489092458255 </data>
                  <data bit_width="8"> 0.0507780359284857 </data>
                  <data bit_width="16"> 0.0963182260429162 </data>
                  <data bit_width="32"> 0.186192322356772 </data>
                  <data bit_width="128"> 0.806253600702576 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 0.00744771591363455 </data>
                    <data bit_width="4"> 0.0275489092458255 </data>
                    <data bit_width="8"> 0.0507780359284857 </data>
                    <data bit_width="16"> 0.0963182260429162 </data>
                    <data bit_width="32"> 0.186192322356772 </data>
                    <data bit_width="128"> 0.806253600702576 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 0.0134841677614668 </data>
                    <data bit_width="4"> 0.0694675613088098 </data>
                    <data bit_width="8"> 0.204850339864054 </data>
                    <data bit_width="16"> 0.361271274585404 </data>
                    <data bit_width="32"> 0.643571452133432 </data>
                    <data bit_width="128"> 2.39119289046286 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 0.00828071604691457 </data>
                    <data bit_width="4"> 0.0339395913063346 </data>
                    <data bit_width="8"> 0.0595133991641439 </data>
                    <data bit_width="16"> 0.111494011443042 </data>
                    <data bit_width="32"> 0.216169722825156 </data>
                    <data bit_width="128"> 0.966387649702024 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="9">
                <max>
                  <data bit_width="1"> 0.022921412625426 </data>
                  <data bit_width="4"> 0.069756693989071 </data>
                  <data bit_width="8"> 0.224748386597742 </data>
                  <data bit_width="16"> 0.451356148492984 </data>
                  <data bit_width="32"> 0.98240012495002 </data>
                  <data bit_width="128"> 3.49141221487595 </data>
                </max>
                <min>
                  <data bit_width="1"> 0.011222706393633 </data>
                  <data bit_width="4"> 0.0339423621027779 </data>
                  <data bit_width="8"> 0.0580044908227185 </data>
                  <data bit_width="16"> 0.107021240551398 </data>
                  <data bit_width="32"> 0.204961321423811 </data>
                  <data bit_width="128"> 0.873362754898041 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 0.011222706393633 </data>
                    <data bit_width="4"> 0.0339423621027779 </data>
                    <data bit_width="8"> 0.0580044908227185 </data>
                    <data bit_width="16"> 0.107021240551398 </data>
                    <data bit_width="32"> 0.204961321423811 </data>
                    <data bit_width="128"> 0.873362754898041 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 0.022921412625426 </data>
                    <data bit_width="4"> 0.069756693989071 </data>
                    <data bit_width="8"> 0.224748386597742 </data>
                    <data bit_width="16"> 0.451356148492984 </data>
                    <data bit_width="32"> 0.98240012495002 </data>
                    <data bit_width="128"> 3.49141221487595 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 0.0128887066601931 </data>
                    <data bit_width="4"> 0.0441670705527313 </data>
                    <data bit_width="8"> 0.0758958718893395 </data>
                    <data bit_width="16"> 0.141665600664496 </data>
                    <data bit_width="32"> 0.275279641238743 </data>
                    <data bit_width="128"> 1.20133633665581 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="10">
                <max>
                  <data bit_width="1"> 0.0150567344490775 </data>
                  <data bit_width="4"> 0.132160953475753 </data>
                  <data bit_width="8"> 0.199759835113574 </data>
                  <data bit_width="16"> 0.369204531758725 </data>
                  <data bit_width="32"> 0.733073121227699 </data>
                  <data bit_width="128"> 3.14581431189429 </data>
                </max>
                <min>
                  <data bit_width="1"> 0.0127190366710459 </data>
                  <data bit_width="4"> 0.0360499676319948 </data>
                  <data bit_width="8"> 0.0627133587041374 </data>
                  <data bit_width="16"> 0.117170640791303 </data>
                  <data bit_width="32"> 0.227505302640848 </data>
                  <data bit_width="128"> 0.956961198139792 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 0.0127190366710459 </data>
                    <data bit_width="4"> 0.0360499676319948 </data>
                    <data bit_width="8"> 0.0627133587041374 </data>
                    <data bit_width="16"> 0.117170640791303 </data>
                    <data bit_width="32"> 0.227505302640848 </data>
                    <data bit_width="128"> 0.956961198139792 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 0.0150567344490775 </data>
                    <data bit_width="4"> 0.132160953475753 </data>
                    <data bit_width="8"> 0.199759835113574 </data>
                    <data bit_width="16"> 0.369204531758725 </data>
                    <data bit_width="32"> 0.733073121227699 </data>
                    <data bit_width="128"> 3.14581431189429 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 0.0137900368424059 </data>
                    <data bit_width="4"> 0.048299524951924 </data>
                    <data bit_width="8"> 0.0831571754631481 </data>
                    <data bit_width="16"> 0.153943491412959 </data>
                    <data bit_width="32"> 0.298466486976638 </data>
                    <data bit_width="128"> 1.30122848551056 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="11">
                <max>
                  <data bit_width="1"> 0.0167910650025704 </data>
                  <data bit_width="4"> 0.104121152729384 </data>
                  <data bit_width="8"> 0.226110887311742 </data>
                  <data bit_width="16"> 0.511608100807296 </data>
                  <data bit_width="32"> 1.19673473158356 </data>
                  <data bit_width="128"> 3.64734965394794 </data>
                </max>
                <min>
                  <data bit_width="1"> 0.0140963662154186 </data>
                  <data bit_width="4"> 0.0413728798956608 </data>
                  <data bit_width="8"> 0.0704850607376097 </data>
                  <data bit_width="16"> 0.130018430008949 </data>
                  <data bit_width="32"> 0.249893067296891 </data>
                  <data bit_width="128"> 1.13845551803088 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 0.0140963662154186 </data>
                    <data bit_width="4"> 0.0413728798956608 </data>
                    <data bit_width="8"> 0.0704850607376097 </data>
                    <data bit_width="16"> 0.130018430008949 </data>
                    <data bit_width="32"> 0.249893067296891 </data>
                    <data bit_width="128"> 1.13845551803088 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 0.0167910650025704 </data>
                    <data bit_width="4"> 0.104121152729384 </data>
                    <data bit_width="8"> 0.226110887311742 </data>
                    <data bit_width="16"> 0.511608100807296 </data>
                    <data bit_width="32"> 1.19673473158356 </data>
                    <data bit_width="128"> 3.64734965394794 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 0.0160003674720588 </data>
                    <data bit_width="4"> 0.0512322209211553 </data>
                    <data bit_width="8"> 0.0888026965404315 </data>
                    <data bit_width="16"> 0.164248599607776 </data>
                    <data bit_width="32"> 0.31861787356486 </data>
                    <data bit_width="128"> 1.38679867981379 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="12">
                <max>
                  <data bit_width="1"> 0.0347391191142591 </data>
                  <data bit_width="4"> 0.163167387330782 </data>
                  <data bit_width="8"> 0.305814244302279 </data>
                  <data bit_width="16"> 0.531097317501571 </data>
                  <data bit_width="32"> 1.02585442299271 </data>
                  <data bit_width="128"> 4.25432970407075 </data>
                </max>
                <min>
                  <data bit_width="1"> 0.0154736957597913 </data>
                  <data bit_width="4"> 0.0451990020658403 </data>
                  <data bit_width="8"> 0.0779165045886407 </data>
                  <data bit_width="16"> 0.144779516764723 </data>
                  <data bit_width="32"> 0.278455309066849 </data>
                  <data bit_width="128"> 1.28056036704366 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 0.0154736957597913 </data>
                    <data bit_width="4"> 0.0451990020658403 </data>
                    <data bit_width="8"> 0.0779165045886407 </data>
                    <data bit_width="16"> 0.144779516764723 </data>
                    <data bit_width="32"> 0.278455309066849 </data>
                    <data bit_width="128"> 1.28056036704366 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 0.0347391191142591 </data>
                    <data bit_width="4"> 0.163167387330782 </data>
                    <data bit_width="8"> 0.305814244302279 </data>
                    <data bit_width="16"> 0.531097317501571 </data>
                    <data bit_width="32"> 1.02585442299271 </data>
                    <data bit_width="128"> 4.25432970407075 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 0.0167826959692314 </data>
                    <data bit_width="4"> 0.0597932388949182 </data>
                    <data bit_width="8"> 0.105838743312199 </data>
                    <data bit_width="16"> 0.199179259724682 </data>
                    <data bit_width="32"> 0.415032380381181 </data>
                    <data bit_width="128"> 1.70324239161478 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="13">
                <max>
                  <data bit_width="1"> 0.0332683531349365 </data>
                  <data bit_width="4"> 0.152793947183032 </data>
                  <data bit_width="8"> 0.300410028131605 </data>
                  <data bit_width="16"> 0.592328231088517 </data>
                  <data bit_width="32"> 1.00331449444032 </data>
                  <data bit_width="128"> 5.0214712291274 </data>
                </max>
                <min>
                  <data bit_width="1"> 0.0164428952228632 </data>
                  <data bit_width="4"> 0.047401424906228 </data>
                  <data bit_width="8"> 0.0832482485577198 </data>
                  <data bit_width="16"> 0.156488888968222 </data>
                  <data bit_width="32"> 0.302588547676168 </data>
                  <data bit_width="128"> 1.40344671274347 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 0.0164428952228632 </data>
                    <data bit_width="4"> 0.047401424906228 </data>
                    <data bit_width="8"> 0.0832482485577198 </data>
                    <data bit_width="16"> 0.156488888968222 </data>
                    <data bit_width="32"> 0.302588547676168 </data>
                    <data bit_width="128"> 1.40344671274347 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 0.0332683531349365 </data>
                    <data bit_width="4"> 0.152793947183032 </data>
                    <data bit_width="8"> 0.300410028131605 </data>
                    <data bit_width="16"> 0.592328231088517 </data>
                    <data bit_width="32"> 1.00331449444032 </data>
                    <data bit_width="128"> 5.0214712291274 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 0.0178708954513433 </data>
                    <data bit_width="4"> 0.0681752953580473 </data>
                    <data bit_width="8"> 0.124014115068258 </data>
                    <data bit_width="16"> 0.237119769235163 </data>
                    <data bit_width="32"> 0.494223348517736 </data>
                    <data bit_width="128"> 2.13481850569296 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="14">
                <max>
                  <data bit_width="1"> 0.0372469478875117 </data>
                  <data bit_width="4"> 0.194554528664725 </data>
                  <data bit_width="8"> 0.305755731992917 </data>
                  <data bit_width="16"> 0.519030668922907 </data>
                  <data bit_width="32"> 1.28346145732183 </data>
                  <data bit_width="128"> 6.19926555044649 </data>
                </max>
                <min>
                  <data bit_width="1"> 0.0174120927819348 </data>
                  <data bit_width="4"> 0.0509560747129719 </data>
                  <data bit_width="8"> 0.0897625480760077 </data>
                  <data bit_width="16"> 0.169109369823499 </data>
                  <data bit_width="32"> 0.327242847384856 </data>
                  <data bit_width="128"> 1.52109961443994 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 0.0174120927819348 </data>
                    <data bit_width="4"> 0.0509560747129719 </data>
                    <data bit_width="8"> 0.0897625480760077 </data>
                    <data bit_width="16"> 0.169109369823499 </data>
                    <data bit_width="32"> 0.327242847384856 </data>
                    <data bit_width="128"> 1.52109961443994 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 0.0372469478875117 </data>
                    <data bit_width="4"> 0.194554528664725 </data>
                    <data bit_width="8"> 0.305755731992917 </data>
                    <data bit_width="16"> 0.519030668922907 </data>
                    <data bit_width="32"> 1.28346145732183 </data>
                    <data bit_width="128"> 6.19926555044649 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 0.0189590930294549 </data>
                    <data bit_width="4"> 0.0587905706764913 </data>
                    <data bit_width="8"> 0.116568711562994 </data>
                    <data bit_width="16"> 0.198552171036347 </data>
                    <data bit_width="32"> 0.464167418508787 </data>
                    <data bit_width="128"> 1.71980803107328 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="15">
                <max>
                  <data bit_width="1"> 0.0463188253270121 </data>
                  <data bit_width="4"> 0.168173290683726 </data>
                  <data bit_width="8"> 0.366074011823842 </data>
                  <data bit_width="16"> 0.633875797776128 </data>
                  <data bit_width="32"> 1.18460068068011 </data>
                  <data bit_width="128"> 5.71200370304259 </data>
                </max>
                <min>
                  <data bit_width="1"> 0.0183812903410065 </data>
                  <data bit_width="4"> 0.057580081062813 </data>
                  <data bit_width="8"> 0.0988353482416557 </data>
                  <data bit_width="16"> 0.183139242636279 </data>
                  <data bit_width="32"> 0.350480796728927 </data>
                  <data bit_width="128"> 1.62666587936254 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 0.0183812903410065 </data>
                    <data bit_width="4"> 0.057580081062813 </data>
                    <data bit_width="8"> 0.0988353482416557 </data>
                    <data bit_width="16"> 0.183139242636279 </data>
                    <data bit_width="32"> 0.350480796728927 </data>
                    <data bit_width="128"> 1.62666587936254 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 0.0463188253270121 </data>
                    <data bit_width="4"> 0.168173290683726 </data>
                    <data bit_width="8"> 0.366074011823842 </data>
                    <data bit_width="16"> 0.633875797776128 </data>
                    <data bit_width="32"> 1.18460068068011 </data>
                    <data bit_width="128"> 5.71200370304259 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 0.0200472906075665 </data>
                    <data bit_width="4"> 0.0667398504883761 </data>
                    <data bit_width="8"> 0.116866676424668 </data>
                    <data bit_width="16"> 0.218667328782773 </data>
                    <data bit_width="32"> 0.458019219693075 </data>
                    <data bit_width="128"> 1.98225629771901 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16">
                <max>
                  <data bit_width="1"> 0.0410902693684431 </data>
                  <data bit_width="4"> 0.167271028731365 </data>
                  <data bit_width="8"> 0.315422595247615 </data>
                  <data bit_width="16"> 0.684424484015917 </data>
                  <data bit_width="32"> 1.84557582752613 </data>
                  <data bit_width="128"> 5.98953870832619 </data>
                </max>
                <min>
                  <data bit_width="1"> 0.0185002903600465 </data>
                  <data bit_width="4"> 0.0608962695874031 </data>
                  <data bit_width="8"> 0.10470212748234 </data>
                  <data bit_width="16"> 0.194022616429619 </data>
                  <data bit_width="32"> 0.371278316292531 </data>
                  <data bit_width="128"> 1.72385984225357 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 0.0185002903600465 </data>
                    <data bit_width="4"> 0.0608962695874031 </data>
                    <data bit_width="8"> 0.10470212748234 </data>
                    <data bit_width="16"> 0.194022616429619 </data>
                    <data bit_width="32"> 0.371278316292531 </data>
                    <data bit_width="128"> 1.72385984225357 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 0.0410902693684431 </data>
                    <data bit_width="4"> 0.167271028731365 </data>
                    <data bit_width="8"> 0.315422595247615 </data>
                    <data bit_width="16"> 0.684424484015917 </data>
                    <data bit_width="32"> 1.84557582752613 </data>
                    <data bit_width="128"> 5.98953870832619 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 0.0199282905885265 </data>
                    <data bit_width="4"> 0.0717048399687744 </data>
                    <data bit_width="8"> 0.125946456417433 </data>
                    <data bit_width="16"> 0.23609568910531 </data>
                    <data bit_width="32"> 0.494988888254222 </data>
                    <data bit_width="128"> 2.14067530535405 </data>
                  </priority>
                </typ>
              </parameters>
            </est_index>

            <est_index name="aspect_ratio">
              <!-- Dummy yet -->
            </est_index>

            <est_index name="height">
              <!-- Dummy yet -->
            </est_index>

            <est_index name="width">
              <!-- Dummy yet -->
            </est_index>
          </est_type>

          <est_type name="timing">
            <est_index name="delay">
              <unit> ns </unit>

              <parameters name="2">
                <max>
                  <data bit_width="1"> 0.46 </data>
                  <data bit_width="4"> 0.46 </data>
                  <data bit_width="8"> 0.46 </data>
                  <data bit_width="16"> 0.46 </data>
                  <data bit_width="32"> 0.46 </data>
                  <data bit_width="128"> 0.46 </data>
                </max>
                <min>
                  <data bit_width="1"> 0.33 </data>
                  <data bit_width="4"> 0.33 </data>
                  <data bit_width="8"> 0.33 </data>
                  <data bit_width="16"> 0.33 </data>
                  <data bit_width="32"> 0.33 </data>
                  <data bit_width="128"> 0.33 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 0.33 </data>
                    <data bit_width="4"> 0.33 </data>
                    <data bit_width="8"> 0.33 </data>
                    <data bit_width="16"> 0.33 </data>
                    <data bit_width="32"> 0.33 </data>
                    <data bit_width="128"> 0.33 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 0.38 </data>
                    <data bit_width="4"> 0.38 </data>
                    <data bit_width="8"> 0.38 </data>
                    <data bit_width="16"> 0.38 </data>
                    <data bit_width="32"> 0.43 </data>
                    <data bit_width="128"> 0.43 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 0.46 </data>
                    <data bit_width="4"> 0.46 </data>
                    <data bit_width="8"> 0.46 </data>
                    <data bit_width="16"> 0.46 </data>
                    <data bit_width="32"> 0.46 </data>
                    <data bit_width="128"> 0.46 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="3">
                <max>
                  <data bit_width="1"> 0.86 </data>
                  <data bit_width="4"> 0.98 </data>
                  <data bit_width="8"> 1.14 </data>
                  <data bit_width="16"> 1.35 </data>
                  <data bit_width="32"> 1.97 </data>
                  <data bit_width="128"> 3.09 </data>
                </max>
                <min>
                  <data bit_width="1"> 0.69 </data>
                  <data bit_width="4"> 0.47 </data>
                  <data bit_width="8"> 0.47 </data>
                  <data bit_width="16"> 0.72 </data>
                  <data bit_width="32"> 0.47 </data>
                  <data bit_width="128"> 0.70 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 0.69 </data>
                    <data bit_width="4"> 0.89 </data>
                    <data bit_width="8"> 1.01 </data>
                    <data bit_width="16"> 1.18 </data>
                    <data bit_width="32"> 1.30 </data>
                    <data bit_width="128"> 3.09 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 0.79 </data>
                    <data bit_width="4"> 0.47 </data>
                    <data bit_width="8"> 0.47 </data>
                    <data bit_width="16"> 0.72 </data>
                    <data bit_width="32"> 0.47 </data>
                    <data bit_width="128"> 0.70 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 0.86 </data>
                    <data bit_width="4"> 0.98 </data>
                    <data bit_width="8"> 1.14 </data>
                    <data bit_width="16"> 1.35 </data>
                    <data bit_width="32"> 1.97 </data>
                    <data bit_width="128"> 3.00 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4">
                <max>
                  <data bit_width="1"> 0.74 </data>
                  <data bit_width="4"> 0.73 </data>
                  <data bit_width="8"> 0.77 </data>
                  <data bit_width="16"> 0.74 </data>
                  <data bit_width="32"> 0.74 </data>
                  <data bit_width="128"> 6.24 </data>
                </max>
                <min>
                  <data bit_width="1"> 0.64 </data>
                  <data bit_width="4"> 0.64 </data>
                  <data bit_width="8"> 0.64 </data>
                  <data bit_width="16"> 0.64 </data>
                  <data bit_width="32"> 0.64 </data>
                  <data bit_width="128"> 0.64 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 0.64 </data>
                    <data bit_width="4"> 0.64 </data>
                    <data bit_width="8"> 0.64 </data>
                    <data bit_width="16"> 0.64 </data>
                    <data bit_width="32"> 0.64 </data>
                    <data bit_width="128"> 6.24 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 0.74 </data>
                    <data bit_width="4"> 0.73 </data>
                    <data bit_width="8"> 0.77 </data>
                    <data bit_width="16"> 0.74 </data>
                    <data bit_width="32"> 0.74 </data>
                    <data bit_width="128"> 0.74 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 0.64 </data>
                    <data bit_width="4"> 0.64 </data>
                    <data bit_width="8"> 0.64 </data>
                    <data bit_width="16"> 0.64 </data>
                    <data bit_width="32"> 0.64 </data>
                    <data bit_width="128"> 0.64 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="5">
                <max>
                  <data bit_width="1"> 1.72 </data>
                  <data bit_width="4"> 2.11 </data>
                  <data bit_width="8"> 2.41 </data>
                  <data bit_width="16"> 2.61 </data>
                  <data bit_width="32"> 3.79 </data>
                  <data bit_width="128"> 6.76 </data>
                </max>
                <min>
                  <data bit_width="1"> 1.42 </data>
                  <data bit_width="4"> 1.09 </data>
                  <data bit_width="8"> 1.00 </data>
                  <data bit_width="16"> 1.15 </data>
                  <data bit_width="32"> 1.28 </data>
                  <data bit_width="128"> 1.42 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 1.42 </data>
                    <data bit_width="4"> 2.02 </data>
                    <data bit_width="8"> 2.41 </data>
                    <data bit_width="16"> 2.49 </data>
                    <data bit_width="32"> 3.18 </data>
                    <data bit_width="128"> 6.76 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 1.52 </data>
                    <data bit_width="4"> 1.09 </data>
                    <data bit_width="8"> 1.00 </data>
                    <data bit_width="16"> 1.15 </data>
                    <data bit_width="32"> 1.28 </data>
                    <data bit_width="128"> 1.42 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 1.72 </data>
                    <data bit_width="4"> 2.11 </data>
                    <data bit_width="8"> 2.38 </data>
                    <data bit_width="16"> 2.61 </data>
                    <data bit_width="32"> 3.79 </data>
                    <data bit_width="128"> 5.90 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="6">
                <max>
                  <data bit_width="1"> 2.37 </data>
                  <data bit_width="4"> 2.26 </data>
                  <data bit_width="8"> 2.48 </data>
                  <data bit_width="16"> 2.82 </data>
                  <data bit_width="32"> 3.58 </data>
                  <data bit_width="128"> 4.21 </data>
                </max>
                <min>
                  <data bit_width="1"> 2.01 </data>
                  <data bit_width="4"> 1.11 </data>
                  <data bit_width="8"> 1.25 </data>
                  <data bit_width="16"> 1.35 </data>
                  <data bit_width="32"> 1.48 </data>
                  <data bit_width="128"> 1.40 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 2.01 </data>
                    <data bit_width="4"> 1.60 </data>
                    <data bit_width="8"> 1.73 </data>
                    <data bit_width="16"> 1.82 </data>
                    <data bit_width="32"> 1.95 </data>
                    <data bit_width="128"> 3.55 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 2.06 </data>
                    <data bit_width="4"> 1.11 </data>
                    <data bit_width="8"> 1.25 </data>
                    <data bit_width="16"> 1.35 </data>
                    <data bit_width="32"> 1.48 </data>
                    <data bit_width="128"> 1.40 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 2.37 </data>
                    <data bit_width="4"> 2.26 </data>
                    <data bit_width="8"> 2.48 </data>
                    <data bit_width="16"> 2.82 </data>
                    <data bit_width="32"> 3.58 </data>
                    <data bit_width="128"> 4.21 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="7">
                <max>
                  <data bit_width="1"> 2.62 </data>
                  <data bit_width="4"> 1.94 </data>
                  <data bit_width="8"> 2.25 </data>
                  <data bit_width="16"> 2.37 </data>
                  <data bit_width="32"> 2.77 </data>
                  <data bit_width="128"> 4.35 </data>
                </max>
                <min>
                  <data bit_width="1"> 1.43 </data>
                  <data bit_width="4"> 1.36 </data>
                  <data bit_width="8"> 1.46 </data>
                  <data bit_width="16"> 1.40 </data>
                  <data bit_width="32"> 1.45 </data>
                  <data bit_width="128"> 1.54 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 2.15 </data>
                    <data bit_width="4"> 1.94 </data>
                    <data bit_width="8"> 2.21 </data>
                    <data bit_width="16"> 2.37 </data>
                    <data bit_width="32"> 2.30 </data>
                    <data bit_width="128"> 4.35 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 1.43 </data>
                    <data bit_width="4"> 1.36 </data>
                    <data bit_width="8"> 1.46 </data>
                    <data bit_width="16"> 1.40 </data>
                    <data bit_width="32"> 1.45 </data>
                    <data bit_width="128"> 1.54 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 2.62 </data>
                    <data bit_width="4"> 1.94 </data>
                    <data bit_width="8"> 2.25 </data>
                    <data bit_width="16"> 2.30 </data>
                    <data bit_width="32"> 2.77 </data>
                    <data bit_width="128"> 4.24 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8">
                <max>
                  <data bit_width="1"> 2.39 </data>
                  <data bit_width="4"> 2.07 </data>
                  <data bit_width="8"> 2.23 </data>
                  <data bit_width="16"> 2.27 </data>
                  <data bit_width="32"> 3.07 </data>
                  <data bit_width="128"> 4.11 </data>
                </max>
                <min>
                  <data bit_width="1"> 1.94 </data>
                  <data bit_width="4"> 1.40 </data>
                  <data bit_width="8"> 1.31 </data>
                  <data bit_width="16"> 1.27 </data>
                  <data bit_width="32"> 1.40 </data>
                  <data bit_width="128"> 1.51 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 2.09 </data>
                    <data bit_width="4"> 1.81 </data>
                    <data bit_width="8"> 1.55 </data>
                    <data bit_width="16"> 1.88 </data>
                    <data bit_width="32"> 2.07 </data>
                    <data bit_width="128"> 3.98 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 1.94 </data>
                    <data bit_width="4"> 1.40 </data>
                    <data bit_width="8"> 1.31 </data>
                    <data bit_width="16"> 1.27 </data>
                    <data bit_width="32"> 1.40 </data>
                    <data bit_width="128"> 1.51 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 2.39 </data>
                    <data bit_width="4"> 2.07 </data>
                    <data bit_width="8"> 2.23 </data>
                    <data bit_width="16"> 2.27 </data>
                    <data bit_width="32"> 3.07 </data>
                    <data bit_width="128"> 4.11 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="9">
                <max>
                  <data bit_width="1"> 3.48 </data>
                  <data bit_width="4"> 3.11 </data>
                  <data bit_width="8"> 3.31 </data>
                  <data bit_width="16"> 3.60 </data>
                  <data bit_width="32"> 4.63 </data>
                  <data bit_width="128"> 5.61 </data>
                </max>
                <min>
                  <data bit_width="1"> 2.11 </data>
                  <data bit_width="4"> 1.50 </data>
                  <data bit_width="8"> 1.44 </data>
                  <data bit_width="16"> 1.46 </data>
                  <data bit_width="32"> 1.57 </data>
                  <data bit_width="128"> 1.86 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 2.89 </data>
                    <data bit_width="4"> 2.49 </data>
                    <data bit_width="8"> 2.61 </data>
                    <data bit_width="16"> 2.94 </data>
                    <data bit_width="32"> 3.13 </data>
                    <data bit_width="128"> 4.90 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 2.11 </data>
                    <data bit_width="4"> 1.50 </data>
                    <data bit_width="8"> 1.44 </data>
                    <data bit_width="16"> 1.46 </data>
                    <data bit_width="32"> 1.57 </data>
                    <data bit_width="128"> 1.86 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 3.48 </data>
                    <data bit_width="4"> 3.11 </data>
                    <data bit_width="8"> 3.31 </data>
                    <data bit_width="16"> 3.60 </data>
                    <data bit_width="32"> 4.63 </data>
                    <data bit_width="128"> 5.61 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="10">
                <max>
                  <data bit_width="1"> 4.55 </data>
                  <data bit_width="4"> 2.73 </data>
                  <data bit_width="8"> 3.12 </data>
                  <data bit_width="16"> 3.33 </data>
                  <data bit_width="32"> 4.94 </data>
                  <data bit_width="128"> 5.58 </data>
                </max>
                <min>
                  <data bit_width="1"> 3.67 </data>
                  <data bit_width="4"> 1.42 </data>
                  <data bit_width="8"> 1.12 </data>
                  <data bit_width="16"> 1.32 </data>
                  <data bit_width="32"> 1.35 </data>
                  <data bit_width="128"> 1.43 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 3.90 </data>
                    <data bit_width="4"> 2.20 </data>
                    <data bit_width="8"> 2.34 </data>
                    <data bit_width="16"> 2.43 </data>
                    <data bit_width="32"> 2.71 </data>
                    <data bit_width="128"> 4.53 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 3.67 </data>
                    <data bit_width="4"> 1.42 </data>
                    <data bit_width="8"> 1.12 </data>
                    <data bit_width="16"> 1.32 </data>
                    <data bit_width="32"> 1.35 </data>
                    <data bit_width="128"> 1.43 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 4.55 </data>
                    <data bit_width="4"> 2.73 </data>
                    <data bit_width="8"> 3.12 </data>
                    <data bit_width="16"> 3.33 </data>
                    <data bit_width="32"> 4.94 </data>
                    <data bit_width="128"> 5.58 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="11">
                <max>
                  <data bit_width="1"> 4.69 </data>
                  <data bit_width="4"> 3.32 </data>
                  <data bit_width="8"> 3.72 </data>
                  <data bit_width="16"> 4.05 </data>
                  <data bit_width="32"> 4.34 </data>
                  <data bit_width="128"> 8.02 </data>
                </max>
                <min>
                  <data bit_width="1"> 3.89 </data>
                  <data bit_width="4"> 1.29 </data>
                  <data bit_width="8"> 1.61 </data>
                  <data bit_width="16"> 1.47 </data>
                  <data bit_width="32"> 1.43 </data>
                  <data bit_width="128"> 1.60 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 3.97 </data>
                    <data bit_width="4"> 2.45 </data>
                    <data bit_width="8"> 2.85 </data>
                    <data bit_width="16"> 2.96 </data>
                    <data bit_width="32"> 3.64 </data>
                    <data bit_width="128"> 8.02 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 3.89 </data>
                    <data bit_width="4"> 1.29 </data>
                    <data bit_width="8"> 1.61 </data>
                    <data bit_width="16"> 1.47 </data>
                    <data bit_width="32"> 1.43 </data>
                    <data bit_width="128"> 1.60 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 4.69 </data>
                    <data bit_width="4"> 3.32 </data>
                    <data bit_width="8"> 3.72 </data>
                    <data bit_width="16"> 4.05 </data>
                    <data bit_width="32"> 4.34 </data>
                    <data bit_width="128"> 6.21 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="12">
                <max>
                  <data bit_width="1"> 4.99 </data>
                  <data bit_width="4"> 3.19 </data>
                  <data bit_width="8"> 3.58 </data>
                  <data bit_width="16"> 3.72 </data>
                  <data bit_width="32"> 5.21 </data>
                  <data bit_width="128"> 8.28 </data>
                </max>
                <min>
                  <data bit_width="1"> 2.75 </data>
                  <data bit_width="4"> 1.58 </data>
                  <data bit_width="8"> 1.42 </data>
                  <data bit_width="16"> 1.61 </data>
                  <data bit_width="32"> 1.61 </data>
                  <data bit_width="128"> 2.48 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 4.21 </data>
                    <data bit_width="4"> 2.65 </data>
                    <data bit_width="8"> 3.03 </data>
                    <data bit_width="16"> 3.15 </data>
                    <data bit_width="32"> 3.69 </data>
                    <data bit_width="128"> 8.28 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 2.75 </data>
                    <data bit_width="4"> 1.58 </data>
                    <data bit_width="8"> 1.42 </data>
                    <data bit_width="16"> 1.61 </data>
                    <data bit_width="32"> 1.61 </data>
                    <data bit_width="128"> 2.48 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 4.99 </data>
                    <data bit_width="4"> 3.19 </data>
                    <data bit_width="8"> 3.58 </data>
                    <data bit_width="16"> 3.72 </data>
                    <data bit_width="32"> 5.21 </data>
                    <data bit_width="128"> 6.70 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="13">
                <max>
                  <data bit_width="1"> 5.23 </data>
                  <data bit_width="4"> 2.50 </data>
                  <data bit_width="8"> 2.65 </data>
                  <data bit_width="16"> 2.72 </data>
                  <data bit_width="32"> 3.58 </data>
                  <data bit_width="128"> 5.00 </data>
                </max>
                <min>
                  <data bit_width="1"> 3.03 </data>
                  <data bit_width="4"> 1.47 </data>
                  <data bit_width="8"> 1.53 </data>
                  <data bit_width="16"> 1.43 </data>
                  <data bit_width="32"> 1.96 </data>
                  <data bit_width="128"> 1.85 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 4.35 </data>
                    <data bit_width="4"> 2.11 </data>
                    <data bit_width="8"> 2.37 </data>
                    <data bit_width="16"> 2.45 </data>
                    <data bit_width="32"> 2.67 </data>
                    <data bit_width="128"> 5.00 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 3.03 </data>
                    <data bit_width="4"> 1.47 </data>
                    <data bit_width="8"> 1.53 </data>
                    <data bit_width="16"> 1.43 </data>
                    <data bit_width="32"> 1.96 </data>
                    <data bit_width="128"> 1.85 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 5.23 </data>
                    <data bit_width="4"> 2.50 </data>
                    <data bit_width="8"> 2.65 </data>
                    <data bit_width="16"> 2.72 </data>
                    <data bit_width="32"> 3.58 </data>
                    <data bit_width="128"> 4.70 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="14">
                <max>
                  <data bit_width="1"> 6.11 </data>
                  <data bit_width="4"> 2.24 </data>
                  <data bit_width="8"> 2.40 </data>
                  <data bit_width="16"> 2.39 </data>
                  <data bit_width="32"> 3.33 </data>
                  <data bit_width="128"> 4.83 </data>
                </max>
                <min>
                  <data bit_width="1"> 3.71 </data>
                  <data bit_width="4"> 1.48 </data>
                  <data bit_width="8"> 1.26 </data>
                  <data bit_width="16"> 1.65 </data>
                  <data bit_width="32"> 1.78 </data>
                  <data bit_width="128"> 1.82 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 5.17 </data>
                    <data bit_width="4"> 1.74 </data>
                    <data bit_width="8"> 1.98 </data>
                    <data bit_width="16"> 2.05 </data>
                    <data bit_width="32"> 2.32 </data>
                    <data bit_width="128"> 4.83 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 3.71 </data>
                    <data bit_width="4"> 1.48 </data>
                    <data bit_width="8"> 1.26 </data>
                    <data bit_width="16"> 1.65 </data>
                    <data bit_width="32"> 1.78 </data>
                    <data bit_width="128"> 1.82 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 6.11 </data>
                    <data bit_width="4"> 2.24 </data>
                    <data bit_width="8"> 2.40 </data>
                    <data bit_width="16"> 2.39 </data>
                    <data bit_width="32"> 3.33 </data>
                    <data bit_width="128"> 4.75 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="15">
                <max>
                  <data bit_width="1"> 6.16 </data>
                  <data bit_width="4"> 2.91 </data>
                  <data bit_width="8"> 3.20 </data>
                  <data bit_width="16"> 3.50 </data>
                  <data bit_width="32"> 4.84 </data>
                  <data bit_width="128"> 6.60 </data>
                </max>
                <min>
                  <data bit_width="1"> 3.76 </data>
                  <data bit_width="4"> 1.70 </data>
                  <data bit_width="8"> 1.59 </data>
                  <data bit_width="16"> 1.70 </data>
                  <data bit_width="32"> 1.89 </data>
                  <data bit_width="128"> 1.71 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 5.17 </data>
                    <data bit_width="4"> 2.77 </data>
                    <data bit_width="8"> 3.03 </data>
                    <data bit_width="16"> 3.20 </data>
                    <data bit_width="32"> 3.45 </data>
                    <data bit_width="128"> 6.60 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 3.76 </data>
                    <data bit_width="4"> 1.70 </data>
                    <data bit_width="8"> 1.59 </data>
                    <data bit_width="16"> 1.70 </data>
                    <data bit_width="32"> 1.89 </data>
                    <data bit_width="128"> 1.71 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 6.16 </data>
                    <data bit_width="4"> 2.91 </data>
                    <data bit_width="8"> 3.20 </data>
                    <data bit_width="16"> 3.50 </data>
                    <data bit_width="32"> 4.84 </data>
                    <data bit_width="128"> 6.18 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16">
                <max>
                  <data bit_width="1"> 5.90 </data>
                  <data bit_width="4"> 2.90 </data>
                  <data bit_width="8"> 3.19 </data>
                  <data bit_width="16"> 3.52 </data>
                  <data bit_width="32"> 4.84 </data>
                  <data bit_width="128"> 6.53 </data>
                </max>
                <min>
                  <data bit_width="1"> 2.48 </data>
                  <data bit_width="4"> 1.27 </data>
                  <data bit_width="8"> 1.27 </data>
                  <data bit_width="16"> 1.31 </data>
                  <data bit_width="32"> 1.67 </data>
                  <data bit_width="128"> 1.45 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 5.02 </data>
                    <data bit_width="4"> 2.81 </data>
                    <data bit_width="8"> 3.07 </data>
                    <data bit_width="16"> 3.23 </data>
                    <data bit_width="32"> 3.43 </data>
                    <data bit_width="128"> 6.53 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 2.48 </data>
                    <data bit_width="4"> 1.27 </data>
                    <data bit_width="8"> 1.27 </data>
                    <data bit_width="16"> 1.31 </data>
                    <data bit_width="32"> 1.67 </data>
                    <data bit_width="128"> 1.45 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 5.90 </data>
                    <data bit_width="4"> 2.90 </data>
                    <data bit_width="8"> 3.19 </data>
                    <data bit_width="16"> 3.52 </data>
                    <data bit_width="32"> 4.84 </data>
                    <data bit_width="128"> 6.20 </data>
                  </priority>
                </typ>
              </parameters>
            </est_index>

            <est_index name="delay_fullpath">
            <!-- Dummy yet -->
            </est_index>
          </est_type>

          <est_type name="power">
            <est_index name="static_power">
              <unit> mW </unit>
              <parameters name="2">
                <max>
                  <data bit_width="1"> 1.2867 </data>
                  <data bit_width="4"> 5.1472 </data>
                  <data bit_width="8"> 10.3043 </data>
                  <data bit_width="16"> 20.5896 </data>
                  <data bit_width="32"> 34.4835 </data>
                  <data bit_width="128"> 42.2284 </data>
                </max>
                <min>
                  <data bit_width="1"> 0.3270302 </data>
                  <data bit_width="4"> 1.3090 </data>
                  <data bit_width="8"> 2.6170 </data>
                  <data bit_width="16"> 5.2348 </data>
                  <data bit_width="32"> 10.4684 </data>
                  <data bit_width="128"> 41.8799 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 0.3297527 </data>
                    <data bit_width="4"> 1.3199 </data>
                    <data bit_width="8"> 2.6388 </data>
                    <data bit_width="16"> 5.2784 </data>
                    <data bit_width="32"> 10.5555 </data>
                    <data bit_width="128"> 42.2284 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 1.2867 </data>
                    <data bit_width="4"> 5.1472 </data>
                    <data bit_width="8"> 10.3043 </data>
                    <data bit_width="16"> 20.5896 </data>
                    <data bit_width="32"> 34.4835 </data>
                    <data bit_width="128"> 42.2284 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 0.3270302 </data>
                    <data bit_width="4"> 1.3090 </data>
                    <data bit_width="8"> 2.6170 </data>
                    <data bit_width="16"> 5.2348 </data>
                    <data bit_width="32"> 10.4684 </data>
                    <data bit_width="128"> 41.8799 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="3">
                <max>
                  <data bit_width="1"> 1.1994 </data>
                  <data bit_width="4"> 12.8837 </data>
                  <data bit_width="8"> 25.7692 </data>
                  <data bit_width="16"> 40.5812 </data>
                  <data bit_width="32"> 102.1487 </data>
                  <data bit_width="128"> 319.8740 </data>
                </max>
                <min>
                  <data bit_width="1"> 0.8364267 </data>
                  <data bit_width="4"> 3.4576 </data>
                  <data bit_width="8"> 6.5204 </data>
                  <data bit_width="16"> 12.6558 </data>
                  <data bit_width="32"> 25.1232 </data>
                  <data bit_width="128"> 99.0869 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 0.8425544 </data>
                    <data bit_width="4"> 3.8306 </data>
                    <data bit_width="8"> 7.3730 </data>
                    <data bit_width="16"> 13.8126 </data>
                    <data bit_width="32"> 27.7881 </data>
                    <data bit_width="128"> 109.2660 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 1.1994 </data>
                    <data bit_width="4"> 12.8837 </data>
                    <data bit_width="8"> 25.7692 </data>
                    <data bit_width="16"> 40.5812 </data>
                    <data bit_width="32"> 102.1487 </data>
                    <data bit_width="128"> 319.8740 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 0.8364267 </data>
                    <data bit_width="4"> 3.4576 </data>
                    <data bit_width="8"> 6.5204 </data>
                    <data bit_width="16"> 12.6558 </data>
                    <data bit_width="32"> 25.1232 </data>
                    <data bit_width="128"> 99.0869 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4">
                <max>
                  <data bit_width="1"> 0.6944436 </data>
                  <data bit_width="4"> 11.8846 </data>
                  <data bit_width="8"> 35.2829 </data>
                  <data bit_width="16"> 11.1121 </data>
                  <data bit_width="32"> 52.2126 </data>
                  <data bit_width="128"> 156.2704 </data>
                </max>
                <min>
                  <data bit_width="1"> 0.6944436 </data>
                  <data bit_width="4"> 2.7776 </data>
                  <data bit_width="8"> 5.5549 </data>
                  <data bit_width="16"> 11.1121 </data>
                  <data bit_width="32"> 22.2239 </data>
                  <data bit_width="128"> 88.8989 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 0.6944436 </data>
                    <data bit_width="4"> 2.7776 </data>
                    <data bit_width="8"> 5.5549 </data>
                    <data bit_width="16"> 11.1121 </data>
                    <data bit_width="32"> 22.2239 </data>
                    <data bit_width="128"> 156.2704 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 0.6944436 </data>
                    <data bit_width="4"> 11.8846 </data>
                    <data bit_width="8"> 35.2829 </data>
                    <data bit_width="16"> 11.1121 </data>
                    <data bit_width="32"> 52.2126 </data>
                    <data bit_width="128"> 97.3812 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 0.6944436 </data>
                    <data bit_width="4"> 2.7776 </data>
                    <data bit_width="8"> 5.5549 </data>
                    <data bit_width="16"> 11.1121 </data>
                    <data bit_width="32"> 22.2239 </data>
                    <data bit_width="128"> 88.8989 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="5">
                <max>
                  <data bit_width="1"> 2.8785 </data>
                  <data bit_width="4"> 6.4740 </data>
                  <data bit_width="8"> 54.2135 </data>
                  <data bit_width="16"> 144.5523 </data>
                  <data bit_width="32"> 168.5463 </data>
                  <data bit_width="128"> 777.5195 </data>
                </max>
                <min>
                  <data bit_width="1"> 1.8713 </data>
                  <data bit_width="4"> 5.2239 </data>
                  <data bit_width="8"> 9.0810 </data>
                  <data bit_width="16"> 16.7369 </data>
                  <data bit_width="32"> 34.7679 </data>
                  <data bit_width="128"> 134.0591 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 1.9856 </data>
                    <data bit_width="4"> 6.4740 </data>
                    <data bit_width="8"> 10.9519 </data>
                    <data bit_width="16"> 20.3183 </data>
                    <data bit_width="32"> 41.2419 </data>
                    <data bit_width="128"> 163.2425 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 2.8785 </data>
                    <data bit_width="4"> 6.3187 </data>
                    <data bit_width="8"> 54.2135 </data>
                    <data bit_width="16"> 144.5523 </data>
                    <data bit_width="32"> 168.5463 </data>
                    <data bit_width="128"> 777.5195 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 1.8713 </data>
                    <data bit_width="4"> 5.2239 </data>
                    <data bit_width="8"> 9.0810 </data>
                    <data bit_width="16"> 16.7369 </data>
                    <data bit_width="32"> 34.7679 </data>
                    <data bit_width="128"> 134.0591 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="6">
                <max>
                  <data bit_width="1"> 2.7577 </data>
                  <data bit_width="4"> 42.0551 </data>
                  <data bit_width="8"> 72.1756 </data>
                  <data bit_width="16"> 127.7765 </data>
                  <data bit_width="32"> 219.3998 </data>
                  <data bit_width="128"> 671.4873 </data>
                </max>
                <min>
                  <data bit_width="1"> 2.4001 </data>
                  <data bit_width="4"> 6.6249 </data>
                  <data bit_width="8"> 10.6754 </data>
                  <data bit_width="16"> 19.6903 </data>
                  <data bit_width="32"> 38.0659 </data>
                  <data bit_width="128"> 153.9980 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 2.5177 </data>
                    <data bit_width="4"> 7.8350 </data>
                    <data bit_width="8"> 13.0677 </data>
                    <data bit_width="16"> 24.0852 </data>
                    <data bit_width="32"> 47.4059 </data>
                    <data bit_width="128"> 192.2766 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 2.7577 </data>
                    <data bit_width="4"> 42.0551 </data>
                    <data bit_width="8"> 72.1756 </data>
                    <data bit_width="16"> 127.7765 </data>
                    <data bit_width="32"> 219.3998 </data>
                    <data bit_width="128"> 671.4873 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 2.4001 </data>
                    <data bit_width="4"> 6.6249 </data>
                    <data bit_width="8"> 10.6754 </data>
                    <data bit_width="16"> 19.6903 </data>
                    <data bit_width="32"> 38.0659 </data>
                    <data bit_width="128"> 153.9980 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="7">
                <max>
                  <data bit_width="1"> 12.0202 </data>
                  <data bit_width="4"> 38.4680 </data>
                  <data bit_width="8"> 64.8862 </data>
                  <data bit_width="16"> 135.4740 </data>
                  <data bit_width="32"> 272.3884 </data>
                  <data bit_width="128"> 974.0698 </data>
                </max>
                <min>
                  <data bit_width="1"> 2.7459 </data>
                  <data bit_width="4"> 7.2799 </data>
                  <data bit_width="8"> 12.9600 </data>
                  <data bit_width="16"> 23.7842 </data>
                  <data bit_width="32"> 45.9291 </data>
                  <data bit_width="128"> 188.2372 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 2.8673 </data>
                    <data bit_width="4"> 9.3330 </data>
                    <data bit_width="8"> 16.1165 </data>
                    <data bit_width="16"> 29.7916 </data>
                    <data bit_width="32"> 58.3608 </data>
                    <data bit_width="128"> 236.9435 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 12.0202 </data>
                    <data bit_width="4"> 38.4680 </data>
                    <data bit_width="8"> 64.8862 </data>
                    <data bit_width="16"> 135.4740 </data>
                    <data bit_width="32"> 272.3884 </data>
                    <data bit_width="128"> 974.0698 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 2.7459 </data>
                    <data bit_width="4"> 7.2799 </data>
                    <data bit_width="8"> 12.9600 </data>
                    <data bit_width="16"> 23.7842 </data>
                    <data bit_width="32"> 45.9291 </data>
                    <data bit_width="128"> 188.2372 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8">
                <max>
                  <data bit_width="1"> 5.0787 </data>
                  <data bit_width="4"> 36.1310 </data>
                  <data bit_width="8"> 104.6586 </data>
                  <data bit_width="16"> 179.9789 </data>
                  <data bit_width="32"> 303.5141 </data>
                  <data bit_width="128"> 1041.1 </data>
                </max>
                <min>
                  <data bit_width="1"> 2.6135 </data>
                  <data bit_width="4"> 8.2080 </data>
                  <data bit_width="8"> 14.0177 </data>
                  <data bit_width="16"> 25.9809 </data>
                  <data bit_width="32"> 49.7834 </data>
                  <data bit_width="128"> 216.5662 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 2.7291 </data>
                    <data bit_width="4"> 10.5087 </data>
                    <data bit_width="8"> 18.1146 </data>
                    <data bit_width="16"> 32.3947 </data>
                    <data bit_width="32"> 63.7912 </data>
                    <data bit_width="128"> 260.5614 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 5.0787 </data>
                    <data bit_width="4"> 36.1310 </data>
                    <data bit_width="8"> 104.6586 </data>
                    <data bit_width="16"> 179.9789 </data>
                    <data bit_width="32"> 303.5141 </data>
                    <data bit_width="128"> 1041.1 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 2.6135 </data>
                    <data bit_width="4"> 8.2080 </data>
                    <data bit_width="8"> 14.0177 </data>
                    <data bit_width="16"> 25.9809 </data>
                    <data bit_width="32"> 49.7834 </data>
                    <data bit_width="128"> 216.5662 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="9">
                <max>
                  <data bit_width="1"> 10.7644 </data>
                  <data bit_width="4"> 38.6045 </data>
                  <data bit_width="8"> 100.3335 </data>
                  <data bit_width="16"> 186.8585 </data>
                  <data bit_width="32"> 360.9676 </data>
                  <data bit_width="128"> 1089.9 </data>
                </max>
                <min>
                  <data bit_width="1"> 3.8558 </data>
                  <data bit_width="4"> 8.8392 </data>
                  <data bit_width="8"> 14.4994 </data>
                  <data bit_width="16"> 25.8409 </data>
                  <data bit_width="32"> 48.9662 </data>
                  <data bit_width="128"> 206.5265 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 4.0830 </data>
                    <data bit_width="4"> 11.0671 </data>
                    <data bit_width="8"> 18.1637 </data>
                    <data bit_width="16"> 32.4999 </data>
                    <data bit_width="32"> 60.7780 </data>
                    <data bit_width="128"> 241.6318 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 10.7644 </data>
                    <data bit_width="4"> 38.6045 </data>
                    <data bit_width="8"> 100.3335 </data>
                    <data bit_width="16"> 186.8585 </data>
                    <data bit_width="32"> 360.9676 </data>
                    <data bit_width="128"> 1089.9 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 3.8558 </data>
                    <data bit_width="4"> 8.8392 </data>
                    <data bit_width="8"> 14.4994 </data>
                    <data bit_width="16"> 25.8409 </data>
                    <data bit_width="32"> 48.9662 </data>
                    <data bit_width="128"> 206.5265 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="10">
                <max>
                  <data bit_width="1"> 5.5549 </data>
                  <data bit_width="4"> 67.5682 </data>
                  <data bit_width="8"> 94.3580 </data>
                  <data bit_width="16"> 163.6549 </data>
                  <data bit_width="32"> 292.1978 </data>
                  <data bit_width="128"> 1205.3 </data>
                </max>
                <min>
                  <data bit_width="1"> 4.4143 </data>
                  <data bit_width="4"> 10.1369 </data>
                  <data bit_width="8"> 16.6663 </data>
                  <data bit_width="16"> 29.6356 </data>
                  <data bit_width="32"> 55.7273 </data>
                  <data bit_width="128"> 235.5718 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 4.4458 </data>
                    <data bit_width="4"> 11.8772 </data>
                    <data bit_width="8"> 19.5896 </data>
                    <data bit_width="16"> 35.1245 </data>
                    <data bit_width="32"> 67.7655 </data>
                    <data bit_width="128"> 267.0718 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 5.5549 </data>
                    <data bit_width="4"> 67.5682 </data>
                    <data bit_width="8"> 94.3580 </data>
                    <data bit_width="16"> 163.6549 </data>
                    <data bit_width="32"> 292.1978 </data>
                    <data bit_width="128"> 1205.3 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 4.4143 </data>
                    <data bit_width="4"> 10.1369 </data>
                    <data bit_width="8"> 16.6663 </data>
                    <data bit_width="16"> 29.6356 </data>
                    <data bit_width="32"> 55.7273 </data>
                    <data bit_width="128"> 235.5718 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="11">
                <max>
                  <data bit_width="1"> 6.1953 </data>
                  <data bit_width="4"> 61.3491 </data>
                  <data bit_width="8"> 121.0485 </data>
                  <data bit_width="16"> 235.9820 </data>
                  <data bit_width="32"> 536.9933 </data>
                  <data bit_width="128"> 1447 </data>
                </max>
                <min>
                  <data bit_width="1"> 4.8504 </data>
                  <data bit_width="4"> 11.3018 </data>
                  <data bit_width="8"> 17.2129 </data>
                  <data bit_width="16"> 30.5930 </data>
                  <data bit_width="32"> 57.9352 </data>
                  <data bit_width="128"> 248.4366 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 5.0845 </data>
                    <data bit_width="4"> 13.5332 </data>
                    <data bit_width="8"> 22.5243 </data>
                    <data bit_width="16"> 40.2087 </data>
                    <data bit_width="32"> 76.3387 </data>
                    <data bit_width="128"> 304.8139 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 6.1953 </data>
                    <data bit_width="4"> 61.3491 </data>
                    <data bit_width="8"> 121.0485 </data>
                    <data bit_width="16"> 235.9820 </data>
                    <data bit_width="32"> 536.9933 </data>
                    <data bit_width="128"> 1447 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 4.8504 </data>
                    <data bit_width="4"> 11.3018 </data>
                    <data bit_width="8"> 17.2129 </data>
                    <data bit_width="16"> 30.5930 </data>
                    <data bit_width="32"> 57.9352 </data>
                    <data bit_width="128"> 248.4366 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="12">
                <max>
                  <data bit_width="1"> 14.9201 </data>
                  <data bit_width="4"> 74.9055 </data>
                  <data bit_width="8"> 146.5857 </data>
                  <data bit_width="16"> 236.6430 </data>
                  <data bit_width="32"> 469.3581 </data>
                  <data bit_width="128"> 1443.7 </data>
                </max>
                <min>
                  <data bit_width="1"> 5.4930 </data>
                  <data bit_width="4"> 12.0904 </data>
                  <data bit_width="8"> 20.3667 </data>
                  <data bit_width="16"> 37.1011 </data>
                  <data bit_width="32"> 74.4461 </data>
                  <data bit_width="128"> 294.7191 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 5.5327 </data>
                    <data bit_width="4"> 13.1926 </data>
                    <data bit_width="8"> 21.9540 </data>
                    <data bit_width="16"> 39.5810 </data>
                    <data bit_width="32"> 76.6994 </data>
                    <data bit_width="128"> 313.3689 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 14.9201 </data>
                    <data bit_width="4"> 74.9055 </data>
                    <data bit_width="8"> 146.5857 </data>
                    <data bit_width="16"> 236.6430 </data>
                    <data bit_width="32"> 469.3581 </data>
                    <data bit_width="128"> 1443.7 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 5.4930 </data>
                    <data bit_width="4"> 12.0904 </data>
                    <data bit_width="8"> 20.3667 </data>
                    <data bit_width="16"> 37.1011 </data>
                    <data bit_width="32"> 74.4461 </data>
                    <data bit_width="128"> 294.7191 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="13">
                <max>
                  <data bit_width="1"> 14.6569 </data>
                  <data bit_width="4"> 78.7960 </data>
                  <data bit_width="8"> 146.1787 </data>
                  <data bit_width="16"> 294.5999 </data>
                  <data bit_width="32"> 351.5207 </data>
                  <data bit_width="128"> 1799.6 </data>
                </max>
                <min>
                  <data bit_width="1"> 5.8524 </data>
                  <data bit_width="4"> 12.3815 </data>
                  <data bit_width="8"> 20.7960 </data>
                  <data bit_width="16"> 37.6820 </data>
                  <data bit_width="32"> 75.8640 </data>
                  <data bit_width="128"> 309.6601 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 5.8963 </data>
                    <data bit_width="4"> 12.9194 </data>
                    <data bit_width="8"> 21.5226 </data>
                    <data bit_width="16"> 38.7586 </data>
                    <data bit_width="32"> 76.9398 </data>
                    <data bit_width="128"> 309.6601 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 14.6569 </data>
                    <data bit_width="4"> 78.7960 </data>
                    <data bit_width="8"> 146.1787 </data>
                    <data bit_width="16"> 294.5999 </data>
                    <data bit_width="32"> 351.5207 </data>
                    <data bit_width="128"> 1799.6 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 5.8524 </data>
                    <data bit_width="4"> 12.3815 </data>
                    <data bit_width="8"> 20.7960 </data>
                    <data bit_width="16"> 37.6820 </data>
                    <data bit_width="32"> 75.8640 </data>
                    <data bit_width="128"> 316.6523 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="14">
                <max>
                  <data bit_width="1"> 15.5771 </data>
                  <data bit_width="4"> 92.9153 </data>
                  <data bit_width="8"> 140.6424 </data>
                  <data bit_width="16"> 216.7001 </data>
                  <data bit_width="32"> 510.9126 </data>
                  <data bit_width="128"> 4713.7 </data>
                </max>
                <min>
                  <data bit_width="1"> 6.1976 </data>
                  <data bit_width="4"> 12.1803 </data>
                  <data bit_width="8"> 21.5170 </data>
                  <data bit_width="16"> 36.9414 </data>
                  <data bit_width="32"> 78.1214 </data>
                  <data bit_width="128"> 297.0933 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 6.2454 </data>
                    <data bit_width="4"> 14.8218 </data>
                    <data bit_width="8"> 25.4971 </data>
                    <data bit_width="16"> 46.1389 </data>
                    <data bit_width="32"> 89.1114 </data>
                    <data bit_width="128"> 371.6918 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 15.5771 </data>
                    <data bit_width="4"> 92.9153 </data>
                    <data bit_width="8"> 140.6424 </data>
                    <data bit_width="16"> 216.7001 </data>
                    <data bit_width="32"> 510.9126 </data>
                    <data bit_width="128"> 4713.7 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 6.1976 </data>
                    <data bit_width="4"> 12.1803 </data>
                    <data bit_width="8"> 21.5170 </data>
                    <data bit_width="16"> 36.9414 </data>
                    <data bit_width="32"> 78.1214 </data>
                    <data bit_width="128"> 297.0933 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="15">
                <max>
                  <data bit_width="1"> 19.0393 </data>
                  <data bit_width="4"> 81.4610 </data>
                  <data bit_width="8"> 170.5300 </data>
                  <data bit_width="16"> 288.7632 </data>
                  <data bit_width="32"> 534.4023 </data>
                  <data bit_width="128"> 11897 </data>
                </max>
                <min>
                  <data bit_width="1"> 6.5639 </data>
                  <data bit_width="4"> 13.4853 </data>
                  <data bit_width="8"> 22.2975 </data>
                  <data bit_width="16"> 39.8102 </data>
                  <data bit_width="32"> 80.0403 </data>
                  <data bit_width="128"> 332.6220 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 6.6152 </data>
                    <data bit_width="4"> 17.4461 </data>
                    <data bit_width="8"> 29.7693 </data>
                    <data bit_width="16"> 53.6957 </data>
                    <data bit_width="32"> 103.5045 </data>
                    <data bit_width="128"> 426.0140 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 19.0393 </data>
                    <data bit_width="4"> 81.4610 </data>
                    <data bit_width="8"> 170.5300 </data>
                    <data bit_width="16"> 288.7632 </data>
                    <data bit_width="32"> 534.4023 </data>
                    <data bit_width="128"> 11897 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 6.5639 </data>
                    <data bit_width="4"> 13.4853 </data>
                    <data bit_width="8"> 22.2975 </data>
                    <data bit_width="16"> 39.8102 </data>
                    <data bit_width="32"> 80.0403 </data>
                    <data bit_width="128"> 332.6220 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16">
                <max>
                  <data bit_width="1"> 18.8156 </data>
                  <data bit_width="4"> 77.4831 </data>
                  <data bit_width="8"> 160.0163 </data>
                  <data bit_width="16"> 283.5160 </data>
                  <data bit_width="32"> 758.0689 </data>
                  <data bit_width="128"> 11836.4 </data>
                </max>
                <min>
                  <data bit_width="1"> 6.6514 </data>
                  <data bit_width="4"> 14.2459 </data>
                  <data bit_width="8"> 23.5162 </data>
                  <data bit_width="16"> 42.1489 </data>
                  <data bit_width="32"> 85.0847 </data>
                  <data bit_width="128"> 353.4558 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 6.6978 </data>
                    <data bit_width="4"> 18.2980 </data>
                    <data bit_width="8"> 31.4530 </data>
                    <data bit_width="16"> 57.2430 </data>
                    <data bit_width="32"> 109.7095 </data>
                    <data bit_width="128"> 455.4258 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 18.8156 </data>
                    <data bit_width="4"> 77.4831 </data>
                    <data bit_width="8"> 160.0163 </data>
                    <data bit_width="16"> 283.5160 </data>
                    <data bit_width="32"> 758.0689 </data>
                    <data bit_width="128"> 11836.4 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 6.6514 </data>
                    <data bit_width="4"> 14.2459 </data>
                    <data bit_width="8"> 23.5162 </data>
                    <data bit_width="16"> 42.1489 </data>
                    <data bit_width="32"> 85.0847 </data>
                    <data bit_width="128"> 353.4558 </data>
                  </priority>
                </typ>
              </parameters>
            </est_index>
          </est_type>

          <est_type name="function_cycle">
            <!-- Dummy yet -->
          </est_type>

          <est_type name="function_power">
            <!-- Dummy yet -->
          </est_type>
        </library>
      </estimation_data>

      <estimation_method>
         
        <est_type name="shape">

          <est_index name="area">

            <parameters name="2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for multiplexor(2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="3">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for multiplexor(3) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for multiplexor(4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="5">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for multiplexor(5) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="6">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for multiplexor(6) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="7">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for multiplexor(7) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for multiplexor(8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="9">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for multiplexor(9) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="10">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for multiplexor(10) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="11">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for multiplexor(11) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="12">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for multiplexor(12) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="13">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for multiplexor(13) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="14">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for multiplexor(14) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="15">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for multiplexor(15) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for multiplexor(16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

          </est_index>

           <est_index name="aspect_ratio">

             <!-- Dummy yet -->

           </est_index>
		
           <est_index name="height">

             <!-- Dummy yet -->

           </est_index>
		
           <est_index name="width">

             <!-- Dummy yet -->

           </est_index>
		
        </est_type>

        <est_type name="timing">

          <est_index name="delay">

            <parameters name="2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for multiplexor(2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="3">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for multiplexor(3) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for multiplexor(4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="5">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for multiplexor(5) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="6">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for multiplexor(6) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="7">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for multiplexor(7) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for multiplexor(8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="9">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for multiplexor(9) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="10">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for multiplexor(10) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="11">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for multiplexor(11) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="12">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for multiplexor(12) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="13">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for multiplexor(13) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="14">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for multiplexor(14) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="15">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for multiplexor(15) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for multiplexor(16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

          </est_index>

          <est_index name="delay_fullpath">

            <parameters name="2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for multiplexor(2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

$Round = 1;

#--------------------------------------------------------------------------#
# Type: Table lookup for delay_fullpath
#--------------------------------------------------------------------------#
$n = 0;

while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {

	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;

	$_ = <TMP>;
	$i = 0;

	while (! /\<\s*\/data\s*\>/ ) {

	    # path 
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }

	    # inport
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # outport
	     if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # internal
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }

	    $_ = <TMP>;
	}
    }
}
close(TMP);

$bit_width = $ARGV[1];
$line_num = $i;


for ($k = 0; $k < $line_num; $k++) {

    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }

    if ($bit_width < $bit[0]) {

	# divide by zero
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    
    elsif ($bit[$n-1] < $bit_width) {

	# divide by zero
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}

	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}

	# divide by zero
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";

    
  NEXT:
}


exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}


            </parameters>

            <parameters name="3">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for multiplexor(3) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

$Round = 1;

#--------------------------------------------------------------------------#
# Type: Table lookup for delay_fullpath
#--------------------------------------------------------------------------#
$n = 0;

while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {

	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;

	$_ = <TMP>;
	$i = 0;

	while (! /\<\s*\/data\s*\>/ ) {

	    # path 
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }

	    # inport
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # outport
	     if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # internal
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }

	    $_ = <TMP>;
	}
    }
}
close(TMP);

$bit_width = $ARGV[1];
$line_num = $i;


for ($k = 0; $k < $line_num; $k++) {

    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }

    if ($bit_width < $bit[0]) {

	# divide by zero
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    
    elsif ($bit[$n-1] < $bit_width) {

	# divide by zero
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}

	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}

	# divide by zero
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";

    
  NEXT:
}


exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}


            </parameters>

            <parameters name="4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for multiplexor(4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

$Round = 1;

#--------------------------------------------------------------------------#
# Type: Table lookup for delay_fullpath
#--------------------------------------------------------------------------#
$n = 0;

while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {

	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;

	$_ = <TMP>;
	$i = 0;

	while (! /\<\s*\/data\s*\>/ ) {

	    # path 
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }

	    # inport
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # outport
	     if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # internal
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }

	    $_ = <TMP>;
	}
    }
}
close(TMP);

$bit_width = $ARGV[1];
$line_num = $i;


for ($k = 0; $k < $line_num; $k++) {

    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }

    if ($bit_width < $bit[0]) {

	# divide by zero
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    
    elsif ($bit[$n-1] < $bit_width) {

	# divide by zero
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}

	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}

	# divide by zero
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";

    
  NEXT:
}


exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}


            </parameters>

            <parameters name="5">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for multiplexor(5) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

$Round = 1;

#--------------------------------------------------------------------------#
# Type: Table lookup for delay_fullpath
#--------------------------------------------------------------------------#
$n = 0;

while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {

	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;

	$_ = <TMP>;
	$i = 0;

	while (! /\<\s*\/data\s*\>/ ) {

	    # path 
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }

	    # inport
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # outport
	     if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # internal
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }

	    $_ = <TMP>;
	}
    }
}
close(TMP);

$bit_width = $ARGV[1];
$line_num = $i;


for ($k = 0; $k < $line_num; $k++) {

    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }

    if ($bit_width < $bit[0]) {

	# divide by zero
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    
    elsif ($bit[$n-1] < $bit_width) {

	# divide by zero
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}

	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}

	# divide by zero
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";

    
  NEXT:
}


exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}


            </parameters>

            <parameters name="6">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for multiplexor(6) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

$Round = 1;

#--------------------------------------------------------------------------#
# Type: Table lookup for delay_fullpath
#--------------------------------------------------------------------------#
$n = 0;

while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {

	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;

	$_ = <TMP>;
	$i = 0;

	while (! /\<\s*\/data\s*\>/ ) {

	    # path 
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }

	    # inport
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # outport
	     if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # internal
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }

	    $_ = <TMP>;
	}
    }
}
close(TMP);

$bit_width = $ARGV[1];
$line_num = $i;


for ($k = 0; $k < $line_num; $k++) {

    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }

    if ($bit_width < $bit[0]) {

	# divide by zero
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    
    elsif ($bit[$n-1] < $bit_width) {

	# divide by zero
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}

	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}

	# divide by zero
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";

    
  NEXT:
}


exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}


            </parameters>

            <parameters name="7">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for multiplexor(7) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

$Round = 1;

#--------------------------------------------------------------------------#
# Type: Table lookup for delay_fullpath
#--------------------------------------------------------------------------#
$n = 0;

while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {

	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;

	$_ = <TMP>;
	$i = 0;

	while (! /\<\s*\/data\s*\>/ ) {

	    # path 
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }

	    # inport
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # outport
	     if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # internal
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }

	    $_ = <TMP>;
	}
    }
}
close(TMP);

$bit_width = $ARGV[1];
$line_num = $i;


for ($k = 0; $k < $line_num; $k++) {

    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }

    if ($bit_width < $bit[0]) {

	# divide by zero
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    
    elsif ($bit[$n-1] < $bit_width) {

	# divide by zero
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}

	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}

	# divide by zero
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";

    
  NEXT:
}


exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}


            </parameters>

            <parameters name="8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for multiplexor(8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

$Round = 1;

#--------------------------------------------------------------------------#
# Type: Table lookup for delay_fullpath
#--------------------------------------------------------------------------#
$n = 0;

while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {

	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;

	$_ = <TMP>;
	$i = 0;

	while (! /\<\s*\/data\s*\>/ ) {

	    # path 
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }

	    # inport
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # outport
	     if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # internal
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }

	    $_ = <TMP>;
	}
    }
}
close(TMP);

$bit_width = $ARGV[1];
$line_num = $i;


for ($k = 0; $k < $line_num; $k++) {

    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }

    if ($bit_width < $bit[0]) {

	# divide by zero
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    
    elsif ($bit[$n-1] < $bit_width) {

	# divide by zero
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}

	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}

	# divide by zero
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";

    
  NEXT:
}


exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}


            </parameters>

            <parameters name="9">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for multiplexor(9) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

$Round = 1;

#--------------------------------------------------------------------------#
# Type: Table lookup for delay_fullpath
#--------------------------------------------------------------------------#
$n = 0;

while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {

	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;

	$_ = <TMP>;
	$i = 0;

	while (! /\<\s*\/data\s*\>/ ) {

	    # path 
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }

	    # inport
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # outport
	     if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # internal
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }

	    $_ = <TMP>;
	}
    }
}
close(TMP);

$bit_width = $ARGV[1];
$line_num = $i;


for ($k = 0; $k < $line_num; $k++) {

    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }

    if ($bit_width < $bit[0]) {

	# divide by zero
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    
    elsif ($bit[$n-1] < $bit_width) {

	# divide by zero
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}

	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}

	# divide by zero
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";

    
  NEXT:
}


exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}


            </parameters>

            <parameters name="10">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for multiplexor(10) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

$Round = 1;

#--------------------------------------------------------------------------#
# Type: Table lookup for delay_fullpath
#--------------------------------------------------------------------------#
$n = 0;

while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {

	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;

	$_ = <TMP>;
	$i = 0;

	while (! /\<\s*\/data\s*\>/ ) {

	    # path 
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }

	    # inport
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # outport
	     if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # internal
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }

	    $_ = <TMP>;
	}
    }
}
close(TMP);

$bit_width = $ARGV[1];
$line_num = $i;


for ($k = 0; $k < $line_num; $k++) {

    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }

    if ($bit_width < $bit[0]) {

	# divide by zero
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    
    elsif ($bit[$n-1] < $bit_width) {

	# divide by zero
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}

	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}

	# divide by zero
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";

    
  NEXT:
}


exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}


            </parameters>

            <parameters name="11">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for multiplexor(11) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

$Round = 1;

#--------------------------------------------------------------------------#
# Type: Table lookup for delay_fullpath
#--------------------------------------------------------------------------#
$n = 0;

while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {

	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;

	$_ = <TMP>;
	$i = 0;

	while (! /\<\s*\/data\s*\>/ ) {

	    # path 
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }

	    # inport
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # outport
	     if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # internal
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }

	    $_ = <TMP>;
	}
    }
}
close(TMP);

$bit_width = $ARGV[1];
$line_num = $i;


for ($k = 0; $k < $line_num; $k++) {

    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }

    if ($bit_width < $bit[0]) {

	# divide by zero
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    
    elsif ($bit[$n-1] < $bit_width) {

	# divide by zero
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}

	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}

	# divide by zero
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";

    
  NEXT:
}


exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}


            </parameters>

            <parameters name="12">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for multiplexor(12) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

$Round = 1;

#--------------------------------------------------------------------------#
# Type: Table lookup for delay_fullpath
#--------------------------------------------------------------------------#
$n = 0;

while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {

	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;

	$_ = <TMP>;
	$i = 0;

	while (! /\<\s*\/data\s*\>/ ) {

	    # path 
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }

	    # inport
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # outport
	     if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # internal
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }

	    $_ = <TMP>;
	}
    }
}
close(TMP);

$bit_width = $ARGV[1];
$line_num = $i;


for ($k = 0; $k < $line_num; $k++) {

    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }

    if ($bit_width < $bit[0]) {

	# divide by zero
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    
    elsif ($bit[$n-1] < $bit_width) {

	# divide by zero
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}

	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}

	# divide by zero
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";

    
  NEXT:
}


exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}


            </parameters>

            <parameters name="13">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for multiplexor(13) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

$Round = 1;

#--------------------------------------------------------------------------#
# Type: Table lookup for delay_fullpath
#--------------------------------------------------------------------------#
$n = 0;

while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {

	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;

	$_ = <TMP>;
	$i = 0;

	while (! /\<\s*\/data\s*\>/ ) {

	    # path 
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }

	    # inport
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # outport
	     if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # internal
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }

	    $_ = <TMP>;
	}
    }
}
close(TMP);

$bit_width = $ARGV[1];
$line_num = $i;


for ($k = 0; $k < $line_num; $k++) {

    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }

    if ($bit_width < $bit[0]) {

	# divide by zero
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    
    elsif ($bit[$n-1] < $bit_width) {

	# divide by zero
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}

	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}

	# divide by zero
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";

    
  NEXT:
}


exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}


            </parameters>

            <parameters name="14">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for multiplexor(14) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

$Round = 1;

#--------------------------------------------------------------------------#
# Type: Table lookup for delay_fullpath
#--------------------------------------------------------------------------#
$n = 0;

while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {

	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;

	$_ = <TMP>;
	$i = 0;

	while (! /\<\s*\/data\s*\>/ ) {

	    # path 
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }

	    # inport
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # outport
	     if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # internal
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }

	    $_ = <TMP>;
	}
    }
}
close(TMP);

$bit_width = $ARGV[1];
$line_num = $i;


for ($k = 0; $k < $line_num; $k++) {

    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }

    if ($bit_width < $bit[0]) {

	# divide by zero
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    
    elsif ($bit[$n-1] < $bit_width) {

	# divide by zero
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}

	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}

	# divide by zero
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";

    
  NEXT:
}


exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}


            </parameters>

            <parameters name="15">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for multiplexor(15) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

$Round = 1;

#--------------------------------------------------------------------------#
# Type: Table lookup for delay_fullpath
#--------------------------------------------------------------------------#
$n = 0;

while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {

	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;

	$_ = <TMP>;
	$i = 0;

	while (! /\<\s*\/data\s*\>/ ) {

	    # path 
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }

	    # inport
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # outport
	     if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # internal
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }

	    $_ = <TMP>;
	}
    }
}
close(TMP);

$bit_width = $ARGV[1];
$line_num = $i;


for ($k = 0; $k < $line_num; $k++) {

    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }

    if ($bit_width < $bit[0]) {

	# divide by zero
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    
    elsif ($bit[$n-1] < $bit_width) {

	# divide by zero
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}

	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}

	# divide by zero
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";

    
  NEXT:
}


exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}


            </parameters>

            <parameters name="16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for multiplexor(16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

$Round = 1;

#--------------------------------------------------------------------------#
# Type: Table lookup for delay_fullpath
#--------------------------------------------------------------------------#
$n = 0;

while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {

	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;

	$_ = <TMP>;
	$i = 0;

	while (! /\<\s*\/data\s*\>/ ) {

	    # path 
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }

	    # inport
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # outport
	     if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # internal
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }

	    $_ = <TMP>;
	}
    }
}
close(TMP);

$bit_width = $ARGV[1];
$line_num = $i;


for ($k = 0; $k < $line_num; $k++) {

    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }

    if ($bit_width < $bit[0]) {

	# divide by zero
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    
    elsif ($bit[$n-1] < $bit_width) {

	# divide by zero
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}

	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}

	# divide by zero
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";

    
  NEXT:
}


exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}


            </parameters>

          </est_index>

        </est_type>

        <est_type name="power">

          <est_index name="static_power">

            <parameters name="2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for multiplexor(2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="3">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for multiplexor(3) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for multiplexor(4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="5">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for multiplexor(5) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="6">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for multiplexor(6) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="7">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for multiplexor(7) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for multiplexor(8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="9">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for multiplexor(9) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="10">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for multiplexor(10) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="11">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for multiplexor(11) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="12">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for multiplexor(12) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="13">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for multiplexor(13) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="14">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for multiplexor(14) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="15">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for multiplexor(15) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for multiplexor(16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

          </est_index>

        </est_type>

        <est_type name="function_cycle">

        </est_type>

        <est_type name="function_power">

        </est_type>

    
      </estimation_method>

    </estimation>


  </model>

  <model>
    <design_level> synthesis </design_level>
    <version> 1.0 </version>
    <author> <![CDATA[ Tak. Tokihisa ]]> </author>
    <affiliation> <![CDATA[ Osaka Univ. ]]> </affiliation>
    <model_info> <![CDATA[
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                %
%    Copyright 2008 ASIP Solutions, Inc. All rights reserved.    %
%              Copyright 2002-2005 PEAS Project                  %
%                                                                %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
]]> </model_info>

    <parameter>
      <parameter_value key="bit_width">
        <value> 1 </value>
        <value> 2 </value>
        <value> 3 </value>
        <value> 4 </value>
        <value> 5 </value>
        <value> 6 </value>
        <value> 7 </value>
        <value> 8 </value>
        <value> 9 </value>
        <value> 10 </value>
        <value> 11 </value>
        <value> 12 </value>
        <value> 13 </value>
        <value> 14 </value>
        <value> 15 </value>
        <value> 16 </value>
        <value> 17 </value>
        <value> 18 </value>
        <value> 19 </value>
        <value> 20 </value>
        <value> 21 </value>
        <value> 22 </value>
        <value> 23 </value>
        <value> 24 </value>
        <value> 25 </value>
        <value> 26 </value>
        <value> 27 </value>
        <value> 28 </value>
        <value> 29 </value>
        <value> 30 </value>
        <value> 31 </value>
        <value> 32 </value>
        <value> 64 </value>
        <value> 128 </value>
      </parameter_value>
      <parameter_value key="number_of_ports">
        <value> 2 </value>
        <value> 3 </value>
        <value> 4 </value>
        <value> 5 </value>
        <value> 6 </value>
        <value> 7 </value>
        <value> 8 </value>
        <value> 9 </value>
        <value> 10 </value>
        <value> 11 </value>
        <value> 12 </value>
        <value> 13 </value>
        <value> 14 </value>
        <value> 15 </value>
        <value> 16 </value>
      </parameter_value>
    </parameter>

    <function_description>
      <script>
        <![CDATA[
#!/usr/bin/perl
# this script generates multiplexor function definition in synthesis level
# parameter : bit_width number_of_ports

if ($#ARGV != 1){
    print "number of parameters is wrong.\n";
    print "usage : this_script bit_width number_of_ports\n";
    exit (100);
}

$bit_width = $ARGV[0];
$number_of_ports = $ARGV[1];
$number_of_ports2 = logn(2, $ARGV[1]);
sub logn {
    my ($p, $q) = @_;
    log($q)/log($p);
}

if ($number_of_ports == 1){
    print "number_of_ports 1 is not supported.\n";
    exit (100);
}

$a = int $number_of_ports2;
$b = $number_of_ports2 - $a;
if ($b != 0){
    $number_of_ports2 = $a + 1;
}

if ($bit_width == 1){
    $data1 = "";
}
else{
    $w = $bit_width - 1;
    $data1 = "[" . $w .":0]";
}

if ($number_of_ports2 == 1){
    $data2 = "";
    $v2    = "bit";
}
else{
    $w2 = $number_of_ports2 - 1;
    $data2 = "[" . $w2 .":0]";
    $v2    = "bit_vector";
}
{
    print <<FHM_DL_FUNC_BEGIN1;
/** ${number_of_ports} multiplexor */

model mux${bit_width}_${number_of_ports}{
  port{
FHM_DL_FUNC_BEGIN1
}
print "    in  ";
for ($i=0; $i < $number_of_ports ; ++$i){
    print "data_in${i}${data1}, ";
}

print "sel${data2};\n";
{
    print <<FHM_DL_FUNC_BEGIN2;
    out data_out${data1};
  }

  /** select */
  function sel{
    input{
FHM_DL_FUNC_BEGIN2
}

for ($i=0; $i < $number_of_ports ; ++$i){
    print "      unsigned data_in$i;\n";
}
{
print <<FHM_DL_FUNC
      $v2 sel;
    }
    output{
      unsigned data_out;
    }
  }
}
FHM_DL_FUNC
}

exit (0);
        ]]>
      </script>
    </function_description>

    <function_conv>
      <script>
        <![CDATA[
#!/usr/bin/perl
# this script generates multiplexor function definition in synthesis level
# parameter : bit_width number_of_ports

if ($#ARGV != 1){
    print "number of parameters is wrong.\n";
    print "usage : this_script bit_width number_of_ports\n";
    exit (100);
}

$bit_width = $ARGV[0];
$number_of_ports = $ARGV[1];
$number_of_ports2 = logn(2, $ARGV[1]);
sub logn {
    my ($p, $q) = @_;
    log($q)/log($p);
}

if ($number_of_ports == 1){
    print "number_of_ports 1 is not supported.\n";
    exit (100);
}

$a = int $number_of_ports2;
$b = $number_of_ports2 - $a;
if ($b != 0){
    $number_of_ports2 = $a + 1;
}

if ($bit_width == 1){
    $data1 = "";
}
else{
    $w = $bit_width - 1;
    $data1 = "[" . $w .":0]";
}

if ($number_of_ports2 == 1){
    $data2 = "";
}
else{
    $w2 = $number_of_ports2 - 1;
    $data2 = "[" . $w2 .":0]";
}

{
    print <<FHM_DL_FUNC_BEGIN;
/** select */
function sel{
  input{
FHM_DL_FUNC_BEGIN
}

for ($i=0; $i < $number_of_ports ; ++$i){
    print "    bit [$w:0] data_in$i;\n";
}
print "    bit [$w2:0] sel;\n";
{
print <<FHM_DL_FUNC
  }
  output{
    bit [$w:0] data_out;
  }

  control{
  }

  protocol{
  }
}
FHM_DL_FUNC
}

exit (0);
        ]]>
      </script>
    </function_conv>

    <function_port>
      <script>
        <![CDATA[
#!/usr/bin/perl
# this script generates multiplexor port infomation in behavior level
# parameter : bit_width number_of_ports

if ($#ARGV != 1){
    print "number of parameters is wrong.\n";
    print "usage : this_script bit_width number_of_ports\n";
    exit (100);
}

$bit_width     = $ARGV[0];
$number_of_ports     = $ARGV[1];
$number_of_ports2    = logn(2, $ARGV[1]);
sub logn {
    my ($p, $q) = @_;
    log($q)/log($p);
}

if ($number_of_ports == 1){
    print "number_of_ports 1 is not supported.\n";
    exit (100);
}


$a = int $number_of_ports2;
$b = $number_of_ports2 - $a;
if ($b != 0){
    $number_of_ports2 = $a + 1;
}



if ($bit_width!=1){
    for ($i = 0; $i <= $number_of_ports-1 ; ++$i){
	print "data_in";
        print $i;
	print "	in	bit_vector   ";
	print $bit_width-1;
	print "   0";
	print "	data\n";
    }

}
else{
    for ($i = 0; $i <= $number_of_ports-1 ; ++$i){
	print "data_in";
        print $i;
	print "	in	bit		data";
	print "\n";
    }
}


if ($number_of_ports2 != 1){
    print "sel	in	bit_vector   ";
    print $number_of_ports2-1;
    print "   0";
    print "	data\n";
}
else{
    print "sel	in	bit		data\n";
}


if ($bit_width!=1){
    print "data_out	out	bit_vector   ";
    print $bit_width-1;
    print "   0";
    print "	data\n";
}
else{
    print "data_out	out	bit		data\n";
}
exit (0);
        ]]>
      </script>
    </function_port>

    <design>
      <design_lang> vhdl </design_lang>

      <instance>
        <script>
          <![CDATA[
#!/usr/bin/perl
# this script generates  multiplexor instance in synthesis level
# parameter : instance_name bit_width number_of_ports

if ($#ARGV != 2){
    print "number of parameters is wrong.\n";
    print "usage : this_script instance_name bit_width number_of_ports\n";
    exit (100);
}

$instance_name = $ARGV[0];
$bit_width     = $ARGV[1];
$number_of_ports     = $ARGV[2];

if ($number_of_ports == 1){
    print "number_of_ports 1 is not supported.\n";
    exit (100);
}


$number_of_ports2    = logn(2, $ARGV[2]);
sub logn {
    my ($p, $q) = @_;
    log($q)/log($p);
}
$a = int $number_of_ports2;
$b = $number_of_ports2 - $a;
if ($b != 0){
    $number_of_ports2 = $a + 1;
}


if ($bit_width == 1){
    $data1 = "";
}
else{
    $w = $bit_width - 1;
    $data1 = "_vector($w downto 0)";
}

if ($number_of_ports2 == 1){
    $data2 = "";
}
else{
    $w2 = $number_of_ports2 - 1;
    $data2 = "_vector($w2 downto 0)";
}

if ($number_of_ports2 == 1){
    $data3 =  "data_out <= data_in0 when sel = \'0\' else\n--            : data_out <= data_in1";
}
else{
    for ($i = 0; $i <= $number_of_ports-1 ; ++$i){
        $sel_string = '';
        if ($i != 0){
            $f = 0;
	    for ($d = $i; $d != 0; ++$f){
	        $e = $d%2;
	        $d = ($d - $e)/2;
	        $sel_string = $e . $sel_string;
	    }
	    if ($f != $number_of_ports2){
	        for (;$f != $number_of_ports2; ++$f){
		    $sel_string = '0' . $sel_string;
	        }
	    }
        }
        else{
	    for ($d = 0; $d != $number_of_ports2; ++$d){
	        $sel_string = '0' . $sel_string;
	    }
        }
        if ($i == 0){
	    $data3 = "data_out <= data_in0 when sel = \"";
            $data3 = $data3 . $sel_string;
	    $data3 = $data3 . "\" else\n";
        }
	elsif ($i != $number_of_ports -1) {
            $data3 = $data3 . "--            : data_in";
	    $data3 = $data3 . $i;
	    $data3 = $data3 . " when sel = \"";
	    $data3 = $data3 . $sel_string;
	    $data3 = $data3 . "\" else\n";
        }
	else {
	    $data3 = $data3 . "--            : data_in";
	    $data3 = $data3 . $i;
	    $data3 = $data3 . ";";
	}
        
    }     

}


print <<FHM_DL_INSTANCE;
-- VHDL Preprocessor version 0.57
-- module     : $bit_width-bit $number_of_ports-port multiplexor
-- feature    : select one input from n input ports.
-- references : start from scratch
-- author     : Tak. Tokihisa
-- version    : 1.0  : first cut 2002/01/15

-- Functionality : synthesis level
--  port
--   data_in  : input data
--   data_out : selected data 
--   select     : $data3



library ieee;
  use ieee.std_logic_1164.all;
  use ieee.std_logic_unsigned.all;
  use ieee.std_logic_arith.all;

entity $instance_name is
  port (
FHM_DL_INSTANCE

for ($i = 0; $i <= $number_of_ports-1 ; ++$i){
  print "        data_in";
  print $i;
  print " : in std_logic$data1;";
  print "\n";
}

{
print <<FHM_DL_INSTANCE2
        sel      : in std_logic$data2;
        data_out : out std_logic$data1);
end $instance_name;

architecture synthesis of $instance_name is
begin
FHM_DL_INSTANCE2
}


if ($number_of_ports2 == 1){
    print <<FHM_DL_INSTANCE3;
  data_out <= data_in0 when sel = '0' else
              data_in1;
FHM_DL_INSTANCE3
}
else{
    for ($i = 0; $i <= $number_of_ports-1 ; ++$i){
        $sel_string = '';
        if ($i != 0){
            $f = 0;
	    for ($d = $i; $d != 0; ++$f){
	        $e = $d%2;
	        $d = ($d - $e)/2;
	        $sel_string = $e . $sel_string;
	    }
	    if ($f != $number_of_ports2){
	        for (;$f != $number_of_ports2; ++$f){
		    $sel_string = '0' . $sel_string;
	        }
	    }
        }
        else{
	    for ($d = 0; $d != $number_of_ports2; ++$d){
	        $sel_string = '0' . $sel_string;
	    }
        }
        if ($i == 0){
	    print <<FHM_DL_INSTANCE4;
  data_out <= data_in0 when sel = "$sel_string" else
FHM_DL_INSTANCE4
        }
	elsif ($i != $number_of_ports -1) {
	    print <<FHM_DL_INSTANCE5;
	      data_in$i when sel = "$sel_string" else
FHM_DL_INSTANCE5
        }
	else {
	    print <<FHM_DL_INSTANCE6;
	      data_in$i;
FHM_DL_INSTANCE6
	}
        
    }     
}
print "end synthesis;\n";
exit (0);
          ]]>
        </script>
      </instance>

      <entity></entity>

      <testvector>
        <testvector_script>
          <![CDATA[ ]]>
        </testvector_script>
      </testvector>

      <synthesis>
        <parameter></parameter>
        <synthesis_script>
          <script>
            <![CDATA[
#!/usr/bin/perl
# this script generates adder synthesis script in synthesis level
# parameter : instance_name priority bit_width number_of_ports   

if ($#ARGV != 3){
    print "number of parameters is wrong.\n";
    print "usage : this_script instance_name priority bit_width number_of_ports\n";
    exit (100);
}


$instance_name = $ARGV[0];
$priority      = $ARGV[1];
$bit_width     = $ARGV[2];
$number_of_ports    = $ARGV[3];

if ($priority eq "area"){
  $priority_const = "set_max_area 0";
}
elsif ($priority eq "performance"){
  $priority_const = "set_max_delay -from all_inputs() -to all_outputs() 0";
}
elsif ($priority eq "power"){
  $priority_const = "";
}
elsif ($priority eq "none"){
  $priority_const = "";
}
else{
  print "Not supported priority\n";
  exit (100);
}

print <<FHM_DL_SCRIPT;
hdlin_auto_save_templates = TRUE

analyze -f vhdl $instance_name.vhd

elaborate $instance_name

uniquify

compile 

write -hierarchy -output $instance_name.db

report_area

report_timing

quit
FHM_DL_SCRIPT
exit (0);
            ]]>
          </script>
        </synthesis_script>
      </synthesis>
    </design>

    <design>
      <design_lang> Verilog </design_lang>
                                                                                
      <instance>
        <script>
          <![CDATA[
#!/usr/bin/perl
# this script generates  multiplexor instance in synthesis level
# parameter : instance_name bit_width number_of_ports

if ($#ARGV != 2){
    print "number of parameters is wrong.\n";
    print "usage : this_script instance_name bit_width number_of_ports\n";
    exit (100);
}

$instance_name = $ARGV[0];
$bit_width     = $ARGV[1];
$number_of_ports     = $ARGV[2];

if ($number_of_ports == 1){
    print "number_of_ports 1 is not supported.\n";
    exit (100);
}


$number_of_ports2    = logn(2, $ARGV[2]);
sub logn {
    my ($p, $q) = @_;
    log($q)/log($p);
}
$a = int $number_of_ports2;
$b = $number_of_ports2 - $a;
if ($b != 0){
    $number_of_ports2 = $a + 1;
}


if ($bit_width == 1){
    $data1 = "";
}
else{
    $w = $bit_width - 1;
    $data1 = "[$w:0]";
}

if ($number_of_ports2 == 1){
    $data2 = "";
}
else{
    $w2 = $number_of_ports2 - 1;
    $data2 = "[ $w2:0]";
}

if ($number_of_ports2 == 1){
    $data3 =  "data_out <= data_in0 when sel = \'0\' else\n//            : data_out <= data_in1";
}
else{
    for ($i = 0; $i <= $number_of_ports-1 ; ++$i){
        $sel_string = '';
        if ($i != 0){
            $f = 0;
	    for ($d = $i; $d != 0; ++$f){
	        $e = $d%2;
	        $d = ($d - $e)/2;
	        $sel_string = $e . $sel_string;
	    }
	    if ($f != $number_of_ports2){
	        for (;$f != $number_of_ports2; ++$f){
		    $sel_string = '0' . $sel_string;
	        }
	    }
        }
        else{
	    for ($d = 0; $d != $number_of_ports2; ++$d){
	        $sel_string = '0' . $sel_string;
	    }
        }
        if ($i == 0){
	    $data3 = "data_out <= data_in0 when sel = \"";
            $data3 = $data3 . $sel_string;
	    $data3 = $data3 . "\" else\n";
        }
	elsif ($i != $number_of_ports -1) {
            $data3 = $data3 . "//            : data_in";
	    $data3 = $data3 . $i;
	    $data3 = $data3 . " when sel = \"";
	    $data3 = $data3 . $sel_string;
	    $data3 = $data3 . "\" else\n";
        }
	else {
	    $data3 = $data3 . "//            : data_in";
	    $data3 = $data3 . $i;
	    $data3 = $data3 . ";";
	}
        
    }     

}


print <<FHM_DL_INSTANCE;
// Module     : $bit_width-bit $number_of_ports-port multiplexor
// feature    : select one input from n input ports.
// references : start from scratch
// author     : Tak. Tokihisa
// version    : 1.0  : first cut 2002/01/15
\n
// Functionality : synthesis level
//  port
//   data_in  : input data
//   data_out : selected data 
//   select     : $data3
\n
module $instance_name (
FHM_DL_INSTANCE
for ($i = 0; $i <= $number_of_ports-1 ; ++$i){
  print "  data_in$i ,\n";
}

{
print <<FHM_DL_INSTANCE2
  sel      , 
  data_out );
\n
FHM_DL_INSTANCE2
}

for ($i = 0; $i <= $number_of_ports-1 ; ++$i){
  print "input  $data1";
  print " data_in";
  print "$i ;\n";
}

{
print <<FHM_DL_INSTANCE2
input  $data2 sel      ;
output $data1 data_out ;
\n
FHM_DL_INSTANCE2
}

for ($i = 0; $i <= $number_of_ports-1 ; ++$i){
  print "wire  $data1";
  print " data_in";
  print "$i ;\n";
}

{
print <<FHM_DL_INSTANCE2
wire  $data2 sel      ;
wire  $data1 data_out ;
\n
FHM_DL_INSTANCE2
}

if ($number_of_ports2 == 1){
    print <<FHM_DL_INSTANCE3;
assign  data_out = (sel == 1'b0) ? data_in0 : data_in1 ;
FHM_DL_INSTANCE3
}
else{
    for ($i = 0; $i <= $number_of_ports-1 ; ++$i){
        $sel_string = '';
        if ($i != 0){
            $f = 0;
	    for ($d = $i; $d != 0; ++$f){
	        $e = $d%2;
	        $d = ($d - $e)/2;
	        $sel_string = $e . $sel_string;
	    }
	    if ($f != $number_of_ports2){
	        for (;$f != $number_of_ports2; ++$f){
		    $sel_string = '0' . $sel_string;
	        }
	    }
        }
        else{
	    for ($d = 0; $d != $number_of_ports2; ++$d){
	        $sel_string = '0' . $sel_string;
	    }
        }
        if ($i == 0){
	    print <<FHM_DL_INSTANCE4;
assign data_out = (sel == ${number_of_ports2}'b$sel_string) ? data_in0 :
FHM_DL_INSTANCE4
        }
	elsif ($i != $number_of_ports -1) {
	    print <<FHM_DL_INSTANCE5;
	          (sel == ${number_of_ports2}'b$sel_string) ? data_in$i :
FHM_DL_INSTANCE5
        }
	else {
	    print <<FHM_DL_INSTANCE6;
	                           data_in$i ;
FHM_DL_INSTANCE6
	}
        
    }     
}
print "endmodule\n";
exit (0);
          ]]>
        </script>
      </instance>
                                                                                
      <entity></entity>
                                                                                
      <testvector></testvector>
                                                                                
      <synthesis></synthesis>
    </design>

    <design>
      <design_lang> SystemC Header </design_lang>

      <instance>
        <script>
          <![CDATA[
#!/usr/bin/perl
# this script generates  multiplexor instance in synthesis level
# parameter : name_space instance_name bit_width number_of_ports

if ($#ARGV != 3){
    print "number of parameters is wrong.\n";
    print "usage : this_script name_space instance_name bit_width number_of_ports\n";
    exit (100);
}

$name_space      = $ARGV[0];
$instance_name   = $ARGV[1];
$bit_width       = $ARGV[2];
$number_of_ports = $ARGV[3];

if ($number_of_ports == 1){
    print "number_of_ports 1 is not supported.\n";
    exit (100);
}

$number_of_ports2    = logn(2, $number_of_ports);
sub logn {
    my ($p, $q) = @_;
    log($q)/log($p);
}

$a = int $number_of_ports2;
$b = $number_of_ports2 - $a;
if ($b != 0){
    $number_of_ports2 = $a + 1;
}

if ($bit_width == 1){
    $data1 = "bool";
} elsif ($bit_width <= 64) {
    $data1 = "sc_dt::sc_uint<${bit_width}>";
} else{
    $data1 = "sc_dt::sc_biguint<${bit_width}>";
}

if ($number_of_ports2 == 1){
    $data2 = "bool";
} elsif ($number_of_ports2 <= 64) {
    $data2 = "sc_dt::sc_uint<${number_of_ports2}>";
} else{
    $data2 = "sc_dt::sc_biguint<${number_of_ports2}>";
}

$macro = "__" . uc($namespace) . "_" . uc($instance_name) . "_H__";

{
print <<FHM_DL_INSTANCE
#ifndef $macro
#define $macro 1

// VHDL Preprocessor version 0.57
// module     : $bit_width-bit $number_of_ports-port multiplexor
// feature    : select one input from n input ports.
// references : start from scratch
// author     : Tak. Tokihisa
// version    : 1.0  : first cut 2002/01/15

// Functionality : synthesis level
//  port
//   data_in  : input data
//   data_out : selected data 
//   sel      : selector (0 : data_in0, 1 : data_in1, ...)

#include <systemc>

namespace ${name_space} {
  SC_MODULE(${instance_name}) {
FHM_DL_INSTANCE
}

for ($i = 0; $i <= $number_of_ports-1 ; ++$i){
  print "    sc_core::sc_in< ${data1} > data_in${i};\n";
}

{
print <<FHM_DL_INSTANCE
    sc_core::sc_in< $data2 > sel;
    sc_core::sc_out< $data1 > data_out;

    SC_CTOR(${instance_name}) :
FHM_DL_INSTANCE
}

for ($i = 0; $i <= $number_of_ports-1 ; ++$i){
  print "      data_in${i}(\"data_in${i}\"),\n";
}

{
print <<FHM_DL_INSTANCE
      sel("sel"),
      data_out("data_out")
    {
      SC_METHOD(process);
FHM_DL_INSTANCE
}

print "      sensitive << sel";
for ($i = 0; $i < $number_of_ports ; ++$i){
  print " << data_in$i";
}
print ";\n";

{
    print <<EOF
    }

    void process();
  };
};

#endif // $macro
EOF
}
          ]]>
        </script>
      </instance>

      <entity>
        <script>
          <![CDATA[
          ]]>
        </script>
      </entity>

      <testvector>
        <testvector_script>
          <![CDATA[ ]]>
        </testvector_script>
      </testvector>
    </design>

    <design>
      <design_lang> SystemC Program </design_lang>

      <instance>
        <script>
          <![CDATA[
#!/usr/bin/perl
# this script generates  multiplexor instance in synthesis level
# parameter : name_space instance_name bit_width number_of_ports

if ($#ARGV != 3){
    print "number of parameters is wrong.\n";
    print "usage : this_script name_space instance_name bit_width number_of_ports\n";
    exit (100);
}

$name_space      = $ARGV[0];
$instance_name   = $ARGV[1];
$bit_width       = $ARGV[2];
$number_of_ports = $ARGV[3];

if ($number_of_ports == 1){
    print "number_of_ports 1 is not supported.\n";
    exit (100);
}

$number_of_ports2    = logn(2, $number_of_ports);
sub logn {
    my ($p, $q) = @_;
    log($q)/log($p);
}

$a = int $number_of_ports2;
$b = $number_of_ports2 - $a;
if ($b != 0){
    $number_of_ports2 = $a + 1;
}

if ($bit_width == 1){
    $data1 = "bool";
} elsif ($bit_width <= 64) {
    $data1 = "sc_dt::sc_uint<${bit_width}>";
} else{
    $data1 = "sc_dt::sc_biguint<${bit_width}>";
}

if ($number_of_ports2 == 1){
    $data2 = "bool";
} elsif ($number_of_ports2 <= 64) {
    $data2 = "sc_dt::sc_uint<${number_of_ports2}>";
} else {
    $data2 = "sc_dt::sc_biguint<${number_of_ports2}>";
}

if ($number_of_ports2 == 1){
    $data3 =  <<EOF
  if ( sel.read() == false ) {
    data_out.write( data_in0.read() );
  } else {
    data_out.write( data_in1.read() );
  }
EOF
} else {
  $data3 = "  switch( sel.read() ) {\n";
  for ($i = 0; $i < $number_of_ports; ++$i){
    $data3 .= <<EOF
    case $i:
      data_out.write( data_in${i}.read() );
      break;
EOF
  }     
  $data3 .= "  }\n";
}

{
print <<FHM_DL_INSTANCE
#include "${instance_name}.h"

// VHDL Preprocessor version 0.57
// module     : $bit_width-bit $number_of_ports-port multiplexor
// feature    : select one input from n input ports.
// references : start from scratch
// author     : Tak. Tokihisa
// version    : 1.0  : first cut 2002/01/15

// Functionality : synthesis level
//  port
//   data_in  : input data
//   data_out : selected data 
//   sel      : selector (0 : data_in0, 1 : data_in1, ...)

void ${name_space}::${instance_name}::process()
{
FHM_DL_INSTANCE
}

print $data3;

print "}\n";
          ]]>
        </script>
      </instance>

      <entity>
        <script>
          <![CDATA[
          ]]>
        </script>
      </entity>

      <testvector>
        <testvector_script>
          <![CDATA[ ]]>
        </testvector_script>
      </testvector>
    </design>

    <estimation>
      <estimation_data>
        <library name="OSAKA">

          <est_type name="shape">
            <est_index name="area">
              <unit> mm2 </unit>
              <translate>
                <translate_value key="gate"> 4201.68 </translate_value>
                <translate_value key="mm2">  1 </translate_value>
              </translate>

              <parameters name="2">
                <max>
                  <data bit_width="1"> 0.00216802802688448 </data>
                  <data bit_width="4"> 0.0086721118695379 </data>
                  <data bit_width="8"> 0.0173442237390758 </data>
                  <data bit_width="16"> 0.0346884474781516 </data>
                  <data bit_width="32"> 0.0615805487328878 </data>
                  <data bit_width="128"> 0.150177820776451 </data>
                </max>
                <min>
                  <data bit_width="1"> 0.00105426400868224 </data>
                  <data bit_width="4"> 0.00421705579672893 </data>
                  <data bit_width="8"> 0.00843411183145789 </data>
                  <data bit_width="16"> 0.0168682236629158 </data>
                  <data bit_width="32"> 0.0337364473258316 </data>
                  <data bit_width="128"> 0.134945818339331 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 0.00105426400868224 </data>
                    <data bit_width="4"> 0.00421705579672893 </data>
                    <data bit_width="8"> 0.00843411183145789 </data>
                    <data bit_width="16"> 0.0168682236629158 </data>
                    <data bit_width="32"> 0.0337364473258316 </data>
                    <data bit_width="128"> 0.134945818339331 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 0.00216802802688448 </data>
                    <data bit_width="4"> 0.0086721118695379 </data>
                    <data bit_width="8"> 0.0173442237390758 </data>
                    <data bit_width="16"> 0.0346884474781516 </data>
                    <data bit_width="32"> 0.0615805487328878 </data>
                    <data bit_width="128"> 0.134945818339331 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 0.00117326402772224 </data>
                    <data bit_width="4"> 0.00469305587288894 </data>
                    <data bit_width="8"> 0.00938611198377792 </data>
                    <data bit_width="16"> 0.0187722239675558 </data>
                    <data bit_width="32"> 0.0375444479351117 </data>
                    <data bit_width="128"> 0.150177820776451 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="3">
                <max>
                  <data bit_width="1"> 0.00266959406713505 </data>
                  <data bit_width="4"> 0.0184319600731136 </data>
                  <data bit_width="8"> 0.0368639201462272 </data>
                  <data bit_width="16"> 0.0758456614973058 </data>
                  <data bit_width="32"> 0.143859198463472 </data>
                  <data bit_width="128"> 0.617329274956684 </data>
                </max>
                <min>
                  <data bit_width="1"> 0.00243159402905504 </data>
                  <data bit_width="4"> 0.00870696959311513 </data>
                  <data bit_width="8"> 0.0165465425734468 </data>
                  <data bit_width="16"> 0.0321578230612517 </data>
                  <data bit_width="32"> 0.0635165797966528 </data>
                  <data bit_width="128"> 0.251889484444318 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 0.00243159402905504 </data>
                    <data bit_width="4"> 0.00870696959311513 </data>
                    <data bit_width="8"> 0.0165465425734468 </data>
                    <data bit_width="16"> 0.0321578230612517 </data>
                    <data bit_width="32"> 0.0635165797966528 </data>
                    <data bit_width="128"> 0.251889484444318 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 0.0026440281030445 </data>
                    <data bit_width="4"> 0.0184319600731136 </data>
                    <data bit_width="8"> 0.0368639201462272 </data>
                    <data bit_width="16"> 0.0758456614973058 </data>
                    <data bit_width="32"> 0.143859198463472 </data>
                    <data bit_width="128"> 0.617329274956684 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 0.00266959406713505 </data>
                    <data bit_width="4"> 0.00907187577350012 </data>
                    <data bit_width="8"> 0.017327487576398 </data>
                    <data bit_width="16"> 0.033243712752994 </data>
                    <data bit_width="32"> 0.0659602927876468 </data>
                    <data bit_width="128"> 0.260313035500086 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4">
                <max>
                  <data bit_width="1"> 0.00214246206279393 </data>
                  <data bit_width="4"> 0.0231250161840026 </data>
                  <data bit_width="8"> 0.0576331167532987 </data>
                  <data bit_width="16"> 0.0342793920527027 </data>
                  <data bit_width="32"> 0.113370600569296 </data>
                  <data bit_width="128"> 0.334280524694884 </data>
                </max>
                <min>
                  <data bit_width="1"> 0.00214246206279393 </data>
                  <data bit_width="4"> 0.00856984801317568 </data>
                  <data bit_width="8"> 0.0171396960263514 </data>
                  <data bit_width="16"> 0.0342793920527027 </data>
                  <data bit_width="32"> 0.0685587843434055 </data>
                  <data bit_width="128"> 0.274235195207631 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 0.00214246206279393 </data>
                    <data bit_width="4"> 0.00856984801317568 </data>
                    <data bit_width="8"> 0.0171396960263514 </data>
                    <data bit_width="16"> 0.0342793920527027 </data>
                    <data bit_width="32"> 0.0685587843434055 </data>
                    <data bit_width="128"> 0.334280524694884 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 0.00214246206279393 </data>
                    <data bit_width="4"> 0.0231250161840026 </data>
                    <data bit_width="8"> 0.0576331167532987 </data>
                    <data bit_width="16"> 0.0342793920527027 </data>
                    <data bit_width="32"> 0.113370600569296 </data>
                    <data bit_width="128"> 0.284505425686868 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 0.00214246206279393 </data>
                    <data bit_width="4"> 0.00856984801317568 </data>
                    <data bit_width="8"> 0.0171396960263514 </data>
                    <data bit_width="16"> 0.0342793920527027 </data>
                    <data bit_width="32"> 0.0685587843434055 </data>
                    <data bit_width="128"> 0.274235195207631 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="5">
                <max>
                  <data bit_width="1"> 0.00637625402220064 </data>
                  <data bit_width="4"> 0.0221218848175016 </data>
                  <data bit_width="8"> 0.0935710644313703 </data>
                  <data bit_width="16"> 0.240281636869062 </data>
                  <data bit_width="32"> 0.374359707783553 </data>
                  <data bit_width="128"> 1.80300798680528 </data>
                </max>
                <min>
                  <data bit_width="1"> 0.00539031982445117 </data>
                  <data bit_width="4"> 0.0149289043906247 </data>
                  <data bit_width="8"> 0.0306935797109727 </data>
                  <data bit_width="16"> 0.0569999704879953 </data>
                  <data bit_width="32"> 0.110089217170275 </data>
                  <data bit_width="128"> 0.46976887364102 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 0.00539031982445117 </data>
                    <data bit_width="4"> 0.0171238840178214 </data>
                    <data bit_width="8"> 0.0306935797109727 </data>
                    <data bit_width="16"> 0.0569999704879953 </data>
                    <data bit_width="32"> 0.110089217170275 </data>
                    <data bit_width="128"> 0.46976887364102 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 0.00637625402220064 </data>
                    <data bit_width="4"> 0.0149289043906247 </data>
                    <data bit_width="8"> 0.0935710644313703 </data>
                    <data bit_width="16"> 0.240281636869062 </data>
                    <data bit_width="32"> 0.374359707783553 </data>
                    <data bit_width="128"> 1.80300798680528 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 0.00622331995773119 </data>
                    <data bit_width="4"> 0.0221218848175016 </data>
                    <data bit_width="8"> 0.038785581005693 </data>
                    <data bit_width="16"> 0.0725889729822357 </data>
                    <data bit_width="32"> 0.13207212472154 </data>
                    <data bit_width="128"> 0.589324700833952 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="6">
                <max>
                  <data bit_width="1"> 0.00771965047314408 </data>
                  <data bit_width="4"> 0.0661183614649378 </data>
                  <data bit_width="8"> 0.132416152586584 </data>
                  <data bit_width="16"> 0.23940212319834 </data>
                  <data bit_width="32"> 0.440040164648426 </data>
                  <data bit_width="128"> 1.88007246886959 </data>
                </max>
                <min>
                  <data bit_width="1"> 0.00676765032082405 </data>
                  <data bit_width="4"> 0.0200063734030197 </data>
                  <data bit_width="8"> 0.036500862512138 </data>
                  <data bit_width="16"> 0.0680023371603739 </data>
                  <data bit_width="32"> 0.130300110908018 </data>
                  <data bit_width="128"> 0.551392108156737 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 0.00676765032082405 </data>
                    <data bit_width="4"> 0.0200063734030197 </data>
                    <data bit_width="8"> 0.036500862512138 </data>
                    <data bit_width="16"> 0.0680023371603739 </data>
                    <data bit_width="32"> 0.130300110908018 </data>
                    <data bit_width="128"> 0.551392108156737 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 0.00732871589459454 </data>
                    <data bit_width="4"> 0.0661183614649378 </data>
                    <data bit_width="8"> 0.132416152586584 </data>
                    <data bit_width="16"> 0.23940212319834 </data>
                    <data bit_width="32"> 0.440040164648426 </data>
                    <data bit_width="128"> 1.88007246886959 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 0.00771965047314408 </data>
                    <data bit_width="4"> 0.0250127413320386 </data>
                    <data bit_width="8"> 0.0451794932027189 </data>
                    <data bit_width="16"> 0.0838804725728756 </data>
                    <data bit_width="32"> 0.16236224890996 </data>
                    <data bit_width="128"> 0.680093475942956 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="7">
                <max>
                  <data bit_width="1"> 0.0213562908170065 </data>
                  <data bit_width="4"> 0.0743907075265132 </data>
                  <data bit_width="8"> 0.132714102930256 </data>
                  <data bit_width="16"> 0.267860268987643 </data>
                  <data bit_width="32"> 0.567922942489671 </data>
                  <data bit_width="128"> 2.27824327864092 </data>
                </max>
                <min>
                  <data bit_width="1"> 0.00773684787989566 </data>
                  <data bit_width="4"> 0.0242922207307553 </data>
                  <data bit_width="8"> 0.0444942915690866 </data>
                  <data bit_width="16"> 0.0831134365301498 </data>
                  <data bit_width="32"> 0.159077110346338 </data>
                  <data bit_width="128"> 0.683210486281678 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 0.00773684787989566 </data>
                    <data bit_width="4"> 0.0242922207307553 </data>
                    <data bit_width="8"> 0.0444942915690866 </data>
                    <data bit_width="16"> 0.0831134365301498 </data>
                    <data bit_width="32"> 0.159077110346338 </data>
                    <data bit_width="128"> 0.683210486281678 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 0.0213562908170065 </data>
                    <data bit_width="4"> 0.0743907075265132 </data>
                    <data bit_width="8"> 0.132714102930256 </data>
                    <data bit_width="16"> 0.267860268987643 </data>
                    <data bit_width="32"> 0.567922942489671 </data>
                    <data bit_width="128"> 2.27824327864092 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 0.00880784805125569 </data>
                    <data bit_width="4"> 0.0291191663810666 </data>
                    <data bit_width="8"> 0.0503401820224291 </data>
                    <data bit_width="16"> 0.0939722175415548 </data>
                    <data bit_width="32"> 0.181925172074028 </data>
                    <data bit_width="128"> 0.762279142390663 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8">
                <max>
                  <data bit_width="1"> 0.0134841677614668 </data>
                  <data bit_width="4"> 0.0694675613088098 </data>
                  <data bit_width="8"> 0.204850339864054 </data>
                  <data bit_width="16"> 0.361271274585404 </data>
                  <data bit_width="32"> 0.643571452133432 </data>
                  <data bit_width="128"> 2.39119289046286 </data>
                </max>
                <min>
                  <data bit_width="1"> 0.00744771591363455 </data>
                  <data bit_width="4"> 0.0275489092458255 </data>
                  <data bit_width="8"> 0.0507780359284857 </data>
                  <data bit_width="16"> 0.0963182260429162 </data>
                  <data bit_width="32"> 0.186192322356772 </data>
                  <data bit_width="128"> 0.806253600702576 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 0.00744771591363455 </data>
                    <data bit_width="4"> 0.0275489092458255 </data>
                    <data bit_width="8"> 0.0507780359284857 </data>
                    <data bit_width="16"> 0.0963182260429162 </data>
                    <data bit_width="32"> 0.186192322356772 </data>
                    <data bit_width="128"> 0.806253600702576 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 0.0134841677614668 </data>
                    <data bit_width="4"> 0.0694675613088098 </data>
                    <data bit_width="8"> 0.204850339864054 </data>
                    <data bit_width="16"> 0.361271274585404 </data>
                    <data bit_width="32"> 0.643571452133432 </data>
                    <data bit_width="128"> 2.39119289046286 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 0.00828071604691457 </data>
                    <data bit_width="4"> 0.0339395913063346 </data>
                    <data bit_width="8"> 0.0595133991641439 </data>
                    <data bit_width="16"> 0.111494011443042 </data>
                    <data bit_width="32"> 0.216169722825156 </data>
                    <data bit_width="128"> 0.966387649702024 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="9">
                <max>
                  <data bit_width="1"> 0.022921412625426 </data>
                  <data bit_width="4"> 0.069756693989071 </data>
                  <data bit_width="8"> 0.224748386597742 </data>
                  <data bit_width="16"> 0.451356148492984 </data>
                  <data bit_width="32"> 0.98240012495002 </data>
                  <data bit_width="128"> 3.49141221487595 </data>
                </max>
                <min>
                  <data bit_width="1"> 0.011222706393633 </data>
                  <data bit_width="4"> 0.0339423621027779 </data>
                  <data bit_width="8"> 0.0580044908227185 </data>
                  <data bit_width="16"> 0.107021240551398 </data>
                  <data bit_width="32"> 0.204961321423811 </data>
                  <data bit_width="128"> 0.873362754898041 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 0.011222706393633 </data>
                    <data bit_width="4"> 0.0339423621027779 </data>
                    <data bit_width="8"> 0.0580044908227185 </data>
                    <data bit_width="16"> 0.107021240551398 </data>
                    <data bit_width="32"> 0.204961321423811 </data>
                    <data bit_width="128"> 0.873362754898041 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 0.022921412625426 </data>
                    <data bit_width="4"> 0.069756693989071 </data>
                    <data bit_width="8"> 0.224748386597742 </data>
                    <data bit_width="16"> 0.451356148492984 </data>
                    <data bit_width="32"> 0.98240012495002 </data>
                    <data bit_width="128"> 3.49141221487595 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 0.0128887066601931 </data>
                    <data bit_width="4"> 0.0441670705527313 </data>
                    <data bit_width="8"> 0.0758958718893395 </data>
                    <data bit_width="16"> 0.141665600664496 </data>
                    <data bit_width="32"> 0.275279641238743 </data>
                    <data bit_width="128"> 1.20133633665581 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="10">
                <max>
                  <data bit_width="1"> 0.0150567344490775 </data>
                  <data bit_width="4"> 0.132160953475753 </data>
                  <data bit_width="8"> 0.199759835113574 </data>
                  <data bit_width="16"> 0.369204531758725 </data>
                  <data bit_width="32"> 0.733073121227699 </data>
                  <data bit_width="128"> 3.14581431189429 </data>
                </max>
                <min>
                  <data bit_width="1"> 0.0127190366710459 </data>
                  <data bit_width="4"> 0.0360499676319948 </data>
                  <data bit_width="8"> 0.0627133587041374 </data>
                  <data bit_width="16"> 0.117170640791303 </data>
                  <data bit_width="32"> 0.227505302640848 </data>
                  <data bit_width="128"> 0.956961198139792 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 0.0127190366710459 </data>
                    <data bit_width="4"> 0.0360499676319948 </data>
                    <data bit_width="8"> 0.0627133587041374 </data>
                    <data bit_width="16"> 0.117170640791303 </data>
                    <data bit_width="32"> 0.227505302640848 </data>
                    <data bit_width="128"> 0.956961198139792 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 0.0150567344490775 </data>
                    <data bit_width="4"> 0.132160953475753 </data>
                    <data bit_width="8"> 0.199759835113574 </data>
                    <data bit_width="16"> 0.369204531758725 </data>
                    <data bit_width="32"> 0.733073121227699 </data>
                    <data bit_width="128"> 3.14581431189429 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 0.0137900368424059 </data>
                    <data bit_width="4"> 0.048299524951924 </data>
                    <data bit_width="8"> 0.0831571754631481 </data>
                    <data bit_width="16"> 0.153943491412959 </data>
                    <data bit_width="32"> 0.298466486976638 </data>
                    <data bit_width="128"> 1.30122848551056 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="11">
                <max>
                  <data bit_width="1"> 0.0167910650025704 </data>
                  <data bit_width="4"> 0.104121152729384 </data>
                  <data bit_width="8"> 0.226110887311742 </data>
                  <data bit_width="16"> 0.511608100807296 </data>
                  <data bit_width="32"> 1.19673473158356 </data>
                  <data bit_width="128"> 3.64734965394794 </data>
                </max>
                <min>
                  <data bit_width="1"> 0.0140963662154186 </data>
                  <data bit_width="4"> 0.0413728798956608 </data>
                  <data bit_width="8"> 0.0704850607376097 </data>
                  <data bit_width="16"> 0.130018430008949 </data>
                  <data bit_width="32"> 0.249893067296891 </data>
                  <data bit_width="128"> 1.13845551803088 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 0.0140963662154186 </data>
                    <data bit_width="4"> 0.0413728798956608 </data>
                    <data bit_width="8"> 0.0704850607376097 </data>
                    <data bit_width="16"> 0.130018430008949 </data>
                    <data bit_width="32"> 0.249893067296891 </data>
                    <data bit_width="128"> 1.13845551803088 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 0.0167910650025704 </data>
                    <data bit_width="4"> 0.104121152729384 </data>
                    <data bit_width="8"> 0.226110887311742 </data>
                    <data bit_width="16"> 0.511608100807296 </data>
                    <data bit_width="32"> 1.19673473158356 </data>
                    <data bit_width="128"> 3.64734965394794 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 0.0160003674720588 </data>
                    <data bit_width="4"> 0.0512322209211553 </data>
                    <data bit_width="8"> 0.0888026965404315 </data>
                    <data bit_width="16"> 0.164248599607776 </data>
                    <data bit_width="32"> 0.31861787356486 </data>
                    <data bit_width="128"> 1.38679867981379 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="12">
                <max>
                  <data bit_width="1"> 0.0347391191142591 </data>
                  <data bit_width="4"> 0.163167387330782 </data>
                  <data bit_width="8"> 0.305814244302279 </data>
                  <data bit_width="16"> 0.531097317501571 </data>
                  <data bit_width="32"> 1.02585442299271 </data>
                  <data bit_width="128"> 4.25432970407075 </data>
                </max>
                <min>
                  <data bit_width="1"> 0.0154736957597913 </data>
                  <data bit_width="4"> 0.0451990020658403 </data>
                  <data bit_width="8"> 0.0779165045886407 </data>
                  <data bit_width="16"> 0.144779516764723 </data>
                  <data bit_width="32"> 0.278455309066849 </data>
                  <data bit_width="128"> 1.28056036704366 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 0.0154736957597913 </data>
                    <data bit_width="4"> 0.0451990020658403 </data>
                    <data bit_width="8"> 0.0779165045886407 </data>
                    <data bit_width="16"> 0.144779516764723 </data>
                    <data bit_width="32"> 0.278455309066849 </data>
                    <data bit_width="128"> 1.28056036704366 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 0.0347391191142591 </data>
                    <data bit_width="4"> 0.163167387330782 </data>
                    <data bit_width="8"> 0.305814244302279 </data>
                    <data bit_width="16"> 0.531097317501571 </data>
                    <data bit_width="32"> 1.02585442299271 </data>
                    <data bit_width="128"> 4.25432970407075 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 0.0167826959692314 </data>
                    <data bit_width="4"> 0.0597932388949182 </data>
                    <data bit_width="8"> 0.105838743312199 </data>
                    <data bit_width="16"> 0.199179259724682 </data>
                    <data bit_width="32"> 0.415032380381181 </data>
                    <data bit_width="128"> 1.70324239161478 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="13">
                <max>
                  <data bit_width="1"> 0.0332683531349365 </data>
                  <data bit_width="4"> 0.152793947183032 </data>
                  <data bit_width="8"> 0.300410028131605 </data>
                  <data bit_width="16"> 0.592328231088517 </data>
                  <data bit_width="32"> 1.00331449444032 </data>
                  <data bit_width="128"> 5.0214712291274 </data>
                </max>
                <min>
                  <data bit_width="1"> 0.0164428952228632 </data>
                  <data bit_width="4"> 0.047401424906228 </data>
                  <data bit_width="8"> 0.0832482485577198 </data>
                  <data bit_width="16"> 0.156488888968222 </data>
                  <data bit_width="32"> 0.302588547676168 </data>
                  <data bit_width="128"> 1.40344671274347 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 0.0164428952228632 </data>
                    <data bit_width="4"> 0.047401424906228 </data>
                    <data bit_width="8"> 0.0832482485577198 </data>
                    <data bit_width="16"> 0.156488888968222 </data>
                    <data bit_width="32"> 0.302588547676168 </data>
                    <data bit_width="128"> 1.40344671274347 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 0.0332683531349365 </data>
                    <data bit_width="4"> 0.152793947183032 </data>
                    <data bit_width="8"> 0.300410028131605 </data>
                    <data bit_width="16"> 0.592328231088517 </data>
                    <data bit_width="32"> 1.00331449444032 </data>
                    <data bit_width="128"> 5.0214712291274 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 0.0178708954513433 </data>
                    <data bit_width="4"> 0.0681752953580473 </data>
                    <data bit_width="8"> 0.124014115068258 </data>
                    <data bit_width="16"> 0.237119769235163 </data>
                    <data bit_width="32"> 0.494223348517736 </data>
                    <data bit_width="128"> 2.13481850569296 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="14">
                <max>
                  <data bit_width="1"> 0.0372469478875117 </data>
                  <data bit_width="4"> 0.194554528664725 </data>
                  <data bit_width="8"> 0.305755731992917 </data>
                  <data bit_width="16"> 0.519030668922907 </data>
                  <data bit_width="32"> 1.28346145732183 </data>
                  <data bit_width="128"> 6.19926555044649 </data>
                </max>
                <min>
                  <data bit_width="1"> 0.0174120927819348 </data>
                  <data bit_width="4"> 0.0509560747129719 </data>
                  <data bit_width="8"> 0.0897625480760077 </data>
                  <data bit_width="16"> 0.169109369823499 </data>
                  <data bit_width="32"> 0.327242847384856 </data>
                  <data bit_width="128"> 1.52109961443994 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 0.0174120927819348 </data>
                    <data bit_width="4"> 0.0509560747129719 </data>
                    <data bit_width="8"> 0.0897625480760077 </data>
                    <data bit_width="16"> 0.169109369823499 </data>
                    <data bit_width="32"> 0.327242847384856 </data>
                    <data bit_width="128"> 1.52109961443994 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 0.0372469478875117 </data>
                    <data bit_width="4"> 0.194554528664725 </data>
                    <data bit_width="8"> 0.305755731992917 </data>
                    <data bit_width="16"> 0.519030668922907 </data>
                    <data bit_width="32"> 1.28346145732183 </data>
                    <data bit_width="128"> 6.19926555044649 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 0.0189590930294549 </data>
                    <data bit_width="4"> 0.0587905706764913 </data>
                    <data bit_width="8"> 0.116568711562994 </data>
                    <data bit_width="16"> 0.198552171036347 </data>
                    <data bit_width="32"> 0.464167418508787 </data>
                    <data bit_width="128"> 1.71980803107328 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="15">
                <max>
                  <data bit_width="1"> 0.0463188253270121 </data>
                  <data bit_width="4"> 0.168173290683726 </data>
                  <data bit_width="8"> 0.366074011823842 </data>
                  <data bit_width="16"> 0.633875797776128 </data>
                  <data bit_width="32"> 1.18460068068011 </data>
                  <data bit_width="128"> 5.71200370304259 </data>
                </max>
                <min>
                  <data bit_width="1"> 0.0183812903410065 </data>
                  <data bit_width="4"> 0.057580081062813 </data>
                  <data bit_width="8"> 0.0988353482416557 </data>
                  <data bit_width="16"> 0.183139242636279 </data>
                  <data bit_width="32"> 0.350480796728927 </data>
                  <data bit_width="128"> 1.62666587936254 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 0.0183812903410065 </data>
                    <data bit_width="4"> 0.057580081062813 </data>
                    <data bit_width="8"> 0.0988353482416557 </data>
                    <data bit_width="16"> 0.183139242636279 </data>
                    <data bit_width="32"> 0.350480796728927 </data>
                    <data bit_width="128"> 1.62666587936254 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 0.0463188253270121 </data>
                    <data bit_width="4"> 0.168173290683726 </data>
                    <data bit_width="8"> 0.366074011823842 </data>
                    <data bit_width="16"> 0.633875797776128 </data>
                    <data bit_width="32"> 1.18460068068011 </data>
                    <data bit_width="128"> 5.71200370304259 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 0.0200472906075665 </data>
                    <data bit_width="4"> 0.0667398504883761 </data>
                    <data bit_width="8"> 0.116866676424668 </data>
                    <data bit_width="16"> 0.218667328782773 </data>
                    <data bit_width="32"> 0.458019219693075 </data>
                    <data bit_width="128"> 1.98225629771901 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16">
                <max>
                  <data bit_width="1"> 0.0410902693684431 </data>
                  <data bit_width="4"> 0.167271028731365 </data>
                  <data bit_width="8"> 0.315422595247615 </data>
                  <data bit_width="16"> 0.684424484015917 </data>
                  <data bit_width="32"> 1.84557582752613 </data>
                  <data bit_width="128"> 5.98953870832619 </data>
                </max>
                <min>
                  <data bit_width="1"> 0.0185002903600465 </data>
                  <data bit_width="4"> 0.0608962695874031 </data>
                  <data bit_width="8"> 0.10470212748234 </data>
                  <data bit_width="16"> 0.194022616429619 </data>
                  <data bit_width="32"> 0.371278316292531 </data>
                  <data bit_width="128"> 1.72385984225357 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 0.0185002903600465 </data>
                    <data bit_width="4"> 0.0608962695874031 </data>
                    <data bit_width="8"> 0.10470212748234 </data>
                    <data bit_width="16"> 0.194022616429619 </data>
                    <data bit_width="32"> 0.371278316292531 </data>
                    <data bit_width="128"> 1.72385984225357 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 0.0410902693684431 </data>
                    <data bit_width="4"> 0.167271028731365 </data>
                    <data bit_width="8"> 0.315422595247615 </data>
                    <data bit_width="16"> 0.684424484015917 </data>
                    <data bit_width="32"> 1.84557582752613 </data>
                    <data bit_width="128"> 5.98953870832619 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 0.0199282905885265 </data>
                    <data bit_width="4"> 0.0717048399687744 </data>
                    <data bit_width="8"> 0.125946456417433 </data>
                    <data bit_width="16"> 0.23609568910531 </data>
                    <data bit_width="32"> 0.494988888254222 </data>
                    <data bit_width="128"> 2.14067530535405 </data>
                  </priority>
                </typ>
              </parameters>
            </est_index>

            <est_index name="aspect_ratio">
              <!-- Dummy yet -->
            </est_index>

            <est_index name="height">
              <!-- Dummy yet -->
            </est_index>

            <est_index name="width">
              <!-- Dummy yet -->
            </est_index>
          </est_type>

          <est_type name="timing">
            <est_index name="delay">
              <unit> ns </unit>

              <parameters name="2">
                <max>
                  <data bit_width="1"> 0.46 </data>
                  <data bit_width="4"> 0.46 </data>
                  <data bit_width="8"> 0.46 </data>
                  <data bit_width="16"> 0.46 </data>
                  <data bit_width="32"> 0.46 </data>
                  <data bit_width="128"> 0.46 </data>
                </max>
                <min>
                  <data bit_width="1"> 0.33 </data>
                  <data bit_width="4"> 0.33 </data>
                  <data bit_width="8"> 0.33 </data>
                  <data bit_width="16"> 0.33 </data>
                  <data bit_width="32"> 0.33 </data>
                  <data bit_width="128"> 0.33 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 0.33 </data>
                    <data bit_width="4"> 0.33 </data>
                    <data bit_width="8"> 0.33 </data>
                    <data bit_width="16"> 0.33 </data>
                    <data bit_width="32"> 0.33 </data>
                    <data bit_width="128"> 0.33 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 0.38 </data>
                    <data bit_width="4"> 0.38 </data>
                    <data bit_width="8"> 0.38 </data>
                    <data bit_width="16"> 0.38 </data>
                    <data bit_width="32"> 0.43 </data>
                    <data bit_width="128"> 0.43 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 0.46 </data>
                    <data bit_width="4"> 0.46 </data>
                    <data bit_width="8"> 0.46 </data>
                    <data bit_width="16"> 0.46 </data>
                    <data bit_width="32"> 0.46 </data>
                    <data bit_width="128"> 0.46 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="3">
                <max>
                  <data bit_width="1"> 0.86 </data>
                  <data bit_width="4"> 0.98 </data>
                  <data bit_width="8"> 1.14 </data>
                  <data bit_width="16"> 1.35 </data>
                  <data bit_width="32"> 1.97 </data>
                  <data bit_width="128"> 3.09 </data>
                </max>
                <min>
                  <data bit_width="1"> 0.69 </data>
                  <data bit_width="4"> 0.47 </data>
                  <data bit_width="8"> 0.47 </data>
                  <data bit_width="16"> 0.72 </data>
                  <data bit_width="32"> 0.47 </data>
                  <data bit_width="128"> 0.70 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 0.69 </data>
                    <data bit_width="4"> 0.89 </data>
                    <data bit_width="8"> 1.01 </data>
                    <data bit_width="16"> 1.18 </data>
                    <data bit_width="32"> 1.30 </data>
                    <data bit_width="128"> 3.09 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 0.79 </data>
                    <data bit_width="4"> 0.47 </data>
                    <data bit_width="8"> 0.47 </data>
                    <data bit_width="16"> 0.72 </data>
                    <data bit_width="32"> 0.47 </data>
                    <data bit_width="128"> 0.70 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 0.86 </data>
                    <data bit_width="4"> 0.98 </data>
                    <data bit_width="8"> 1.14 </data>
                    <data bit_width="16"> 1.35 </data>
                    <data bit_width="32"> 1.97 </data>
                    <data bit_width="128"> 3.00 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4">
                <max>
                  <data bit_width="1"> 0.74 </data>
                  <data bit_width="4"> 0.73 </data>
                  <data bit_width="8"> 0.77 </data>
                  <data bit_width="16"> 0.74 </data>
                  <data bit_width="32"> 0.74 </data>
                  <data bit_width="128"> 6.24 </data>
                </max>
                <min>
                  <data bit_width="1"> 0.64 </data>
                  <data bit_width="4"> 0.64 </data>
                  <data bit_width="8"> 0.64 </data>
                  <data bit_width="16"> 0.64 </data>
                  <data bit_width="32"> 0.64 </data>
                  <data bit_width="128"> 0.64 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 0.64 </data>
                    <data bit_width="4"> 0.64 </data>
                    <data bit_width="8"> 0.64 </data>
                    <data bit_width="16"> 0.64 </data>
                    <data bit_width="32"> 0.64 </data>
                    <data bit_width="128"> 6.24 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 0.74 </data>
                    <data bit_width="4"> 0.73 </data>
                    <data bit_width="8"> 0.77 </data>
                    <data bit_width="16"> 0.74 </data>
                    <data bit_width="32"> 0.74 </data>
                    <data bit_width="128"> 0.74 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 0.64 </data>
                    <data bit_width="4"> 0.64 </data>
                    <data bit_width="8"> 0.64 </data>
                    <data bit_width="16"> 0.64 </data>
                    <data bit_width="32"> 0.64 </data>
                    <data bit_width="128"> 0.64 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="5">
                <max>
                  <data bit_width="1"> 1.72 </data>
                  <data bit_width="4"> 2.11 </data>
                  <data bit_width="8"> 2.41 </data>
                  <data bit_width="16"> 2.61 </data>
                  <data bit_width="32"> 3.79 </data>
                  <data bit_width="128"> 6.76 </data>
                </max>
                <min>
                  <data bit_width="1"> 1.42 </data>
                  <data bit_width="4"> 1.09 </data>
                  <data bit_width="8"> 1.00 </data>
                  <data bit_width="16"> 1.15 </data>
                  <data bit_width="32"> 1.28 </data>
                  <data bit_width="128"> 1.42 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 1.42 </data>
                    <data bit_width="4"> 2.02 </data>
                    <data bit_width="8"> 2.41 </data>
                    <data bit_width="16"> 2.49 </data>
                    <data bit_width="32"> 3.18 </data>
                    <data bit_width="128"> 6.76 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 1.52 </data>
                    <data bit_width="4"> 1.09 </data>
                    <data bit_width="8"> 1.00 </data>
                    <data bit_width="16"> 1.15 </data>
                    <data bit_width="32"> 1.28 </data>
                    <data bit_width="128"> 1.42 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 1.72 </data>
                    <data bit_width="4"> 2.11 </data>
                    <data bit_width="8"> 2.38 </data>
                    <data bit_width="16"> 2.61 </data>
                    <data bit_width="32"> 3.79 </data>
                    <data bit_width="128"> 5.90 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="6">
                <max>
                  <data bit_width="1"> 2.37 </data>
                  <data bit_width="4"> 2.26 </data>
                  <data bit_width="8"> 2.48 </data>
                  <data bit_width="16"> 2.82 </data>
                  <data bit_width="32"> 3.58 </data>
                  <data bit_width="128"> 4.21 </data>
                </max>
                <min>
                  <data bit_width="1"> 2.01 </data>
                  <data bit_width="4"> 1.11 </data>
                  <data bit_width="8"> 1.25 </data>
                  <data bit_width="16"> 1.35 </data>
                  <data bit_width="32"> 1.48 </data>
                  <data bit_width="128"> 1.40 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 2.01 </data>
                    <data bit_width="4"> 1.60 </data>
                    <data bit_width="8"> 1.73 </data>
                    <data bit_width="16"> 1.82 </data>
                    <data bit_width="32"> 1.95 </data>
                    <data bit_width="128"> 3.55 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 2.06 </data>
                    <data bit_width="4"> 1.11 </data>
                    <data bit_width="8"> 1.25 </data>
                    <data bit_width="16"> 1.35 </data>
                    <data bit_width="32"> 1.48 </data>
                    <data bit_width="128"> 1.40 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 2.37 </data>
                    <data bit_width="4"> 2.26 </data>
                    <data bit_width="8"> 2.48 </data>
                    <data bit_width="16"> 2.82 </data>
                    <data bit_width="32"> 3.58 </data>
                    <data bit_width="128"> 4.21 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="7">
                <max>
                  <data bit_width="1"> 2.62 </data>
                  <data bit_width="4"> 1.94 </data>
                  <data bit_width="8"> 2.25 </data>
                  <data bit_width="16"> 2.37 </data>
                  <data bit_width="32"> 2.77 </data>
                  <data bit_width="128"> 4.35 </data>
                </max>
                <min>
                  <data bit_width="1"> 1.43 </data>
                  <data bit_width="4"> 1.36 </data>
                  <data bit_width="8"> 1.46 </data>
                  <data bit_width="16"> 1.40 </data>
                  <data bit_width="32"> 1.45 </data>
                  <data bit_width="128"> 1.54 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 2.15 </data>
                    <data bit_width="4"> 1.94 </data>
                    <data bit_width="8"> 2.21 </data>
                    <data bit_width="16"> 2.37 </data>
                    <data bit_width="32"> 2.30 </data>
                    <data bit_width="128"> 4.35 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 1.43 </data>
                    <data bit_width="4"> 1.36 </data>
                    <data bit_width="8"> 1.46 </data>
                    <data bit_width="16"> 1.40 </data>
                    <data bit_width="32"> 1.45 </data>
                    <data bit_width="128"> 1.54 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 2.62 </data>
                    <data bit_width="4"> 1.94 </data>
                    <data bit_width="8"> 2.25 </data>
                    <data bit_width="16"> 2.30 </data>
                    <data bit_width="32"> 2.77 </data>
                    <data bit_width="128"> 4.24 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8">
                <max>
                  <data bit_width="1"> 2.39 </data>
                  <data bit_width="4"> 2.07 </data>
                  <data bit_width="8"> 2.23 </data>
                  <data bit_width="16"> 2.27 </data>
                  <data bit_width="32"> 3.07 </data>
                  <data bit_width="128"> 4.11 </data>
                </max>
                <min>
                  <data bit_width="1"> 1.94 </data>
                  <data bit_width="4"> 1.40 </data>
                  <data bit_width="8"> 1.31 </data>
                  <data bit_width="16"> 1.27 </data>
                  <data bit_width="32"> 1.40 </data>
                  <data bit_width="128"> 1.51 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 2.09 </data>
                    <data bit_width="4"> 1.81 </data>
                    <data bit_width="8"> 1.55 </data>
                    <data bit_width="16"> 1.88 </data>
                    <data bit_width="32"> 2.07 </data>
                    <data bit_width="128"> 3.98 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 1.94 </data>
                    <data bit_width="4"> 1.40 </data>
                    <data bit_width="8"> 1.31 </data>
                    <data bit_width="16"> 1.27 </data>
                    <data bit_width="32"> 1.40 </data>
                    <data bit_width="128"> 1.51 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 2.39 </data>
                    <data bit_width="4"> 2.07 </data>
                    <data bit_width="8"> 2.23 </data>
                    <data bit_width="16"> 2.27 </data>
                    <data bit_width="32"> 3.07 </data>
                    <data bit_width="128"> 4.11 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="9">
                <max>
                  <data bit_width="1"> 3.48 </data>
                  <data bit_width="4"> 3.11 </data>
                  <data bit_width="8"> 3.31 </data>
                  <data bit_width="16"> 3.60 </data>
                  <data bit_width="32"> 4.63 </data>
                  <data bit_width="128"> 5.61 </data>
                </max>
                <min>
                  <data bit_width="1"> 2.11 </data>
                  <data bit_width="4"> 1.50 </data>
                  <data bit_width="8"> 1.44 </data>
                  <data bit_width="16"> 1.46 </data>
                  <data bit_width="32"> 1.57 </data>
                  <data bit_width="128"> 1.86 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 2.89 </data>
                    <data bit_width="4"> 2.49 </data>
                    <data bit_width="8"> 2.61 </data>
                    <data bit_width="16"> 2.94 </data>
                    <data bit_width="32"> 3.13 </data>
                    <data bit_width="128"> 4.90 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 2.11 </data>
                    <data bit_width="4"> 1.50 </data>
                    <data bit_width="8"> 1.44 </data>
                    <data bit_width="16"> 1.46 </data>
                    <data bit_width="32"> 1.57 </data>
                    <data bit_width="128"> 1.86 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 3.48 </data>
                    <data bit_width="4"> 3.11 </data>
                    <data bit_width="8"> 3.31 </data>
                    <data bit_width="16"> 3.60 </data>
                    <data bit_width="32"> 4.63 </data>
                    <data bit_width="128"> 5.61 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="10">
                <max>
                  <data bit_width="1"> 4.55 </data>
                  <data bit_width="4"> 2.73 </data>
                  <data bit_width="8"> 3.12 </data>
                  <data bit_width="16"> 3.33 </data>
                  <data bit_width="32"> 4.94 </data>
                  <data bit_width="128"> 5.58 </data>
                </max>
                <min>
                  <data bit_width="1"> 3.67 </data>
                  <data bit_width="4"> 1.42 </data>
                  <data bit_width="8"> 1.12 </data>
                  <data bit_width="16"> 1.32 </data>
                  <data bit_width="32"> 1.35 </data>
                  <data bit_width="128"> 1.43 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 3.90 </data>
                    <data bit_width="4"> 2.20 </data>
                    <data bit_width="8"> 2.34 </data>
                    <data bit_width="16"> 2.43 </data>
                    <data bit_width="32"> 2.71 </data>
                    <data bit_width="128"> 4.53 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 3.67 </data>
                    <data bit_width="4"> 1.42 </data>
                    <data bit_width="8"> 1.12 </data>
                    <data bit_width="16"> 1.32 </data>
                    <data bit_width="32"> 1.35 </data>
                    <data bit_width="128"> 1.43 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 4.55 </data>
                    <data bit_width="4"> 2.73 </data>
                    <data bit_width="8"> 3.12 </data>
                    <data bit_width="16"> 3.33 </data>
                    <data bit_width="32"> 4.94 </data>
                    <data bit_width="128"> 5.58 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="11">
                <max>
                  <data bit_width="1"> 4.69 </data>
                  <data bit_width="4"> 3.32 </data>
                  <data bit_width="8"> 3.72 </data>
                  <data bit_width="16"> 4.05 </data>
                  <data bit_width="32"> 4.34 </data>
                  <data bit_width="128"> 8.02 </data>
                </max>
                <min>
                  <data bit_width="1"> 3.89 </data>
                  <data bit_width="4"> 1.29 </data>
                  <data bit_width="8"> 1.61 </data>
                  <data bit_width="16"> 1.47 </data>
                  <data bit_width="32"> 1.43 </data>
                  <data bit_width="128"> 1.60 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 3.97 </data>
                    <data bit_width="4"> 2.45 </data>
                    <data bit_width="8"> 2.85 </data>
                    <data bit_width="16"> 2.96 </data>
                    <data bit_width="32"> 3.64 </data>
                    <data bit_width="128"> 8.02 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 3.89 </data>
                    <data bit_width="4"> 1.29 </data>
                    <data bit_width="8"> 1.61 </data>
                    <data bit_width="16"> 1.47 </data>
                    <data bit_width="32"> 1.43 </data>
                    <data bit_width="128"> 1.60 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 4.69 </data>
                    <data bit_width="4"> 3.32 </data>
                    <data bit_width="8"> 3.72 </data>
                    <data bit_width="16"> 4.05 </data>
                    <data bit_width="32"> 4.34 </data>
                    <data bit_width="128"> 6.21 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="12">
                <max>
                  <data bit_width="1"> 4.99 </data>
                  <data bit_width="4"> 3.19 </data>
                  <data bit_width="8"> 3.58 </data>
                  <data bit_width="16"> 3.72 </data>
                  <data bit_width="32"> 5.21 </data>
                  <data bit_width="128"> 8.28 </data>
                </max>
                <min>
                  <data bit_width="1"> 2.75 </data>
                  <data bit_width="4"> 1.58 </data>
                  <data bit_width="8"> 1.42 </data>
                  <data bit_width="16"> 1.61 </data>
                  <data bit_width="32"> 1.61 </data>
                  <data bit_width="128"> 2.48 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 4.21 </data>
                    <data bit_width="4"> 2.65 </data>
                    <data bit_width="8"> 3.03 </data>
                    <data bit_width="16"> 3.15 </data>
                    <data bit_width="32"> 3.69 </data>
                    <data bit_width="128"> 8.28 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 2.75 </data>
                    <data bit_width="4"> 1.58 </data>
                    <data bit_width="8"> 1.42 </data>
                    <data bit_width="16"> 1.61 </data>
                    <data bit_width="32"> 1.61 </data>
                    <data bit_width="128"> 2.48 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 4.99 </data>
                    <data bit_width="4"> 3.19 </data>
                    <data bit_width="8"> 3.58 </data>
                    <data bit_width="16"> 3.72 </data>
                    <data bit_width="32"> 5.21 </data>
                    <data bit_width="128"> 6.70 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="13">
                <max>
                  <data bit_width="1"> 5.23 </data>
                  <data bit_width="4"> 2.50 </data>
                  <data bit_width="8"> 2.65 </data>
                  <data bit_width="16"> 2.72 </data>
                  <data bit_width="32"> 3.58 </data>
                  <data bit_width="128"> 5.00 </data>
                </max>
                <min>
                  <data bit_width="1"> 3.03 </data>
                  <data bit_width="4"> 1.47 </data>
                  <data bit_width="8"> 1.53 </data>
                  <data bit_width="16"> 1.43 </data>
                  <data bit_width="32"> 1.96 </data>
                  <data bit_width="128"> 1.85 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 4.35 </data>
                    <data bit_width="4"> 2.11 </data>
                    <data bit_width="8"> 2.37 </data>
                    <data bit_width="16"> 2.45 </data>
                    <data bit_width="32"> 2.67 </data>
                    <data bit_width="128"> 5.00 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 3.03 </data>
                    <data bit_width="4"> 1.47 </data>
                    <data bit_width="8"> 1.53 </data>
                    <data bit_width="16"> 1.43 </data>
                    <data bit_width="32"> 1.96 </data>
                    <data bit_width="128"> 1.85 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 5.23 </data>
                    <data bit_width="4"> 2.50 </data>
                    <data bit_width="8"> 2.65 </data>
                    <data bit_width="16"> 2.72 </data>
                    <data bit_width="32"> 3.58 </data>
                    <data bit_width="128"> 4.70 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="14">
                <max>
                  <data bit_width="1"> 6.11 </data>
                  <data bit_width="4"> 2.24 </data>
                  <data bit_width="8"> 2.40 </data>
                  <data bit_width="16"> 2.39 </data>
                  <data bit_width="32"> 3.33 </data>
                  <data bit_width="128"> 4.83 </data>
                </max>
                <min>
                  <data bit_width="1"> 3.71 </data>
                  <data bit_width="4"> 1.48 </data>
                  <data bit_width="8"> 1.26 </data>
                  <data bit_width="16"> 1.65 </data>
                  <data bit_width="32"> 1.78 </data>
                  <data bit_width="128"> 1.82 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 5.17 </data>
                    <data bit_width="4"> 1.74 </data>
                    <data bit_width="8"> 1.98 </data>
                    <data bit_width="16"> 2.05 </data>
                    <data bit_width="32"> 2.32 </data>
                    <data bit_width="128"> 4.83 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 3.71 </data>
                    <data bit_width="4"> 1.48 </data>
                    <data bit_width="8"> 1.26 </data>
                    <data bit_width="16"> 1.65 </data>
                    <data bit_width="32"> 1.78 </data>
                    <data bit_width="128"> 1.82 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 6.11 </data>
                    <data bit_width="4"> 2.24 </data>
                    <data bit_width="8"> 2.40 </data>
                    <data bit_width="16"> 2.39 </data>
                    <data bit_width="32"> 3.33 </data>
                    <data bit_width="128"> 4.75 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="15">
                <max>
                  <data bit_width="1"> 6.16 </data>
                  <data bit_width="4"> 2.91 </data>
                  <data bit_width="8"> 3.20 </data>
                  <data bit_width="16"> 3.50 </data>
                  <data bit_width="32"> 4.84 </data>
                  <data bit_width="128"> 6.60 </data>
                </max>
                <min>
                  <data bit_width="1"> 3.76 </data>
                  <data bit_width="4"> 1.70 </data>
                  <data bit_width="8"> 1.59 </data>
                  <data bit_width="16"> 1.70 </data>
                  <data bit_width="32"> 1.89 </data>
                  <data bit_width="128"> 1.71 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 5.17 </data>
                    <data bit_width="4"> 2.77 </data>
                    <data bit_width="8"> 3.03 </data>
                    <data bit_width="16"> 3.20 </data>
                    <data bit_width="32"> 3.45 </data>
                    <data bit_width="128"> 6.60 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 3.76 </data>
                    <data bit_width="4"> 1.70 </data>
                    <data bit_width="8"> 1.59 </data>
                    <data bit_width="16"> 1.70 </data>
                    <data bit_width="32"> 1.89 </data>
                    <data bit_width="128"> 1.71 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 6.16 </data>
                    <data bit_width="4"> 2.91 </data>
                    <data bit_width="8"> 3.20 </data>
                    <data bit_width="16"> 3.50 </data>
                    <data bit_width="32"> 4.84 </data>
                    <data bit_width="128"> 6.18 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16">
                <max>
                  <data bit_width="1"> 5.90 </data>
                  <data bit_width="4"> 2.90 </data>
                  <data bit_width="8"> 3.19 </data>
                  <data bit_width="16"> 3.52 </data>
                  <data bit_width="32"> 4.84 </data>
                  <data bit_width="128"> 6.53 </data>
                </max>
                <min>
                  <data bit_width="1"> 2.48 </data>
                  <data bit_width="4"> 1.27 </data>
                  <data bit_width="8"> 1.27 </data>
                  <data bit_width="16"> 1.31 </data>
                  <data bit_width="32"> 1.67 </data>
                  <data bit_width="128"> 1.45 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 5.02 </data>
                    <data bit_width="4"> 2.81 </data>
                    <data bit_width="8"> 3.07 </data>
                    <data bit_width="16"> 3.23 </data>
                    <data bit_width="32"> 3.43 </data>
                    <data bit_width="128"> 6.53 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 2.48 </data>
                    <data bit_width="4"> 1.27 </data>
                    <data bit_width="8"> 1.27 </data>
                    <data bit_width="16"> 1.31 </data>
                    <data bit_width="32"> 1.67 </data>
                    <data bit_width="128"> 1.45 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 5.90 </data>
                    <data bit_width="4"> 2.90 </data>
                    <data bit_width="8"> 3.19 </data>
                    <data bit_width="16"> 3.52 </data>
                    <data bit_width="32"> 4.84 </data>
                    <data bit_width="128"> 6.20 </data>
                  </priority>
                </typ>
              </parameters>
            </est_index>

            <est_index name="delay_fullpath">
              <unit> ns </unit>

              <parameters name="2">
                <max>
                  <data bit_width="1">
                  </data>
                  <data bit_width="4">
                    path	 data_in0	 data_out	 0.24
                    path	 data_in1	 data_out	 0.24
                  </data>
                  <data bit_width="8">
                    path	 data_in0	 data_out	 0.24
                    path	 data_in1	 data_out	 0.24
                  </data>
                  <data bit_width="16">
                    path	 data_in0	 data_out	 0.24
                    path	 data_in1	 data_out	 0.24
                  </data>
                  <data bit_width="32">
                    path	 data_in0	 data_out	 0.24
                    path	 data_in1	 data_out	 0.24
                  </data>
                </max>
                <min>
                  <data bit_width="1">
                  </data>
                  <data bit_width="4">
                    path	 data_in0	 data_out	 0.24
                    path	 data_in1	 data_out	 0.24
                  </data>
                  <data bit_width="8">
                    path	 data_in0	 data_out	 0.24
                    path	 data_in1	 data_out	 0.24
                  </data>
                  <data bit_width="16">
                    path	 data_in0	 data_out	 0.24
                    path	 data_in1	 data_out	 0.24
                  </data>
                  <data bit_width="32">
                    path	 data_in0	 data_out	 0.24
                    path	 data_in1	 data_out	 0.24
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1">
                    </data>
                    <data bit_width="4">
                      path	 data_in0	 data_out	 0.22
                      path	 data_in1	 data_out	 0.22
                    </data>
                    <data bit_width="8">
                      path	 data_in0	 data_out	 0.22
                      path	 data_in1	 data_out	 0.22
                    </data>
                    <data bit_width="16">
                      path	 data_in0	 data_out	 0.22
                      path	 data_in1	 data_out	 0.22
                    </data>
                    <data bit_width="32">
                      path	 data_in0	 data_out	 0.22
                      path	 data_in1	 data_out	 0.22
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1">
                    </data>
                    <data bit_width="4">
                      path	 data_in0	 data_out	 0.32
                      path	 data_in1	 data_out	 0.32
                    </data>
                    <data bit_width="8">
                      path	 data_in0	 data_out	 0.32
                      path	 data_in1	 data_out	 0.32
                    </data>
                    <data bit_width="16">
                      path	 data_in0	 data_out	 0.32
                      path	 data_in1	 data_out	 0.32
                    </data>
                    <data bit_width="32">
                      path	 data_in0	 data_out	 0.32
                      path	 data_in1	 data_out	 0.32
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1">
                    </data>
                    <data bit_width="4">
                      path	 data_in0	 data_out	 0.24
                      path	 data_in1	 data_out	 0.24
                    </data>
                    <data bit_width="8">
                      path	 data_in0	 data_out	 0.24
                      path	 data_in1	 data_out	 0.24
                    </data>
                    <data bit_width="16">
                      path	 data_in0	 data_out	 0.24
                      path	 data_in1	 data_out	 0.24
                    </data>
                    <data bit_width="32">
                      path	 data_in0	 data_out	 0.24
                      path	 data_in1	 data_out	 0.24
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="3">
                <max>
                  <data bit_width="1">
                  </data>
                  <data bit_width="4">
                    path	 data_in0	 data_out	 0.47
                    path	 data_in1	 data_out	 0.25
                    path	 data_in2	 data_out	 0.36
                    path	 sel	 data_out	 0.73
                  </data>
                  <data bit_width="8">
                    path	 data_in0	 data_out	 0.25
                    path	 data_in1	 data_out	 0.40
                    path	 data_in2	 data_out	 0.47
                    path	 sel	 data_out	 1.57
                  </data>
                  <data bit_width="16">
                    path	 data_in0	 data_out	 0.47
                    path	 data_in1	 data_out	 0.25
                    path	 data_in2	 data_out	 0.36
                    path	 sel	 data_out	 1.27
                  </data>
                  <data bit_width="32">
                    path	 data_in0	 data_out	 0.47
                    path	 data_in1	 data_out	 0.21
                    path	 data_in2	 data_out	 0.36
                    path	 sel	 data_out	 1.49
                  </data>
                </max>
                <min>
                  <data bit_width="1">
                  </data>
                  <data bit_width="4">
                    path	 data_in0	 data_out	 0.47
                    path	 data_in1	 data_out	 0.25
                    path	 data_in2	 data_out	 0.36
                    path	 sel	 data_out	 0.73
                  </data>
                  <data bit_width="8">
                    path	 data_in0	 data_out	 0.25
                    path	 data_in1	 data_out	 0.40
                    path	 data_in2	 data_out	 0.47
                    path	 sel	 data_out	 1.57
                  </data>
                  <data bit_width="16">
                    path	 data_in0	 data_out	 0.47
                    path	 data_in1	 data_out	 0.25
                    path	 data_in2	 data_out	 0.36
                    path	 sel	 data_out	 1.27
                  </data>
                  <data bit_width="32">
                    path	 data_in0	 data_out	 0.47
                    path	 data_in1	 data_out	 0.21
                    path	 data_in2	 data_out	 0.36
                    path	 sel	 data_out	 1.49
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1">
                    </data>
                    <data bit_width="4">
                      path	 data_in0	 data_out	 0.47
                      path	 data_in1	 data_out	 0.25
                      path	 data_in2	 data_out	 0.36
                      path	 sel	 data_out	 0.87
                    </data>
                    <data bit_width="8">
                      path	 data_in0	 data_out	 0.47
                      path	 data_in1	 data_out	 0.25
                      path	 data_in2	 data_out	 0.36
                      path	 sel	 data_out	 1.19
                    </data>
                    <data bit_width="16">
                      path	 data_in0	 data_out	 0.47
                      path	 data_in1	 data_out	 0.25
                      path	 data_in2	 data_out	 0.36
                      path	 sel	 data_out	 1.44
                    </data>
                    <data bit_width="32">
                      path	 data_in0	 data_out	 0.47
                      path	 data_in1	 data_out	 0.25
                      path	 data_in2	 data_out	 0.36
                      path	 sel	 data_out	 1.38
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1">
                    </data>
                    <data bit_width="4">
                      path	 data_in0	 data_out	 0.39
                      path	 data_in1	 data_out	 0.40
                      path	 data_in2	 data_out	 0.39
                      path	 sel	 data_out	 0.39
                    </data>
                    <data bit_width="8">
                      path	 data_in0	 data_out	 0.42
                      path	 data_in1	 data_out	 0.37
                      path	 data_in2	 data_out	 0.41
                      path	 sel	 data_out	 0.42
                    </data>
                    <data bit_width="16">
                      path	 data_in0	 data_out	 0.39
                      path	 data_in1	 data_out	 0.40
                      path	 data_in2	 data_out	 0.39
                      path	 sel	 data_out	 0.40
                    </data>
                    <data bit_width="32">
                      path	 data_in0	 data_out	 0.46
                      path	 data_in1	 data_out	 0.47
                      path	 data_in2	 data_out	 0.42
                      path	 sel	 data_out	 0.48
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1">
                    </data>
                    <data bit_width="4">
                      path	 data_in0	 data_out	 0.47
                      path	 data_in1	 data_out	 0.25
                      path	 data_in2	 data_out	 0.36
                      path	 sel	 data_out	 0.73
                    </data>
                    <data bit_width="8">
                      path	 data_in0	 data_out	 0.25
                      path	 data_in1	 data_out	 0.40
                      path	 data_in2	 data_out	 0.47
                      path	 sel	 data_out	 1.57
                    </data>
                    <data bit_width="16">
                      path	 data_in0	 data_out	 0.47
                      path	 data_in1	 data_out	 0.25
                      path	 data_in2	 data_out	 0.36
                      path	 sel	 data_out	 1.27
                    </data>
                    <data bit_width="32">
                      path	 data_in0	 data_out	 0.47
                      path	 data_in1	 data_out	 0.21
                      path	 data_in2	 data_out	 0.36
                      path	 sel	 data_out	 1.49
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4">
                <max>
                  <data bit_width="1">
                  </data>
                  <data bit_width="4">
                    path	 data_in0	 data_out	 0.26
                    path	 data_in1	 data_out	 0.30
                    path	 data_in2	 data_out	 0.30
                    path	 data_in3	 data_out	 0.26
                    path	 sel	 data_out	 1.25
                  </data>
                  <data bit_width="8">
                    path	 data_in0	 data_out	 0.26
                    path	 data_in1	 data_out	 0.30
                    path	 data_in2	 data_out	 0.22
                    path	 data_in3	 data_out	 0.35
                    path	 sel	 data_out	 2.18
                  </data>
                  <data bit_width="16">
                    path	 data_in0	 data_out	 0.26
                    path	 data_in1	 data_out	 0.30
                    path	 data_in2	 data_out	 0.22
                    path	 data_in3	 data_out	 0.35
                    path	 sel	 data_out	 2.10
                  </data>
                  <data bit_width="32">
                    path	 data_in0	 data_out	 0.21
                    path	 data_in1	 data_out	 0.35
                    path	 data_in2	 data_out	 0.22
                    path	 data_in3	 data_out	 0.32
                    path	 sel	 data_out	 3.09
                  </data>
                </max>
                <min>
                  <data bit_width="1">
                  </data>
                  <data bit_width="4">
                    path	 data_in0	 data_out	 0.26
                    path	 data_in1	 data_out	 0.30
                    path	 data_in2	 data_out	 0.30
                    path	 data_in3	 data_out	 0.26
                    path	 sel	 data_out	 1.25
                  </data>
                  <data bit_width="8">
                    path	 data_in0	 data_out	 0.26
                    path	 data_in1	 data_out	 0.30
                    path	 data_in2	 data_out	 0.22
                    path	 data_in3	 data_out	 0.35
                    path	 sel	 data_out	 2.18
                  </data>
                  <data bit_width="16">
                    path	 data_in0	 data_out	 0.26
                    path	 data_in1	 data_out	 0.30
                    path	 data_in2	 data_out	 0.22
                    path	 data_in3	 data_out	 0.35
                    path	 sel	 data_out	 2.10
                  </data>
                  <data bit_width="32">
                    path	 data_in0	 data_out	 0.21
                    path	 data_in1	 data_out	 0.35
                    path	 data_in2	 data_out	 0.22
                    path	 data_in3	 data_out	 0.32
                    path	 sel	 data_out	 3.09
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1">
                    </data>
                    <data bit_width="4">
                      path	 data_in0	 data_out	 0.23
                      path	 data_in1	 data_out	 0.28
                      path	 data_in2	 data_out	 0.27
                      path	 data_in3	 data_out	 0.23
                      path	 sel	 data_out	 1.23
                    </data>
                    <data bit_width="8">
                      path	 data_in0	 data_out	 0.23
                      path	 data_in1	 data_out	 0.27
                      path	 data_in2	 data_out	 0.19
                      path	 data_in3	 data_out	 0.32
                      path	 sel	 data_out	 1.81
                    </data>
                    <data bit_width="16">
                      path	 data_in0	 data_out	 0.23
                      path	 data_in1	 data_out	 0.27
                      path	 data_in2	 data_out	 0.19
                      path	 data_in3	 data_out	 0.32
                      path	 sel	 data_out	 2.45
                    </data>
                    <data bit_width="32">
                      path	 data_in0	 data_out	 0.23
                      path	 data_in1	 data_out	 0.27
                      path	 data_in2	 data_out	 0.19
                      path	 data_in3	 data_out	 0.32
                      path	 sel	 data_out	 2.15
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1">
                    </data>
                    <data bit_width="4">
                      path	 data_in0	 data_out	 0.33
                      path	 data_in1	 data_out	 0.42
                      path	 data_in2	 data_out	 0.42
                      path	 data_in3	 data_out	 0.43
                      path	 sel	 data_out	 0.42
                    </data>
                    <data bit_width="8">
                      path	 data_in0	 data_out	 0.33
                      path	 data_in1	 data_out	 0.42
                      path	 data_in2	 data_out	 0.42
                      path	 data_in3	 data_out	 0.43
                      path	 sel	 data_out	 0.42
                    </data>
                    <data bit_width="16">
                      path	 data_in0	 data_out	 0.33
                      path	 data_in1	 data_out	 0.42
                      path	 data_in2	 data_out	 0.42
                      path	 data_in3	 data_out	 0.43
                      path	 sel	 data_out	 0.42
                    </data>
                    <data bit_width="32">
                      path	 data_in0	 data_out	 0.50
                      path	 data_in1	 data_out	 0.50
                      path	 data_in2	 data_out	 0.51
                      path	 data_in3	 data_out	 0.49
                      path	 sel	 data_out	 0.51
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1">
                    </data>
                    <data bit_width="4">
                      path	 data_in0	 data_out	 0.26
                      path	 data_in1	 data_out	 0.30
                      path	 data_in2	 data_out	 0.30
                      path	 data_in3	 data_out	 0.26
                      path	 sel	 data_out	 1.25
                    </data>
                    <data bit_width="8">
                      path	 data_in0	 data_out	 0.26
                      path	 data_in1	 data_out	 0.30
                      path	 data_in2	 data_out	 0.22
                      path	 data_in3	 data_out	 0.35
                      path	 sel	 data_out	 2.18
                    </data>
                    <data bit_width="16">
                      path	 data_in0	 data_out	 0.26
                      path	 data_in1	 data_out	 0.30
                      path	 data_in2	 data_out	 0.22
                      path	 data_in3	 data_out	 0.35
                      path	 sel	 data_out	 2.10
                    </data>
                    <data bit_width="32">
                      path	 data_in0	 data_out	 0.21
                      path	 data_in1	 data_out	 0.35
                      path	 data_in2	 data_out	 0.22
                      path	 data_in3	 data_out	 0.32
                      path	 sel	 data_out	 3.09
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="5">
                <max>
                  <data bit_width="1">
                  </data>
                  <data bit_width="4">
                    path	 data_in0	 data_out	 0.48
                    path	 data_in1	 data_out	 0.39
                    path	 data_in2	 data_out	 0.59
                    path	 data_in3	 data_out	 0.65
                    path	 data_in4	 data_out	 0.34
                    path	 sel	 data_out	 1.56
                  </data>
                  <data bit_width="8">
                    path	 data_in0	 data_out	 0.48
                    path	 data_in1	 data_out	 0.59
                    path	 data_in2	 data_out	 0.65
                    path	 data_in3	 data_out	 0.39
                    path	 data_in4	 data_out	 0.34
                    path	 sel	 data_out	 2.18
                  </data>
                  <data bit_width="16">
                    path	 data_in0	 data_out	 0.59
                    path	 data_in1	 data_out	 0.65
                    path	 data_in2	 data_out	 0.48
                    path	 data_in3	 data_out	 0.34
                    path	 data_in4	 data_out	 0.39
                    path	 sel	 data_out	 2.31
                  </data>
                  <data bit_width="32">
                    path	 data_in0	 data_out	 0.48
                    path	 data_in1	 data_out	 0.59
                    path	 data_in2	 data_out	 0.65
                    path	 data_in3	 data_out	 0.34
                    path	 data_in4	 data_out	 0.39
                    path	 sel	 data_out	 2.69
                  </data>
                </max>
                <min>
                  <data bit_width="1">
                  </data>
                  <data bit_width="4">
                    path	 data_in0	 data_out	 0.48
                    path	 data_in1	 data_out	 0.39
                    path	 data_in2	 data_out	 0.59
                    path	 data_in3	 data_out	 0.65
                    path	 data_in4	 data_out	 0.34
                    path	 sel	 data_out	 1.56
                  </data>
                  <data bit_width="8">
                    path	 data_in0	 data_out	 0.48
                    path	 data_in1	 data_out	 0.59
                    path	 data_in2	 data_out	 0.65
                    path	 data_in3	 data_out	 0.39
                    path	 data_in4	 data_out	 0.34
                    path	 sel	 data_out	 2.18
                  </data>
                  <data bit_width="16">
                    path	 data_in0	 data_out	 0.59
                    path	 data_in1	 data_out	 0.65
                    path	 data_in2	 data_out	 0.48
                    path	 data_in3	 data_out	 0.34
                    path	 data_in4	 data_out	 0.39
                    path	 sel	 data_out	 2.31
                  </data>
                  <data bit_width="32">
                    path	 data_in0	 data_out	 0.48
                    path	 data_in1	 data_out	 0.59
                    path	 data_in2	 data_out	 0.65
                    path	 data_in3	 data_out	 0.34
                    path	 data_in4	 data_out	 0.39
                    path	 sel	 data_out	 2.69
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1">
                    </data>
                    <data bit_width="4">
                      path	 data_in0	 data_out	 0.37
                      path	 data_in1	 data_out	 0.20
                      path	 data_in2	 data_out	 0.25
                      path	 data_in3	 data_out	 0.20
                      path	 data_in4	 data_out	 0.33
                      path	 sel	 data_out	 1.52
                    </data>
                    <data bit_width="8">
                      path	 data_in0	 data_out	 0.37
                      path	 data_in1	 data_out	 0.25
                      path	 data_in2	 data_out	 0.20
                      path	 data_in3	 data_out	 0.28
                      path	 data_in4	 data_out	 0.24
                      path	 sel	 data_out	 1.90
                    </data>
                    <data bit_width="16">
                      path	 data_in0	 data_out	 0.37
                      path	 data_in1	 data_out	 0.25
                      path	 data_in2	 data_out	 0.20
                      path	 data_in3	 data_out	 0.28
                      path	 data_in4	 data_out	 0.24
                      path	 sel	 data_out	 2.47
                    </data>
                    <data bit_width="32">
                      path	 data_in0	 data_out	 0.37
                      path	 data_in1	 data_out	 0.25
                      path	 data_in2	 data_out	 0.20
                      path	 data_in3	 data_out	 0.28
                      path	 data_in4	 data_out	 0.24
                      path	 sel	 data_out	 2.65
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1">
                    </data>
                    <data bit_width="4">
                      path	 data_in0	 data_out	 0.39
                      path	 data_in1	 data_out	 0.56
                      path	 data_in2	 data_out	 0.53
                      path	 data_in3	 data_out	 0.56
                      path	 data_in4	 data_out	 0.46
                      path	 sel	 data_out	 0.57
                    </data>
                    <data bit_width="8">
                      path	 data_in0	 data_out	 0.50
                      path	 data_in1	 data_out	 0.49
                      path	 data_in2	 data_out	 0.43
                      path	 data_in3	 data_out	 0.42
                      path	 data_in4	 data_out	 0.43
                      path	 sel	 data_out	 0.50
                    </data>
                    <data bit_width="16">
                      path	 data_in0	 data_out	 0.53
                      path	 data_in1	 data_out	 0.51
                      path	 data_in2	 data_out	 0.45
                      path	 data_in3	 data_out	 0.42
                      path	 data_in4	 data_out	 0.50
                      path	 sel	 data_out	 0.53
                    </data>
                    <data bit_width="32">
                      path	 data_in0	 data_out	 0.58
                      path	 data_in1	 data_out	 0.59
                      path	 data_in2	 data_out	 0.45
                      path	 data_in3	 data_out	 0.39
                      path	 data_in4	 data_out	 0.58
                      path	 sel	 data_out	 0.59
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1">
                    </data>
                    <data bit_width="4">
                      path	 data_in0	 data_out	 0.48
                      path	 data_in1	 data_out	 0.39
                      path	 data_in2	 data_out	 0.59
                      path	 data_in3	 data_out	 0.65
                      path	 data_in4	 data_out	 0.34
                      path	 sel	 data_out	 1.56
                    </data>
                    <data bit_width="8">
                      path	 data_in0	 data_out	 0.48
                      path	 data_in1	 data_out	 0.59
                      path	 data_in2	 data_out	 0.65
                      path	 data_in3	 data_out	 0.39
                      path	 data_in4	 data_out	 0.34
                      path	 sel	 data_out	 2.18
                    </data>
                    <data bit_width="16">
                      path	 data_in0	 data_out	 0.59
                      path	 data_in1	 data_out	 0.65
                      path	 data_in2	 data_out	 0.48
                      path	 data_in3	 data_out	 0.34
                      path	 data_in4	 data_out	 0.39
                      path	 sel	 data_out	 2.31
                    </data>
                    <data bit_width="32">
                      path	 data_in0	 data_out	 0.48
                      path	 data_in1	 data_out	 0.59
                      path	 data_in2	 data_out	 0.65
                      path	 data_in3	 data_out	 0.34
                      path	 data_in4	 data_out	 0.39
                      path	 sel	 data_out	 2.69
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="6">
                <max>
                  <data bit_width="1">
                  </data>
                  <data bit_width="4">
                    path	 data_in0	 data_out	 0.35
                    path	 data_in1	 data_out	 0.70
                    path	 data_in2	 data_out	 0.40
                    path	 data_in3	 data_out	 0.44
                    path	 data_in4	 data_out	 0.63
                    path	 data_in5	 data_out	 0.52
                    path	 sel	 data_out	 1.88
                  </data>
                  <data bit_width="8">
                    path	 data_in0	 data_out	 0.35
                    path	 data_in1	 data_out	 0.40
                    path	 data_in2	 data_out	 0.44
                    path	 data_in3	 data_out	 0.52
                    path	 data_in4	 data_out	 0.63
                    path	 data_in5	 data_out	 0.65
                    path	 sel	 data_out	 2.84
                  </data>
                  <data bit_width="16">
                    path	 data_in0	 data_out	 0.35
                    path	 data_in1	 data_out	 0.40
                    path	 data_in2	 data_out	 0.44
                    path	 data_in3	 data_out	 0.52
                    path	 data_in4	 data_out	 0.70
                    path	 data_in5	 data_out	 0.63
                    path	 sel	 data_out	 2.79
                  </data>
                  <data bit_width="32">
                    path	 data_in0	 data_out	 0.35
                    path	 data_in1	 data_out	 0.40
                    path	 data_in2	 data_out	 0.44
                    path	 data_in3	 data_out	 0.63
                    path	 data_in4	 data_out	 0.70
                    path	 data_in5	 data_out	 0.52
                    path	 sel	 data_out	 3.03
                  </data>
                </max>
                <min>
                  <data bit_width="1">
                  </data>
                  <data bit_width="4">
                    path	 data_in0	 data_out	 0.35
                    path	 data_in1	 data_out	 0.70
                    path	 data_in2	 data_out	 0.40
                    path	 data_in3	 data_out	 0.44
                    path	 data_in4	 data_out	 0.63
                    path	 data_in5	 data_out	 0.52
                    path	 sel	 data_out	 1.88
                  </data>
                  <data bit_width="8">
                    path	 data_in0	 data_out	 0.35
                    path	 data_in1	 data_out	 0.40
                    path	 data_in2	 data_out	 0.44
                    path	 data_in3	 data_out	 0.52
                    path	 data_in4	 data_out	 0.63
                    path	 data_in5	 data_out	 0.65
                    path	 sel	 data_out	 2.84
                  </data>
                  <data bit_width="16">
                    path	 data_in0	 data_out	 0.35
                    path	 data_in1	 data_out	 0.40
                    path	 data_in2	 data_out	 0.44
                    path	 data_in3	 data_out	 0.52
                    path	 data_in4	 data_out	 0.70
                    path	 data_in5	 data_out	 0.63
                    path	 sel	 data_out	 2.79
                  </data>
                  <data bit_width="32">
                    path	 data_in0	 data_out	 0.35
                    path	 data_in1	 data_out	 0.40
                    path	 data_in2	 data_out	 0.44
                    path	 data_in3	 data_out	 0.63
                    path	 data_in4	 data_out	 0.70
                    path	 data_in5	 data_out	 0.52
                    path	 sel	 data_out	 3.03
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1">
                    </data>
                    <data bit_width="4">
                      path	 data_in0	 data_out	 0.22
                      path	 data_in1	 data_out	 0.26
                      path	 data_in2	 data_out	 0.28
                      path	 data_in3	 data_out	 0.20
                      path	 data_in4	 data_out	 0.28
                      path	 data_in5	 data_out	 0.39
                      path	 sel	 data_out	 1.77
                    </data>
                    <data bit_width="8">
                      path	 data_in0	 data_out	 0.22
                      path	 data_in1	 data_out	 0.28
                      path	 data_in2	 data_out	 0.20
                      path	 data_in3	 data_out	 0.28
                      path	 data_in4	 data_out	 0.34
                      path	 data_in5	 data_out	 0.31
                      path	 sel	 data_out	 2.79
                    </data>
                    <data bit_width="16">
                      path	 data_in0	 data_out	 0.22
                      path	 data_in1	 data_out	 0.28
                      path	 data_in2	 data_out	 0.20
                      path	 data_in3	 data_out	 0.28
                      path	 data_in4	 data_out	 0.34
                      path	 data_in5	 data_out	 0.31
                      path	 sel	 data_out	 2.92
                    </data>
                    <data bit_width="32">
                      path	 data_in0	 data_out	 0.22
                      path	 data_in1	 data_out	 0.28
                      path	 data_in2	 data_out	 0.20
                      path	 data_in3	 data_out	 0.28
                      path	 data_in4	 data_out	 0.34
                      path	 data_in5	 data_out	 0.31
                      path	 sel	 data_out	 2.67
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1">
                    </data>
                    <data bit_width="4">
                      path	 data_in0	 data_out	 0.46
                      path	 data_in1	 data_out	 0.54
                      path	 data_in2	 data_out	 0.57
                      path	 data_in3	 data_out	 0.56
                      path	 data_in4	 data_out	 0.48
                      path	 data_in5	 data_out	 0.50
                      path	 sel	 data_out	 0.58
                    </data>
                    <data bit_width="8">
                      path	 data_in0	 data_out	 0.57
                      path	 data_in1	 data_out	 0.50
                      path	 data_in2	 data_out	 0.45
                      path	 data_in3	 data_out	 0.63
                      path	 data_in4	 data_out	 0.48
                      path	 data_in5	 data_out	 0.45
                      path	 sel	 data_out	 0.63
                    </data>
                    <data bit_width="16">
                      path	 data_in0	 data_out	 0.63
                      path	 data_in1	 data_out	 0.63
                      path	 data_in2	 data_out	 0.63
                      path	 data_in3	 data_out	 0.62
                      path	 data_in4	 data_out	 0.63
                      path	 data_in5	 data_out	 0.49
                      path	 sel	 data_out	 0.65
                    </data>
                    <data bit_width="32">
                      path	 data_in0	 data_out	 0.62
                      path	 data_in1	 data_out	 0.64
                      path	 data_in2	 data_out	 0.64
                      path	 data_in3	 data_out	 0.58
                      path	 data_in4	 data_out	 0.64
                      path	 data_in5	 data_out	 0.49
                      path	 sel	 data_out	 0.64
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1">
                    </data>
                    <data bit_width="4">
                      path	 data_in0	 data_out	 0.35
                      path	 data_in1	 data_out	 0.70
                      path	 data_in2	 data_out	 0.40
                      path	 data_in3	 data_out	 0.44
                      path	 data_in4	 data_out	 0.63
                      path	 data_in5	 data_out	 0.52
                      path	 sel	 data_out	 1.88
                    </data>
                    <data bit_width="8">
                      path	 data_in0	 data_out	 0.35
                      path	 data_in1	 data_out	 0.40
                      path	 data_in2	 data_out	 0.44
                      path	 data_in3	 data_out	 0.52
                      path	 data_in4	 data_out	 0.63
                      path	 data_in5	 data_out	 0.65
                      path	 sel	 data_out	 2.84
                    </data>
                    <data bit_width="16">
                      path	 data_in0	 data_out	 0.35
                      path	 data_in1	 data_out	 0.40
                      path	 data_in2	 data_out	 0.44
                      path	 data_in3	 data_out	 0.52
                      path	 data_in4	 data_out	 0.70
                      path	 data_in5	 data_out	 0.63
                      path	 sel	 data_out	 2.79
                    </data>
                    <data bit_width="32">
                      path	 data_in0	 data_out	 0.35
                      path	 data_in1	 data_out	 0.40
                      path	 data_in2	 data_out	 0.44
                      path	 data_in3	 data_out	 0.63
                      path	 data_in4	 data_out	 0.70
                      path	 data_in5	 data_out	 0.52
                      path	 sel	 data_out	 3.03
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="7">
                <max>
                  <data bit_width="1">
                  </data>
                  <data bit_width="4">
                    path	 data_in0	 data_out	 0.39
                    path	 data_in1	 data_out	 0.52
                    path	 data_in2	 data_out	 0.28
                    path	 data_in3	 data_out	 0.20
                    path	 data_in4	 data_out	 0.34
                    path	 data_in5	 data_out	 0.26
                    path	 data_in6	 data_out	 0.48
                    path	 sel	 data_out	 1.63
                  </data>
                  <data bit_width="8">
                    path	 data_in0	 data_out	 0.63
                    path	 data_in1	 data_out	 0.52
                    path	 data_in2	 data_out	 0.70
                    path	 data_in3	 data_out	 0.44
                    path	 data_in4	 data_out	 0.40
                    path	 data_in5	 data_out	 0.33
                    path	 data_in6	 data_out	 0.25
                    path	 sel	 data_out	 2.07
                  </data>
                  <data bit_width="16">
                    path	 data_in0	 data_out	 0.63
                    path	 data_in1	 data_out	 0.52
                    path	 data_in2	 data_out	 0.70
                    path	 data_in3	 data_out	 0.35
                    path	 data_in4	 data_out	 0.40
                    path	 data_in5	 data_out	 0.40
                    path	 data_in6	 data_out	 0.31
                    path	 sel	 data_out	 2.52
                  </data>
                  <data bit_width="32">
                    path	 data_in0	 data_out	 0.63
                    path	 data_in1	 data_out	 0.70
                    path	 data_in2	 data_out	 0.52
                    path	 data_in3	 data_out	 0.35
                    path	 data_in4	 data_out	 0.40
                    path	 data_in5	 data_out	 0.40
                    path	 data_in6	 data_out	 0.31
                    path	 sel	 data_out	 3.49
                  </data>
                </max>
                <min>
                  <data bit_width="1">
                  </data>
                  <data bit_width="4">
                    path	 data_in0	 data_out	 0.39
                    path	 data_in1	 data_out	 0.52
                    path	 data_in2	 data_out	 0.28
                    path	 data_in3	 data_out	 0.20
                    path	 data_in4	 data_out	 0.34
                    path	 data_in5	 data_out	 0.26
                    path	 data_in6	 data_out	 0.48
                    path	 sel	 data_out	 1.63
                  </data>
                  <data bit_width="8">
                    path	 data_in0	 data_out	 0.63
                    path	 data_in1	 data_out	 0.52
                    path	 data_in2	 data_out	 0.70
                    path	 data_in3	 data_out	 0.44
                    path	 data_in4	 data_out	 0.40
                    path	 data_in5	 data_out	 0.33
                    path	 data_in6	 data_out	 0.25
                    path	 sel	 data_out	 2.07
                  </data>
                  <data bit_width="16">
                    path	 data_in0	 data_out	 0.63
                    path	 data_in1	 data_out	 0.52
                    path	 data_in2	 data_out	 0.70
                    path	 data_in3	 data_out	 0.35
                    path	 data_in4	 data_out	 0.40
                    path	 data_in5	 data_out	 0.40
                    path	 data_in6	 data_out	 0.31
                    path	 sel	 data_out	 2.52
                  </data>
                  <data bit_width="32">
                    path	 data_in0	 data_out	 0.63
                    path	 data_in1	 data_out	 0.70
                    path	 data_in2	 data_out	 0.52
                    path	 data_in3	 data_out	 0.35
                    path	 data_in4	 data_out	 0.40
                    path	 data_in5	 data_out	 0.40
                    path	 data_in6	 data_out	 0.31
                    path	 sel	 data_out	 3.49
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1">
                    </data>
                    <data bit_width="4">
                      path	 data_in0	 data_out	 0.22
                      path	 data_in1	 data_out	 0.29
                      path	 data_in2	 data_out	 0.28
                      path	 data_in3	 data_out	 0.20
                      path	 data_in4	 data_out	 0.34
                      path	 data_in5	 data_out	 0.26
                      path	 data_in6	 data_out	 0.41
                      path	 sel	 data_out	 1.99
                    </data>
                    <data bit_width="8">
                      path	 data_in0	 data_out	 0.22
                      path	 data_in1	 data_out	 0.28
                      path	 data_in2	 data_out	 0.20
                      path	 data_in3	 data_out	 0.34
                      path	 data_in4	 data_out	 0.26
                      path	 data_in5	 data_out	 0.36
                      path	 data_in6	 data_out	 0.32
                      path	 sel	 data_out	 2.98
                    </data>
                    <data bit_width="16">
                      path	 data_in0	 data_out	 0.22
                      path	 data_in1	 data_out	 0.28
                      path	 data_in2	 data_out	 0.20
                      path	 data_in3	 data_out	 0.34
                      path	 data_in4	 data_out	 0.26
                      path	 data_in5	 data_out	 0.36
                      path	 data_in6	 data_out	 0.32
                      path	 sel	 data_out	 3.08
                    </data>
                    <data bit_width="32">
                      path	 data_in0	 data_out	 0.22
                      path	 data_in1	 data_out	 0.28
                      path	 data_in2	 data_out	 0.20
                      path	 data_in3	 data_out	 0.34
                      path	 data_in4	 data_out	 0.26
                      path	 data_in5	 data_out	 0.36
                      path	 data_in6	 data_out	 0.32
                      path	 sel	 data_out	 2.85
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1">
                    </data>
                    <data bit_width="4">
                      path	 data_in0	 data_out	 0.56
                      path	 data_in1	 data_out	 0.62
                      path	 data_in2	 data_out	 0.63
                      path	 data_in3	 data_out	 0.54
                      path	 data_in4	 data_out	 0.73
                      path	 data_in5	 data_out	 0.75
                      path	 data_in6	 data_out	 0.61
                      path	 sel	 data_out	 0.75
                    </data>
                    <data bit_width="8">
                      path	 data_in0	 data_out	 0.74
                      path	 data_in1	 data_out	 0.75
                      path	 data_in2	 data_out	 0.71
                      path	 data_in3	 data_out	 0.74
                      path	 data_in4	 data_out	 0.73
                      path	 data_in5	 data_out	 0.73
                      path	 data_in6	 data_out	 0.61
                      path	 sel	 data_out	 0.75
                    </data>
                    <data bit_width="16">
                      path	 data_in0	 data_out	 0.76
                      path	 data_in1	 data_out	 0.74
                      path	 data_in2	 data_out	 0.76
                      path	 data_in3	 data_out	 0.73
                      path	 data_in4	 data_out	 0.76
                      path	 data_in5	 data_out	 0.75
                      path	 data_in6	 data_out	 0.58
                      path	 sel	 data_out	 0.77
                    </data>
                    <data bit_width="32">
                      path	 data_in0	 data_out	 0.79
                      path	 data_in1	 data_out	 0.79
                      path	 data_in2	 data_out	 0.79
                      path	 data_in3	 data_out	 0.79
                      path	 data_in4	 data_out	 0.77
                      path	 data_in5	 data_out	 0.79
                      path	 data_in6	 data_out	 0.61
                      path	 sel	 data_out	 0.79
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1">
                    </data>
                    <data bit_width="4">
                      path	 data_in0	 data_out	 0.39
                      path	 data_in1	 data_out	 0.52
                      path	 data_in2	 data_out	 0.28
                      path	 data_in3	 data_out	 0.20
                      path	 data_in4	 data_out	 0.34
                      path	 data_in5	 data_out	 0.26
                      path	 data_in6	 data_out	 0.48
                      path	 sel	 data_out	 1.63
                    </data>
                    <data bit_width="8">
                      path	 data_in0	 data_out	 0.63
                      path	 data_in1	 data_out	 0.52
                      path	 data_in2	 data_out	 0.70
                      path	 data_in3	 data_out	 0.44
                      path	 data_in4	 data_out	 0.40
                      path	 data_in5	 data_out	 0.33
                      path	 data_in6	 data_out	 0.25
                      path	 sel	 data_out	 2.07
                    </data>
                    <data bit_width="16">
                      path	 data_in0	 data_out	 0.63
                      path	 data_in1	 data_out	 0.52
                      path	 data_in2	 data_out	 0.70
                      path	 data_in3	 data_out	 0.35
                      path	 data_in4	 data_out	 0.40
                      path	 data_in5	 data_out	 0.40
                      path	 data_in6	 data_out	 0.31
                      path	 sel	 data_out	 2.52
                    </data>
                    <data bit_width="32">
                      path	 data_in0	 data_out	 0.63
                      path	 data_in1	 data_out	 0.70
                      path	 data_in2	 data_out	 0.52
                      path	 data_in3	 data_out	 0.35
                      path	 data_in4	 data_out	 0.40
                      path	 data_in5	 data_out	 0.40
                      path	 data_in6	 data_out	 0.31
                      path	 sel	 data_out	 3.49
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8">
                <max>
                  <data bit_width="1">
                  </data>
                  <data bit_width="4">
                    path	 data_in0	 data_out	 0.33
                    path	 data_in1	 data_out	 0.29
                    path	 data_in2	 data_out	 0.20
                    path	 data_in3	 data_out	 0.31
                    path	 data_in4	 data_out	 0.23
                    path	 data_in5	 data_out	 0.34
                    path	 data_in6	 data_out	 0.26
                    path	 data_in7	 data_out	 0.41
                    path	 sel	 data_out	 1.21
                  </data>
                  <data bit_width="8">
                    path	 data_in0	 data_out	 0.33
                    path	 data_in1	 data_out	 0.20
                    path	 data_in2	 data_out	 0.31
                    path	 data_in3	 data_out	 0.23
                    path	 data_in4	 data_out	 0.34
                    path	 data_in5	 data_out	 0.26
                    path	 data_in6	 data_out	 0.36
                    path	 data_in7	 data_out	 0.32
                    path	 sel	 data_out	 2.17
                  </data>
                  <data bit_width="16">
                    path	 data_in0	 data_out	 0.33
                    path	 data_in1	 data_out	 0.20
                    path	 data_in2	 data_out	 0.31
                    path	 data_in3	 data_out	 0.23
                    path	 data_in4	 data_out	 0.34
                    path	 data_in5	 data_out	 0.26
                    path	 data_in6	 data_out	 0.36
                    path	 data_in7	 data_out	 0.32
                    path	 sel	 data_out	 1.99
                  </data>
                  <data bit_width="32">
                    path	 data_in0	 data_out	 0.33
                    path	 data_in1	 data_out	 0.20
                    path	 data_in2	 data_out	 0.31
                    path	 data_in3	 data_out	 0.23
                    path	 data_in4	 data_out	 0.34
                    path	 data_in5	 data_out	 0.26
                    path	 data_in6	 data_out	 0.36
                    path	 data_in7	 data_out	 0.32
                    path	 sel	 data_out	 2.10
                  </data>
                </max>
                <min>
                  <data bit_width="1">
                  </data>
                  <data bit_width="4">
                    path	 data_in0	 data_out	 0.33
                    path	 data_in1	 data_out	 0.29
                    path	 data_in2	 data_out	 0.20
                    path	 data_in3	 data_out	 0.31
                    path	 data_in4	 data_out	 0.23
                    path	 data_in5	 data_out	 0.34
                    path	 data_in6	 data_out	 0.26
                    path	 data_in7	 data_out	 0.41
                    path	 sel	 data_out	 1.21
                  </data>
                  <data bit_width="8">
                    path	 data_in0	 data_out	 0.33
                    path	 data_in1	 data_out	 0.20
                    path	 data_in2	 data_out	 0.31
                    path	 data_in3	 data_out	 0.23
                    path	 data_in4	 data_out	 0.34
                    path	 data_in5	 data_out	 0.26
                    path	 data_in6	 data_out	 0.36
                    path	 data_in7	 data_out	 0.32
                    path	 sel	 data_out	 2.17
                  </data>
                  <data bit_width="16">
                    path	 data_in0	 data_out	 0.33
                    path	 data_in1	 data_out	 0.20
                    path	 data_in2	 data_out	 0.31
                    path	 data_in3	 data_out	 0.23
                    path	 data_in4	 data_out	 0.34
                    path	 data_in5	 data_out	 0.26
                    path	 data_in6	 data_out	 0.36
                    path	 data_in7	 data_out	 0.32
                    path	 sel	 data_out	 1.99
                  </data>
                  <data bit_width="32">
                    path	 data_in0	 data_out	 0.33
                    path	 data_in1	 data_out	 0.20
                    path	 data_in2	 data_out	 0.31
                    path	 data_in3	 data_out	 0.23
                    path	 data_in4	 data_out	 0.34
                    path	 data_in5	 data_out	 0.26
                    path	 data_in6	 data_out	 0.36
                    path	 data_in7	 data_out	 0.32
                    path	 sel	 data_out	 2.10
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1">
                    </data>
                    <data bit_width="4">
                      path	 data_in0	 data_out	 0.33
                      path	 data_in1	 data_out	 0.29
                      path	 data_in2	 data_out	 0.20
                      path	 data_in3	 data_out	 0.31
                      path	 data_in4	 data_out	 0.23
                      path	 data_in5	 data_out	 0.34
                      path	 data_in6	 data_out	 0.26
                      path	 data_in7	 data_out	 0.41
                      path	 sel	 data_out	 2.25
                    </data>
                    <data bit_width="8">
                      path	 data_in0	 data_out	 0.33
                      path	 data_in1	 data_out	 0.20
                      path	 data_in2	 data_out	 0.31
                      path	 data_in3	 data_out	 0.23
                      path	 data_in4	 data_out	 0.34
                      path	 data_in5	 data_out	 0.26
                      path	 data_in6	 data_out	 0.36
                      path	 data_in7	 data_out	 0.32
                      path	 sel	 data_out	 3.47
                    </data>
                    <data bit_width="16">
                      path	 data_in0	 data_out	 0.33
                      path	 data_in1	 data_out	 0.20
                      path	 data_in2	 data_out	 0.31
                      path	 data_in3	 data_out	 0.23
                      path	 data_in4	 data_out	 0.34
                      path	 data_in5	 data_out	 0.26
                      path	 data_in6	 data_out	 0.36
                      path	 data_in7	 data_out	 0.32
                      path	 sel	 data_out	 3.58
                    </data>
                    <data bit_width="32">
                      path	 data_in0	 data_out	 0.33
                      path	 data_in1	 data_out	 0.20
                      path	 data_in2	 data_out	 0.31
                      path	 data_in3	 data_out	 0.23
                      path	 data_in4	 data_out	 0.34
                      path	 data_in5	 data_out	 0.26
                      path	 data_in6	 data_out	 0.36
                      path	 data_in7	 data_out	 0.32
                      path	 sel	 data_out	 3.56
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1">
                    </data>
                    <data bit_width="4">
                      path	 data_in0	 data_out	 0.67
                      path	 data_in1	 data_out	 0.58
                      path	 data_in2	 data_out	 0.87
                      path	 data_in3	 data_out	 0.81
                      path	 data_in4	 data_out	 0.86
                      path	 data_in5	 data_out	 0.64
                      path	 data_in6	 data_out	 0.75
                      path	 data_in7	 data_out	 0.53
                      path	 sel	 data_out	 0.88
                    </data>
                    <data bit_width="8">
                      path	 data_in0	 data_out	 0.76
                      path	 data_in1	 data_out	 0.75
                      path	 data_in2	 data_out	 0.75
                      path	 data_in3	 data_out	 0.75
                      path	 data_in4	 data_out	 0.75
                      path	 data_in5	 data_out	 0.71
                      path	 data_in6	 data_out	 0.74
                      path	 data_in7	 data_out	 0.62
                      path	 sel	 data_out	 0.76
                    </data>
                    <data bit_width="16">
                      path	 data_in0	 data_out	 0.81
                      path	 data_in1	 data_out	 0.81
                      path	 data_in2	 data_out	 0.81
                      path	 data_in3	 data_out	 0.81
                      path	 data_in4	 data_out	 0.69
                      path	 data_in5	 data_out	 0.79
                      path	 data_in6	 data_out	 0.81
                      path	 data_in7	 data_out	 0.66
                      path	 sel	 data_out	 0.81
                    </data>
                    <data bit_width="32">
                      path	 data_in0	 data_out	 0.78
                      path	 data_in1	 data_out	 0.79
                      path	 data_in2	 data_out	 0.78
                      path	 data_in3	 data_out	 0.79
                      path	 data_in4	 data_out	 0.78
                      path	 data_in5	 data_out	 0.78
                      path	 data_in6	 data_out	 0.74
                      path	 data_in7	 data_out	 0.70
                      path	 sel	 data_out	 0.79
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1">
                    </data>
                    <data bit_width="4">
                      path	 data_in0	 data_out	 0.33
                      path	 data_in1	 data_out	 0.29
                      path	 data_in2	 data_out	 0.20
                      path	 data_in3	 data_out	 0.31
                      path	 data_in4	 data_out	 0.23
                      path	 data_in5	 data_out	 0.34
                      path	 data_in6	 data_out	 0.26
                      path	 data_in7	 data_out	 0.41
                      path	 sel	 data_out	 1.21
                    </data>
                    <data bit_width="8">
                      path	 data_in0	 data_out	 0.33
                      path	 data_in1	 data_out	 0.20
                      path	 data_in2	 data_out	 0.31
                      path	 data_in3	 data_out	 0.23
                      path	 data_in4	 data_out	 0.34
                      path	 data_in5	 data_out	 0.26
                      path	 data_in6	 data_out	 0.36
                      path	 data_in7	 data_out	 0.32
                      path	 sel	 data_out	 2.17
                    </data>
                    <data bit_width="16">
                      path	 data_in0	 data_out	 0.33
                      path	 data_in1	 data_out	 0.20
                      path	 data_in2	 data_out	 0.31
                      path	 data_in3	 data_out	 0.23
                      path	 data_in4	 data_out	 0.34
                      path	 data_in5	 data_out	 0.26
                      path	 data_in6	 data_out	 0.36
                      path	 data_in7	 data_out	 0.32
                      path	 sel	 data_out	 1.99
                    </data>
                    <data bit_width="32">
                      path	 data_in0	 data_out	 0.33
                      path	 data_in1	 data_out	 0.20
                      path	 data_in2	 data_out	 0.31
                      path	 data_in3	 data_out	 0.23
                      path	 data_in4	 data_out	 0.34
                      path	 data_in5	 data_out	 0.26
                      path	 data_in6	 data_out	 0.36
                      path	 data_in7	 data_out	 0.32
                      path	 sel	 data_out	 2.10
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="9">
                <max>
                  <data bit_width="1">
                  </data>
                  <data bit_width="4">
                    path	 data_in0	 data_out	 0.37
                    path	 data_in1	 data_out	 0.63
                    path	 data_in2	 data_out	 0.23
                    path	 data_in3	 data_out	 0.35
                    path	 data_in4	 data_out	 0.26
                    path	 data_in5	 data_out	 0.28
                    path	 data_in6	 data_out	 0.20
                    path	 data_in7	 data_out	 0.70
                    path	 data_in8	 data_out	 0.52
                    path	 sel	 data_out	 2.66
                  </data>
                  <data bit_width="8">
                    path	 data_in0	 data_out	 0.37
                    path	 data_in1	 data_out	 0.23
                    path	 data_in2	 data_out	 0.35
                    path	 data_in3	 data_out	 0.26
                    path	 data_in4	 data_out	 0.28
                    path	 data_in5	 data_out	 0.20
                    path	 data_in6	 data_out	 0.65
                    path	 data_in7	 data_out	 0.51
                    path	 data_in8	 data_out	 0.63
                    path	 sel	 data_out	 3.08
                  </data>
                  <data bit_width="16">
                    path	 data_in0	 data_out	 0.37
                    path	 data_in1	 data_out	 0.23
                    path	 data_in2	 data_out	 0.35
                    path	 data_in3	 data_out	 0.26
                    path	 data_in4	 data_out	 0.28
                    path	 data_in5	 data_out	 0.20
                    path	 data_in6	 data_out	 0.65
                    path	 data_in7	 data_out	 0.51
                    path	 data_in8	 data_out	 0.63
                    path	 sel	 data_out	 3.43
                  </data>
                  <data bit_width="32">
                    path	 data_in0	 data_out	 0.37
                    path	 data_in1	 data_out	 0.23
                    path	 data_in2	 data_out	 0.35
                    path	 data_in3	 data_out	 0.26
                    path	 data_in4	 data_out	 0.28
                    path	 data_in5	 data_out	 0.20
                    path	 data_in6	 data_out	 0.65
                    path	 data_in7	 data_out	 0.51
                    path	 data_in8	 data_out	 0.63
                    path	 sel	 data_out	 3.72
                  </data>
                </max>
                <min>
                  <data bit_width="1">
                  </data>
                  <data bit_width="4">
                    path	 data_in0	 data_out	 0.37
                    path	 data_in1	 data_out	 0.63
                    path	 data_in2	 data_out	 0.23
                    path	 data_in3	 data_out	 0.35
                    path	 data_in4	 data_out	 0.26
                    path	 data_in5	 data_out	 0.28
                    path	 data_in6	 data_out	 0.20
                    path	 data_in7	 data_out	 0.70
                    path	 data_in8	 data_out	 0.52
                    path	 sel	 data_out	 2.66
                  </data>
                  <data bit_width="8">
                    path	 data_in0	 data_out	 0.37
                    path	 data_in1	 data_out	 0.23
                    path	 data_in2	 data_out	 0.35
                    path	 data_in3	 data_out	 0.26
                    path	 data_in4	 data_out	 0.28
                    path	 data_in5	 data_out	 0.20
                    path	 data_in6	 data_out	 0.65
                    path	 data_in7	 data_out	 0.51
                    path	 data_in8	 data_out	 0.63
                    path	 sel	 data_out	 3.08
                  </data>
                  <data bit_width="16">
                    path	 data_in0	 data_out	 0.37
                    path	 data_in1	 data_out	 0.23
                    path	 data_in2	 data_out	 0.35
                    path	 data_in3	 data_out	 0.26
                    path	 data_in4	 data_out	 0.28
                    path	 data_in5	 data_out	 0.20
                    path	 data_in6	 data_out	 0.65
                    path	 data_in7	 data_out	 0.51
                    path	 data_in8	 data_out	 0.63
                    path	 sel	 data_out	 3.43
                  </data>
                  <data bit_width="32">
                    path	 data_in0	 data_out	 0.37
                    path	 data_in1	 data_out	 0.23
                    path	 data_in2	 data_out	 0.35
                    path	 data_in3	 data_out	 0.26
                    path	 data_in4	 data_out	 0.28
                    path	 data_in5	 data_out	 0.20
                    path	 data_in6	 data_out	 0.65
                    path	 data_in7	 data_out	 0.51
                    path	 data_in8	 data_out	 0.63
                    path	 sel	 data_out	 3.72
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1">
                    </data>
                    <data bit_width="4">
                      path	 data_in0	 data_out	 0.37
                      path	 data_in1	 data_out	 0.59
                      path	 data_in2	 data_out	 0.23
                      path	 data_in3	 data_out	 0.35
                      path	 data_in4	 data_out	 0.26
                      path	 data_in5	 data_out	 0.28
                      path	 data_in6	 data_out	 0.20
                      path	 data_in7	 data_out	 0.65
                      path	 data_in8	 data_out	 0.52
                      path	 sel	 data_out	 2.54
                    </data>
                    <data bit_width="8">
                      path	 data_in0	 data_out	 0.37
                      path	 data_in1	 data_out	 0.23
                      path	 data_in2	 data_out	 0.35
                      path	 data_in3	 data_out	 0.26
                      path	 data_in4	 data_out	 0.28
                      path	 data_in5	 data_out	 0.20
                      path	 data_in6	 data_out	 0.65
                      path	 data_in7	 data_out	 0.51
                      path	 data_in8	 data_out	 0.63
                      path	 sel	 data_out	 2.81
                    </data>
                    <data bit_width="16">
                      path	 data_in0	 data_out	 0.37
                      path	 data_in1	 data_out	 0.23
                      path	 data_in2	 data_out	 0.35
                      path	 data_in3	 data_out	 0.26
                      path	 data_in4	 data_out	 0.28
                      path	 data_in5	 data_out	 0.20
                      path	 data_in6	 data_out	 0.65
                      path	 data_in7	 data_out	 0.51
                      path	 data_in8	 data_out	 0.63
                      path	 sel	 data_out	 3.39
                    </data>
                    <data bit_width="32">
                      path	 data_in0	 data_out	 0.37
                      path	 data_in1	 data_out	 0.23
                      path	 data_in2	 data_out	 0.35
                      path	 data_in3	 data_out	 0.26
                      path	 data_in4	 data_out	 0.28
                      path	 data_in5	 data_out	 0.20
                      path	 data_in6	 data_out	 0.65
                      path	 data_in7	 data_out	 0.51
                      path	 data_in8	 data_out	 0.63
                      path	 sel	 data_out	 3.24
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1">
                    </data>
                    <data bit_width="4">
                      path	 data_in0	 data_out	 0.62
                      path	 data_in1	 data_out	 0.62
                      path	 data_in2	 data_out	 0.62
                      path	 data_in3	 data_out	 0.53
                      path	 data_in4	 data_out	 0.70
                      path	 data_in5	 data_out	 0.62
                      path	 data_in6	 data_out	 0.66
                      path	 data_in7	 data_out	 0.68
                      path	 data_in8	 data_out	 0.33
                      path	 sel	 data_out	 0.71
                    </data>
                    <data bit_width="8">
                      path	 data_in0	 data_out	 0.84
                      path	 data_in1	 data_out	 0.83
                      path	 data_in2	 data_out	 0.81
                      path	 data_in3	 data_out	 0.80
                      path	 data_in4	 data_out	 0.83
                      path	 data_in5	 data_out	 0.84
                      path	 data_in6	 data_out	 0.83
                      path	 data_in7	 data_out	 0.83
                      path	 data_in8	 data_out	 0.62
                      path	 sel	 data_out	 0.84
                    </data>
                    <data bit_width="16">
                      path	 data_in0	 data_out	 0.75
                      path	 data_in1	 data_out	 0.75
                      path	 data_in2	 data_out	 0.76
                      path	 data_in3	 data_out	 0.75
                      path	 data_in4	 data_out	 0.76
                      path	 data_in5	 data_out	 0.76
                      path	 data_in6	 data_out	 0.76
                      path	 data_in7	 data_out	 0.75
                      path	 data_in8	 data_out	 0.57
                      path	 sel	 data_out	 0.76
                    </data>
                    <data bit_width="32">
                      path	 data_in0	 data_out	 0.75
                      path	 data_in1	 data_out	 0.74
                      path	 data_in2	 data_out	 0.75
                      path	 data_in3	 data_out	 0.75
                      path	 data_in4	 data_out	 0.75
                      path	 data_in5	 data_out	 0.78
                      path	 data_in6	 data_out	 0.77
                      path	 data_in7	 data_out	 0.60
                      path	 data_in8	 data_out	 0.68
                      path	 sel	 data_out	 1.15
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1">
                    </data>
                    <data bit_width="4">
                      path	 data_in0	 data_out	 0.37
                      path	 data_in1	 data_out	 0.63
                      path	 data_in2	 data_out	 0.23
                      path	 data_in3	 data_out	 0.35
                      path	 data_in4	 data_out	 0.26
                      path	 data_in5	 data_out	 0.28
                      path	 data_in6	 data_out	 0.20
                      path	 data_in7	 data_out	 0.70
                      path	 data_in8	 data_out	 0.52
                      path	 sel	 data_out	 2.66
                    </data>
                    <data bit_width="8">
                      path	 data_in0	 data_out	 0.37
                      path	 data_in1	 data_out	 0.23
                      path	 data_in2	 data_out	 0.35
                      path	 data_in3	 data_out	 0.26
                      path	 data_in4	 data_out	 0.28
                      path	 data_in5	 data_out	 0.20
                      path	 data_in6	 data_out	 0.65
                      path	 data_in7	 data_out	 0.51
                      path	 data_in8	 data_out	 0.63
                      path	 sel	 data_out	 3.08
                    </data>
                    <data bit_width="16">
                      path	 data_in0	 data_out	 0.37
                      path	 data_in1	 data_out	 0.23
                      path	 data_in2	 data_out	 0.35
                      path	 data_in3	 data_out	 0.26
                      path	 data_in4	 data_out	 0.28
                      path	 data_in5	 data_out	 0.20
                      path	 data_in6	 data_out	 0.65
                      path	 data_in7	 data_out	 0.51
                      path	 data_in8	 data_out	 0.63
                      path	 sel	 data_out	 3.43
                    </data>
                    <data bit_width="32">
                      path	 data_in0	 data_out	 0.37
                      path	 data_in1	 data_out	 0.23
                      path	 data_in2	 data_out	 0.35
                      path	 data_in3	 data_out	 0.26
                      path	 data_in4	 data_out	 0.28
                      path	 data_in5	 data_out	 0.20
                      path	 data_in6	 data_out	 0.65
                      path	 data_in7	 data_out	 0.51
                      path	 data_in8	 data_out	 0.63
                      path	 sel	 data_out	 3.72
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="10">
                <max>
                  <data bit_width="1">
                  </data>
                  <data bit_width="4">
                    path	 data_in0	 data_out	 0.33
                    path	 data_in1	 data_out	 0.56
                    path	 data_in2	 data_out	 0.20
                    path	 data_in3	 data_out	 0.67
                    path	 data_in4	 data_out	 0.49
                    path	 data_in5	 data_out	 0.61
                    path	 data_in6	 data_out	 0.30
                    path	 data_in7	 data_out	 0.22
                    path	 data_in8	 data_out	 0.67
                    path	 data_in9	 data_out	 0.49
                    path	 sel	 data_out	 2.65
                  </data>
                  <data bit_width="8">
                    path	 data_in0	 data_out	 0.52
                    path	 data_in1	 data_out	 0.39
                    path	 data_in2	 data_out	 0.87
                    path	 data_in3	 data_out	 0.67
                    path	 data_in4	 data_out	 0.80
                    path	 data_in5	 data_out	 0.49
                    path	 data_in6	 data_out	 0.41
                    path	 data_in7	 data_out	 0.83
                    path	 data_in8	 data_out	 0.64
                    path	 data_in9	 data_out	 0.80
                    path	 sel	 data_out	 4.12
                  </data>
                  <data bit_width="16">
                    path	 data_in0	 data_out	 0.33
                    path	 data_in1	 data_out	 0.20
                    path	 data_in2	 data_out	 0.63
                    path	 data_in3	 data_out	 0.48
                    path	 data_in4	 data_out	 0.56
                    path	 data_in5	 data_out	 0.30
                    path	 data_in6	 data_out	 0.22
                    path	 data_in7	 data_out	 0.67
                    path	 data_in8	 data_out	 0.49
                    path	 data_in9	 data_out	 0.65
                    path	 sel	 data_out	 3.64
                  </data>
                  <data bit_width="32">
                    path	 data_in0	 data_out	 0.28
                    path	 data_in1	 data_out	 0.20
                    path	 data_in2	 data_out	 0.63
                    path	 data_in3	 data_out	 0.48
                    path	 data_in4	 data_out	 0.56
                    path	 data_in5	 data_out	 0.30
                    path	 data_in6	 data_out	 0.22
                    path	 data_in7	 data_out	 0.67
                    path	 data_in8	 data_out	 0.49
                    path	 data_in9	 data_out	 0.65
                    path	 sel	 data_out	 4.02
                  </data>
                </max>
                <min>
                  <data bit_width="1">
                  </data>
                  <data bit_width="4">
                    path	 data_in0	 data_out	 0.33
                    path	 data_in1	 data_out	 0.56
                    path	 data_in2	 data_out	 0.20
                    path	 data_in3	 data_out	 0.67
                    path	 data_in4	 data_out	 0.49
                    path	 data_in5	 data_out	 0.61
                    path	 data_in6	 data_out	 0.30
                    path	 data_in7	 data_out	 0.22
                    path	 data_in8	 data_out	 0.67
                    path	 data_in9	 data_out	 0.49
                    path	 sel	 data_out	 2.65
                  </data>
                  <data bit_width="8">
                    path	 data_in0	 data_out	 0.52
                    path	 data_in1	 data_out	 0.39
                    path	 data_in2	 data_out	 0.87
                    path	 data_in3	 data_out	 0.67
                    path	 data_in4	 data_out	 0.80
                    path	 data_in5	 data_out	 0.49
                    path	 data_in6	 data_out	 0.41
                    path	 data_in7	 data_out	 0.83
                    path	 data_in8	 data_out	 0.64
                    path	 data_in9	 data_out	 0.80
                    path	 sel	 data_out	 4.12
                  </data>
                  <data bit_width="16">
                    path	 data_in0	 data_out	 0.33
                    path	 data_in1	 data_out	 0.20
                    path	 data_in2	 data_out	 0.63
                    path	 data_in3	 data_out	 0.48
                    path	 data_in4	 data_out	 0.56
                    path	 data_in5	 data_out	 0.30
                    path	 data_in6	 data_out	 0.22
                    path	 data_in7	 data_out	 0.67
                    path	 data_in8	 data_out	 0.49
                    path	 data_in9	 data_out	 0.65
                    path	 sel	 data_out	 3.64
                  </data>
                  <data bit_width="32">
                    path	 data_in0	 data_out	 0.28
                    path	 data_in1	 data_out	 0.20
                    path	 data_in2	 data_out	 0.63
                    path	 data_in3	 data_out	 0.48
                    path	 data_in4	 data_out	 0.56
                    path	 data_in5	 data_out	 0.30
                    path	 data_in6	 data_out	 0.22
                    path	 data_in7	 data_out	 0.67
                    path	 data_in8	 data_out	 0.49
                    path	 data_in9	 data_out	 0.65
                    path	 sel	 data_out	 4.02
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1">
                    </data>
                    <data bit_width="4">
                      path	 data_in0	 data_out	 0.33
                      path	 data_in1	 data_out	 0.61
                      path	 data_in2	 data_out	 0.20
                      path	 data_in3	 data_out	 0.63
                      path	 data_in4	 data_out	 0.48
                      path	 data_in5	 data_out	 0.56
                      path	 data_in6	 data_out	 0.30
                      path	 data_in7	 data_out	 0.22
                      path	 data_in8	 data_out	 0.67
                      path	 data_in9	 data_out	 0.50
                      path	 sel	 data_out	 2.24
                    </data>
                    <data bit_width="8">
                      path	 data_in0	 data_out	 0.33
                      path	 data_in1	 data_out	 0.20
                      path	 data_in2	 data_out	 0.63
                      path	 data_in3	 data_out	 0.48
                      path	 data_in4	 data_out	 0.56
                      path	 data_in5	 data_out	 0.30
                      path	 data_in6	 data_out	 0.22
                      path	 data_in7	 data_out	 0.67
                      path	 data_in8	 data_out	 0.49
                      path	 data_in9	 data_out	 0.65
                      path	 sel	 data_out	 3.37
                    </data>
                    <data bit_width="16">
                      path	 data_in0	 data_out	 0.33
                      path	 data_in1	 data_out	 0.20
                      path	 data_in2	 data_out	 0.63
                      path	 data_in3	 data_out	 0.48
                      path	 data_in4	 data_out	 0.56
                      path	 data_in5	 data_out	 0.30
                      path	 data_in6	 data_out	 0.22
                      path	 data_in7	 data_out	 0.67
                      path	 data_in8	 data_out	 0.49
                      path	 data_in9	 data_out	 0.65
                      path	 sel	 data_out	 3.36
                    </data>
                    <data bit_width="32">
                      path	 data_in0	 data_out	 0.33
                      path	 data_in1	 data_out	 0.20
                      path	 data_in2	 data_out	 0.63
                      path	 data_in3	 data_out	 0.48
                      path	 data_in4	 data_out	 0.56
                      path	 data_in5	 data_out	 0.30
                      path	 data_in6	 data_out	 0.22
                      path	 data_in7	 data_out	 0.67
                      path	 data_in8	 data_out	 0.49
                      path	 data_in9	 data_out	 0.65
                      path	 sel	 data_out	 3.25
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1">
                    </data>
                    <data bit_width="4">
                      path	 data_in0	 data_out	 0.73
                      path	 data_in1	 data_out	 0.73
                      path	 data_in2	 data_out	 0.77
                      path	 data_in3	 data_out	 0.77
                      path	 data_in4	 data_out	 0.77
                      path	 data_in5	 data_out	 0.66
                      path	 data_in6	 data_out	 0.76
                      path	 data_in7	 data_out	 0.77
                      path	 data_in8	 data_out	 0.76
                      path	 data_in9	 data_out	 0.56
                      path	 sel	 data_out	 0.77
                    </data>
                    <data bit_width="8">
                      path	 data_in0	 data_out	 0.94
                      path	 data_in1	 data_out	 0.94
                      path	 data_in2	 data_out	 0.89
                      path	 data_in3	 data_out	 0.83
                      path	 data_in4	 data_out	 0.76
                      path	 data_in5	 data_out	 0.85
                      path	 data_in6	 data_out	 0.83
                      path	 data_in7	 data_out	 0.82
                      path	 data_in8	 data_out	 0.92
                      path	 data_in9	 data_out	 0.79
                      path	 sel	 data_out	 0.95
                    </data>
                    <data bit_width="16">
                      path	 data_in0	 data_out	 0.80
                      path	 data_in1	 data_out	 0.82
                      path	 data_in2	 data_out	 0.82
                      path	 data_in3	 data_out	 0.80
                      path	 data_in4	 data_out	 0.82
                      path	 data_in5	 data_out	 0.80
                      path	 data_in6	 data_out	 0.81
                      path	 data_in7	 data_out	 0.82
                      path	 data_in8	 data_out	 0.83
                      path	 data_in9	 data_out	 0.65
                      path	 sel	 data_out	 0.83
                    </data>
                    <data bit_width="32">
                      path	 data_in0	 data_out	 0.78
                      path	 data_in1	 data_out	 0.85
                      path	 data_in2	 data_out	 0.86
                      path	 data_in3	 data_out	 0.78
                      path	 data_in4	 data_out	 0.79
                      path	 data_in5	 data_out	 0.71
                      path	 data_in6	 data_out	 0.73
                      path	 data_in7	 data_out	 0.86
                      path	 data_in8	 data_out	 0.83
                      path	 data_in9	 data_out	 0.70
                      path	 sel	 data_out	 1.13
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1">
                    </data>
                    <data bit_width="4">
                      path	 data_in0	 data_out	 0.33
                      path	 data_in1	 data_out	 0.56
                      path	 data_in2	 data_out	 0.20
                      path	 data_in3	 data_out	 0.67
                      path	 data_in4	 data_out	 0.49
                      path	 data_in5	 data_out	 0.61
                      path	 data_in6	 data_out	 0.30
                      path	 data_in7	 data_out	 0.22
                      path	 data_in8	 data_out	 0.67
                      path	 data_in9	 data_out	 0.49
                      path	 sel	 data_out	 2.65
                    </data>
                    <data bit_width="8">
                      path	 data_in0	 data_out	 0.52
                      path	 data_in1	 data_out	 0.39
                      path	 data_in2	 data_out	 0.87
                      path	 data_in3	 data_out	 0.67
                      path	 data_in4	 data_out	 0.80
                      path	 data_in5	 data_out	 0.49
                      path	 data_in6	 data_out	 0.41
                      path	 data_in7	 data_out	 0.83
                      path	 data_in8	 data_out	 0.64
                      path	 data_in9	 data_out	 0.80
                      path	 sel	 data_out	 4.12
                    </data>
                    <data bit_width="16">
                      path	 data_in0	 data_out	 0.33
                      path	 data_in1	 data_out	 0.20
                      path	 data_in2	 data_out	 0.63
                      path	 data_in3	 data_out	 0.48
                      path	 data_in4	 data_out	 0.56
                      path	 data_in5	 data_out	 0.30
                      path	 data_in6	 data_out	 0.22
                      path	 data_in7	 data_out	 0.67
                      path	 data_in8	 data_out	 0.49
                      path	 data_in9	 data_out	 0.65
                      path	 sel	 data_out	 3.64
                    </data>
                    <data bit_width="32">
                      path	 data_in0	 data_out	 0.28
                      path	 data_in1	 data_out	 0.20
                      path	 data_in2	 data_out	 0.63
                      path	 data_in3	 data_out	 0.48
                      path	 data_in4	 data_out	 0.56
                      path	 data_in5	 data_out	 0.30
                      path	 data_in6	 data_out	 0.22
                      path	 data_in7	 data_out	 0.67
                      path	 data_in8	 data_out	 0.49
                      path	 data_in9	 data_out	 0.65
                      path	 sel	 data_out	 4.02
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="11">
                <max>
                  <data bit_width="1">
                  </data>
                  <data bit_width="4">
                    path	 data_in0	 data_out	 0.33
                    path	 data_in1	 data_out	 0.73
                    path	 data_in2	 data_out	 0.19
                    path	 data_in3	 data_out	 0.71
                    path	 data_in4	 data_out	 0.45
                    path	 data_in5	 data_out	 0.60
                    path	 data_in6	 data_out	 0.80
                    path	 data_in7	 data_out	 0.54
                    path	 data_in8	 data_out	 0.69
                    path	 data_in9	 data_out	 0.80
                    path	 data_in10	 data_out	 0.62
                    path	 sel	 data_out	 2.69
                  </data>
                  <data bit_width="8">
                    path	 data_in0	 data_out	 0.33
                    path	 data_in1	 data_out	 0.19
                    path	 data_in2	 data_out	 0.80
                    path	 data_in3	 data_out	 0.58
                    path	 data_in4	 data_out	 0.73
                    path	 data_in5	 data_out	 0.76
                    path	 data_in6	 data_out	 0.54
                    path	 data_in7	 data_out	 0.69
                    path	 data_in8	 data_out	 0.67
                    path	 data_in9	 data_out	 0.45
                    path	 data_in10	 data_out	 0.64
                    path	 sel	 data_out	 3.88
                  </data>
                  <data bit_width="16">
                    path	 data_in0	 data_out	 0.33
                    path	 data_in1	 data_out	 0.19
                    path	 data_in2	 data_out	 0.80
                    path	 data_in3	 data_out	 0.58
                    path	 data_in4	 data_out	 0.73
                    path	 data_in5	 data_out	 0.76
                    path	 data_in6	 data_out	 0.54
                    path	 data_in7	 data_out	 0.69
                    path	 data_in8	 data_out	 0.67
                    path	 data_in9	 data_out	 0.45
                    path	 data_in10	 data_out	 0.64
                    path	 sel	 data_out	 3.47
                  </data>
                  <data bit_width="32">
                    path	 data_in0	 data_out	 0.33
                    path	 data_in1	 data_out	 0.19
                    path	 data_in2	 data_out	 0.80
                    path	 data_in3	 data_out	 0.58
                    path	 data_in4	 data_out	 0.73
                    path	 data_in5	 data_out	 0.76
                    path	 data_in6	 data_out	 0.54
                    path	 data_in7	 data_out	 0.69
                    path	 data_in8	 data_out	 0.67
                    path	 data_in9	 data_out	 0.45
                    path	 data_in10	 data_out	 0.64
                    path	 sel	 data_out	 3.88
                  </data>
                </max>
                <min>
                  <data bit_width="1">
                  </data>
                  <data bit_width="4">
                    path	 data_in0	 data_out	 0.33
                    path	 data_in1	 data_out	 0.73
                    path	 data_in2	 data_out	 0.19
                    path	 data_in3	 data_out	 0.71
                    path	 data_in4	 data_out	 0.45
                    path	 data_in5	 data_out	 0.60
                    path	 data_in6	 data_out	 0.80
                    path	 data_in7	 data_out	 0.54
                    path	 data_in8	 data_out	 0.69
                    path	 data_in9	 data_out	 0.80
                    path	 data_in10	 data_out	 0.62
                    path	 sel	 data_out	 2.69
                  </data>
                  <data bit_width="8">
                    path	 data_in0	 data_out	 0.33
                    path	 data_in1	 data_out	 0.19
                    path	 data_in2	 data_out	 0.80
                    path	 data_in3	 data_out	 0.58
                    path	 data_in4	 data_out	 0.73
                    path	 data_in5	 data_out	 0.76
                    path	 data_in6	 data_out	 0.54
                    path	 data_in7	 data_out	 0.69
                    path	 data_in8	 data_out	 0.67
                    path	 data_in9	 data_out	 0.45
                    path	 data_in10	 data_out	 0.64
                    path	 sel	 data_out	 3.88
                  </data>
                  <data bit_width="16">
                    path	 data_in0	 data_out	 0.33
                    path	 data_in1	 data_out	 0.19
                    path	 data_in2	 data_out	 0.80
                    path	 data_in3	 data_out	 0.58
                    path	 data_in4	 data_out	 0.73
                    path	 data_in5	 data_out	 0.76
                    path	 data_in6	 data_out	 0.54
                    path	 data_in7	 data_out	 0.69
                    path	 data_in8	 data_out	 0.67
                    path	 data_in9	 data_out	 0.45
                    path	 data_in10	 data_out	 0.64
                    path	 sel	 data_out	 3.47
                  </data>
                  <data bit_width="32">
                    path	 data_in0	 data_out	 0.33
                    path	 data_in1	 data_out	 0.19
                    path	 data_in2	 data_out	 0.80
                    path	 data_in3	 data_out	 0.58
                    path	 data_in4	 data_out	 0.73
                    path	 data_in5	 data_out	 0.76
                    path	 data_in6	 data_out	 0.54
                    path	 data_in7	 data_out	 0.69
                    path	 data_in8	 data_out	 0.67
                    path	 data_in9	 data_out	 0.45
                    path	 data_in10	 data_out	 0.64
                    path	 sel	 data_out	 3.88
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1">
                    </data>
                    <data bit_width="4">
                      path	 data_in0	 data_out	 0.33
                      path	 data_in1	 data_out	 0.60
                      path	 data_in2	 data_out	 0.19
                      path	 data_in3	 data_out	 0.80
                      path	 data_in4	 data_out	 0.58
                      path	 data_in5	 data_out	 0.73
                      path	 data_in6	 data_out	 0.76
                      path	 data_in7	 data_out	 0.54
                      path	 data_in8	 data_out	 0.69
                      path	 data_in9	 data_out	 0.67
                      path	 data_in10	 data_out	 0.49
                      path	 sel	 data_out	 2.45
                    </data>
                    <data bit_width="8">
                      path	 data_in0	 data_out	 0.33
                      path	 data_in1	 data_out	 0.19
                      path	 data_in2	 data_out	 0.80
                      path	 data_in3	 data_out	 0.58
                      path	 data_in4	 data_out	 0.73
                      path	 data_in5	 data_out	 0.76
                      path	 data_in6	 data_out	 0.54
                      path	 data_in7	 data_out	 0.69
                      path	 data_in8	 data_out	 0.67
                      path	 data_in9	 data_out	 0.45
                      path	 data_in10	 data_out	 0.64
                      path	 sel	 data_out	 3.19
                    </data>
                    <data bit_width="16">
                      path	 data_in0	 data_out	 0.33
                      path	 data_in1	 data_out	 0.19
                      path	 data_in2	 data_out	 0.80
                      path	 data_in3	 data_out	 0.58
                      path	 data_in4	 data_out	 0.73
                      path	 data_in5	 data_out	 0.76
                      path	 data_in6	 data_out	 0.54
                      path	 data_in7	 data_out	 0.69
                      path	 data_in8	 data_out	 0.67
                      path	 data_in9	 data_out	 0.45
                      path	 data_in10	 data_out	 0.64
                      path	 sel	 data_out	 3.53
                    </data>
                    <data bit_width="32">
                      path	 data_in0	 data_out	 0.33
                      path	 data_in1	 data_out	 0.19
                      path	 data_in2	 data_out	 0.80
                      path	 data_in3	 data_out	 0.58
                      path	 data_in4	 data_out	 0.73
                      path	 data_in5	 data_out	 0.76
                      path	 data_in6	 data_out	 0.54
                      path	 data_in7	 data_out	 0.69
                      path	 data_in8	 data_out	 0.67
                      path	 data_in9	 data_out	 0.45
                      path	 data_in10	 data_out	 0.64
                      path	 sel	 data_out	 3.38
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1">
                    </data>
                    <data bit_width="4">
                      path	 data_in0	 data_out	 0.62
                      path	 data_in1	 data_out	 0.70
                      path	 data_in2	 data_out	 0.84
                      path	 data_in3	 data_out	 0.85
                      path	 data_in4	 data_out	 0.84
                      path	 data_in5	 data_out	 0.67
                      path	 data_in6	 data_out	 0.79
                      path	 data_in7	 data_out	 0.88
                      path	 data_in8	 data_out	 0.71
                      path	 data_in9	 data_out	 0.84
                      path	 data_in10	 data_out	 0.61
                      path	 sel	 data_out	 0.89
                    </data>
                    <data bit_width="8">
                      path	 data_in0	 data_out	 0.81
                      path	 data_in1	 data_out	 0.82
                      path	 data_in2	 data_out	 0.86
                      path	 data_in3	 data_out	 0.79
                      path	 data_in4	 data_out	 0.83
                      path	 data_in5	 data_out	 0.94
                      path	 data_in6	 data_out	 0.98
                      path	 data_in7	 data_out	 0.89
                      path	 data_in8	 data_out	 0.84
                      path	 data_in9	 data_out	 0.85
                      path	 data_in10	 data_out	 0.69
                      path	 sel	 data_out	 0.99
                    </data>
                    <data bit_width="16">
                      path	 data_in0	 data_out	 0.79
                      path	 data_in1	 data_out	 0.74
                      path	 data_in2	 data_out	 0.74
                      path	 data_in3	 data_out	 0.70
                      path	 data_in4	 data_out	 0.75
                      path	 data_in5	 data_out	 0.84
                      path	 data_in6	 data_out	 0.81
                      path	 data_in7	 data_out	 0.71
                      path	 data_in8	 data_out	 0.84
                      path	 data_in9	 data_out	 0.81
                      path	 data_in10	 data_out	 0.69
                      path	 sel	 data_out	 1.07
                    </data>
                    <data bit_width="32">
                      path	 data_in0	 data_out	 0.90
                      path	 data_in1	 data_out	 0.80
                      path	 data_in2	 data_out	 0.63
                      path	 data_in3	 data_out	 0.82
                      path	 data_in4	 data_out	 0.82
                      path	 data_in5	 data_out	 0.82
                      path	 data_in6	 data_out	 0.75
                      path	 data_in7	 data_out	 0.72
                      path	 data_in8	 data_out	 0.81
                      path	 data_in9	 data_out	 0.74
                      path	 data_in10	 data_out	 0.72
                      path	 sel	 data_out	 1.08
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1">
                    </data>
                    <data bit_width="4">
                      path	 data_in0	 data_out	 0.33
                      path	 data_in1	 data_out	 0.73
                      path	 data_in2	 data_out	 0.19
                      path	 data_in3	 data_out	 0.71
                      path	 data_in4	 data_out	 0.45
                      path	 data_in5	 data_out	 0.60
                      path	 data_in6	 data_out	 0.80
                      path	 data_in7	 data_out	 0.54
                      path	 data_in8	 data_out	 0.69
                      path	 data_in9	 data_out	 0.80
                      path	 data_in10	 data_out	 0.62
                      path	 sel	 data_out	 2.69
                    </data>
                    <data bit_width="8">
                      path	 data_in0	 data_out	 0.33
                      path	 data_in1	 data_out	 0.19
                      path	 data_in2	 data_out	 0.80
                      path	 data_in3	 data_out	 0.58
                      path	 data_in4	 data_out	 0.73
                      path	 data_in5	 data_out	 0.76
                      path	 data_in6	 data_out	 0.54
                      path	 data_in7	 data_out	 0.69
                      path	 data_in8	 data_out	 0.67
                      path	 data_in9	 data_out	 0.45
                      path	 data_in10	 data_out	 0.64
                      path	 sel	 data_out	 3.88
                    </data>
                    <data bit_width="16">
                      path	 data_in0	 data_out	 0.33
                      path	 data_in1	 data_out	 0.19
                      path	 data_in2	 data_out	 0.80
                      path	 data_in3	 data_out	 0.58
                      path	 data_in4	 data_out	 0.73
                      path	 data_in5	 data_out	 0.76
                      path	 data_in6	 data_out	 0.54
                      path	 data_in7	 data_out	 0.69
                      path	 data_in8	 data_out	 0.67
                      path	 data_in9	 data_out	 0.45
                      path	 data_in10	 data_out	 0.64
                      path	 sel	 data_out	 3.47
                    </data>
                    <data bit_width="32">
                      path	 data_in0	 data_out	 0.33
                      path	 data_in1	 data_out	 0.19
                      path	 data_in2	 data_out	 0.80
                      path	 data_in3	 data_out	 0.58
                      path	 data_in4	 data_out	 0.73
                      path	 data_in5	 data_out	 0.76
                      path	 data_in6	 data_out	 0.54
                      path	 data_in7	 data_out	 0.69
                      path	 data_in8	 data_out	 0.67
                      path	 data_in9	 data_out	 0.45
                      path	 data_in10	 data_out	 0.64
                      path	 sel	 data_out	 3.88
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="12">
                <max>
                  <data bit_width="1">
                  </data>
                  <data bit_width="4">
                    path	 data_in0	 data_out	 1.05
                    path	 data_in1	 data_out	 1.03
                    path	 data_in2	 data_out	 0.87
                    path	 data_in3	 data_out	 1.02
                    path	 data_in4	 data_out	 1.09
                    path	 data_in5	 data_out	 0.83
                    path	 data_in6	 data_out	 0.98
                    path	 data_in7	 data_out	 0.88
                    path	 data_in8	 data_out	 0.62
                    path	 data_in9	 data_out	 0.77
                    path	 data_in10	 data_out	 1.10
                    path	 data_in11	 data_out	 0.92
                    path	 sel	 data_out	 2.80
                  </data>
                  <data bit_width="8">
                    path	 data_in0	 data_out	 1.01
                    path	 data_in1	 data_out	 0.75
                    path	 data_in2	 data_out	 0.90
                    path	 data_in3	 data_out	 0.84
                    path	 data_in4	 data_out	 0.62
                    path	 data_in5	 data_out	 0.77
                    path	 data_in6	 data_out	 1.05
                    path	 data_in7	 data_out	 0.83
                    path	 data_in8	 data_out	 0.98
                    path	 data_in9	 data_out	 1.10
                    path	 data_in10	 data_out	 0.88
                    path	 data_in11	 data_out	 1.07
                    path	 sel	 data_out	 3.62
                  </data>
                  <data bit_width="16">
                    path	 data_in0	 data_out	 0.82
                    path	 data_in1	 data_out	 0.56
                    path	 data_in2	 data_out	 0.71
                    path	 data_in3	 data_out	 0.66
                    path	 data_in4	 data_out	 0.44
                    path	 data_in5	 data_out	 0.59
                    path	 data_in6	 data_out	 0.91
                    path	 data_in7	 data_out	 0.69
                    path	 data_in8	 data_out	 0.84
                    path	 data_in9	 data_out	 0.87
                    path	 data_in10	 data_out	 0.65
                    path	 data_in11	 data_out	 0.84
                    path	 sel	 data_out	 3.78
                  </data>
                  <data bit_width="32">
                    path	 data_in0	 data_out	 0.82
                    path	 data_in1	 data_out	 0.56
                    path	 data_in2	 data_out	 0.71
                    path	 data_in3	 data_out	 0.66
                    path	 data_in4	 data_out	 0.44
                    path	 data_in5	 data_out	 0.59
                    path	 data_in6	 data_out	 0.91
                    path	 data_in7	 data_out	 0.69
                    path	 data_in8	 data_out	 0.84
                    path	 data_in9	 data_out	 0.87
                    path	 data_in10	 data_out	 0.65
                    path	 data_in11	 data_out	 0.80
                    path	 sel	 data_out	 3.87
                  </data>
                </max>
                <min>
                  <data bit_width="1">
                  </data>
                  <data bit_width="4">
                    path	 data_in0	 data_out	 1.05
                    path	 data_in1	 data_out	 1.03
                    path	 data_in2	 data_out	 0.87
                    path	 data_in3	 data_out	 1.02
                    path	 data_in4	 data_out	 1.09
                    path	 data_in5	 data_out	 0.83
                    path	 data_in6	 data_out	 0.98
                    path	 data_in7	 data_out	 0.88
                    path	 data_in8	 data_out	 0.62
                    path	 data_in9	 data_out	 0.77
                    path	 data_in10	 data_out	 1.10
                    path	 data_in11	 data_out	 0.92
                    path	 sel	 data_out	 2.80
                  </data>
                  <data bit_width="8">
                    path	 data_in0	 data_out	 1.01
                    path	 data_in1	 data_out	 0.75
                    path	 data_in2	 data_out	 0.90
                    path	 data_in3	 data_out	 0.84
                    path	 data_in4	 data_out	 0.62
                    path	 data_in5	 data_out	 0.77
                    path	 data_in6	 data_out	 1.05
                    path	 data_in7	 data_out	 0.83
                    path	 data_in8	 data_out	 0.98
                    path	 data_in9	 data_out	 1.10
                    path	 data_in10	 data_out	 0.88
                    path	 data_in11	 data_out	 1.07
                    path	 sel	 data_out	 3.62
                  </data>
                  <data bit_width="16">
                    path	 data_in0	 data_out	 0.82
                    path	 data_in1	 data_out	 0.56
                    path	 data_in2	 data_out	 0.71
                    path	 data_in3	 data_out	 0.66
                    path	 data_in4	 data_out	 0.44
                    path	 data_in5	 data_out	 0.59
                    path	 data_in6	 data_out	 0.91
                    path	 data_in7	 data_out	 0.69
                    path	 data_in8	 data_out	 0.84
                    path	 data_in9	 data_out	 0.87
                    path	 data_in10	 data_out	 0.65
                    path	 data_in11	 data_out	 0.84
                    path	 sel	 data_out	 3.78
                  </data>
                  <data bit_width="32">
                    path	 data_in0	 data_out	 0.82
                    path	 data_in1	 data_out	 0.56
                    path	 data_in2	 data_out	 0.71
                    path	 data_in3	 data_out	 0.66
                    path	 data_in4	 data_out	 0.44
                    path	 data_in5	 data_out	 0.59
                    path	 data_in6	 data_out	 0.91
                    path	 data_in7	 data_out	 0.69
                    path	 data_in8	 data_out	 0.84
                    path	 data_in9	 data_out	 0.87
                    path	 data_in10	 data_out	 0.65
                    path	 data_in11	 data_out	 0.80
                    path	 sel	 data_out	 3.87
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1">
                    </data>
                    <data bit_width="4">
                      path	 data_in0	 data_out	 0.82
                      path	 data_in1	 data_out	 0.80
                      path	 data_in2	 data_out	 0.56
                      path	 data_in3	 data_out	 0.71
                      path	 data_in4	 data_out	 0.66
                      path	 data_in5	 data_out	 0.44
                      path	 data_in6	 data_out	 0.59
                      path	 data_in7	 data_out	 0.91
                      path	 data_in8	 data_out	 0.69
                      path	 data_in9	 data_out	 0.84
                      path	 data_in10	 data_out	 0.87
                      path	 data_in11	 data_out	 0.69
                      path	 sel	 data_out	 2.52
                    </data>
                    <data bit_width="8">
                      path	 data_in0	 data_out	 0.82
                      path	 data_in1	 data_out	 0.56
                      path	 data_in2	 data_out	 0.71
                      path	 data_in3	 data_out	 0.66
                      path	 data_in4	 data_out	 0.44
                      path	 data_in5	 data_out	 0.59
                      path	 data_in6	 data_out	 0.91
                      path	 data_in7	 data_out	 0.69
                      path	 data_in8	 data_out	 0.84
                      path	 data_in9	 data_out	 0.87
                      path	 data_in10	 data_out	 0.65
                      path	 data_in11	 data_out	 0.84
                      path	 sel	 data_out	 3.09
                    </data>
                    <data bit_width="16">
                      path	 data_in0	 data_out	 0.82
                      path	 data_in1	 data_out	 0.56
                      path	 data_in2	 data_out	 0.71
                      path	 data_in3	 data_out	 0.66
                      path	 data_in4	 data_out	 0.44
                      path	 data_in5	 data_out	 0.59
                      path	 data_in6	 data_out	 0.91
                      path	 data_in7	 data_out	 0.69
                      path	 data_in8	 data_out	 0.84
                      path	 data_in9	 data_out	 0.87
                      path	 data_in10	 data_out	 0.65
                      path	 data_in11	 data_out	 0.84
                      path	 sel	 data_out	 3.74
                    </data>
                    <data bit_width="32">
                      path	 data_in0	 data_out	 0.82
                      path	 data_in1	 data_out	 0.56
                      path	 data_in2	 data_out	 0.71
                      path	 data_in3	 data_out	 0.66
                      path	 data_in4	 data_out	 0.44
                      path	 data_in5	 data_out	 0.59
                      path	 data_in6	 data_out	 0.91
                      path	 data_in7	 data_out	 0.69
                      path	 data_in8	 data_out	 0.84
                      path	 data_in9	 data_out	 0.87
                      path	 data_in10	 data_out	 0.65
                      path	 data_in11	 data_out	 0.84
                      path	 sel	 data_out	 3.30
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1">
                    </data>
                    <data bit_width="4">
                      path	 data_in0	 data_out	 0.60
                      path	 data_in1	 data_out	 0.64
                      path	 data_in2	 data_out	 0.64
                      path	 data_in3	 data_out	 0.72
                      path	 data_in4	 data_out	 0.48
                      path	 data_in5	 data_out	 0.67
                      path	 data_in6	 data_out	 0.59
                      path	 data_in7	 data_out	 0.57
                      path	 data_in8	 data_out	 0.65
                      path	 data_in9	 data_out	 0.73
                      path	 data_in10	 data_out	 0.72
                      path	 data_in11	 data_out	 0.71
                      path	 sel	 data_out	 0.77
                    </data>
                    <data bit_width="8">
                      path	 data_in0	 data_out	 0.65
                      path	 data_in1	 data_out	 0.65
                      path	 data_in2	 data_out	 0.65
                      path	 data_in3	 data_out	 0.55
                      path	 data_in4	 data_out	 0.66
                      path	 data_in5	 data_out	 0.59
                      path	 data_in6	 data_out	 0.54
                      path	 data_in7	 data_out	 0.45
                      path	 data_in8	 data_out	 0.63
                      path	 data_in9	 data_out	 0.70
                      path	 data_in10	 data_out	 0.73
                      path	 data_in11	 data_out	 0.68
                      path	 sel	 data_out	 0.81
                    </data>
                    <data bit_width="16">
                      path	 data_in0	 data_out	 0.69
                      path	 data_in1	 data_out	 0.74
                      path	 data_in2	 data_out	 0.63
                      path	 data_in3	 data_out	 0.68
                      path	 data_in4	 data_out	 0.72
                      path	 data_in5	 data_out	 0.71
                      path	 data_in6	 data_out	 0.82
                      path	 data_in7	 data_out	 0.67
                      path	 data_in8	 data_out	 0.62
                      path	 data_in9	 data_out	 0.52
                      path	 data_in10	 data_out	 0.62
                      path	 data_in11	 data_out	 0.55
                      path	 sel	 data_out	 0.87
                    </data>
                    <data bit_width="32">
                      path	 data_in0	 data_out	 0.69
                      path	 data_in1	 data_out	 0.78
                      path	 data_in2	 data_out	 0.71
                      path	 data_in3	 data_out	 0.74
                      path	 data_in4	 data_out	 0.73
                      path	 data_in5	 data_out	 0.75
                      path	 data_in6	 data_out	 0.74
                      path	 data_in7	 data_out	 0.79
                      path	 data_in8	 data_out	 0.79
                      path	 data_in9	 data_out	 0.57
                      path	 data_in10	 data_out	 0.57
                      path	 data_in11	 data_out	 0.65
                      path	 sel	 data_out	 0.82
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1">
                    </data>
                    <data bit_width="4">
                      path	 data_in0	 data_out	 1.05
                      path	 data_in1	 data_out	 1.03
                      path	 data_in2	 data_out	 0.87
                      path	 data_in3	 data_out	 1.02
                      path	 data_in4	 data_out	 1.09
                      path	 data_in5	 data_out	 0.83
                      path	 data_in6	 data_out	 0.98
                      path	 data_in7	 data_out	 0.88
                      path	 data_in8	 data_out	 0.62
                      path	 data_in9	 data_out	 0.77
                      path	 data_in10	 data_out	 1.10
                      path	 data_in11	 data_out	 0.92
                      path	 sel	 data_out	 2.80
                    </data>
                    <data bit_width="8">
                      path	 data_in0	 data_out	 1.01
                      path	 data_in1	 data_out	 0.75
                      path	 data_in2	 data_out	 0.90
                      path	 data_in3	 data_out	 0.84
                      path	 data_in4	 data_out	 0.62
                      path	 data_in5	 data_out	 0.77
                      path	 data_in6	 data_out	 1.05
                      path	 data_in7	 data_out	 0.83
                      path	 data_in8	 data_out	 0.98
                      path	 data_in9	 data_out	 1.10
                      path	 data_in10	 data_out	 0.88
                      path	 data_in11	 data_out	 1.07
                      path	 sel	 data_out	 3.62
                    </data>
                    <data bit_width="16">
                      path	 data_in0	 data_out	 0.82
                      path	 data_in1	 data_out	 0.56
                      path	 data_in2	 data_out	 0.71
                      path	 data_in3	 data_out	 0.66
                      path	 data_in4	 data_out	 0.44
                      path	 data_in5	 data_out	 0.59
                      path	 data_in6	 data_out	 0.91
                      path	 data_in7	 data_out	 0.69
                      path	 data_in8	 data_out	 0.84
                      path	 data_in9	 data_out	 0.87
                      path	 data_in10	 data_out	 0.65
                      path	 data_in11	 data_out	 0.84
                      path	 sel	 data_out	 3.78
                    </data>
                    <data bit_width="32">
                      path	 data_in0	 data_out	 0.82
                      path	 data_in1	 data_out	 0.56
                      path	 data_in2	 data_out	 0.71
                      path	 data_in3	 data_out	 0.66
                      path	 data_in4	 data_out	 0.44
                      path	 data_in5	 data_out	 0.59
                      path	 data_in6	 data_out	 0.91
                      path	 data_in7	 data_out	 0.69
                      path	 data_in8	 data_out	 0.84
                      path	 data_in9	 data_out	 0.87
                      path	 data_in10	 data_out	 0.65
                      path	 data_in11	 data_out	 0.80
                      path	 sel	 data_out	 3.87
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="13">
                <max>
                  <data bit_width="1">
                  </data>
                  <data bit_width="4">
                    path	 data_in0	 data_out	 1.05
                    path	 data_in1	 data_out	 0.97
                    path	 data_in2	 data_out	 0.83
                    path	 data_in3	 data_out	 1.02
                    path	 data_in4	 data_out	 1.09
                    path	 data_in5	 data_out	 0.87
                    path	 data_in6	 data_out	 1.02
                    path	 data_in7	 data_out	 0.84
                    path	 data_in8	 data_out	 0.66
                    path	 data_in9	 data_out	 0.77
                    path	 data_in10	 data_out	 0.88
                    path	 data_in11	 data_out	 0.96
                    path	 data_in12	 data_out	 0.92
                    path	 sel	 data_out	 2.80
                  </data>
                  <data bit_width="8">
                    path	 data_in0	 data_out	 1.01
                    path	 data_in1	 data_out	 0.75
                    path	 data_in2	 data_out	 0.90
                    path	 data_in3	 data_out	 0.84
                    path	 data_in4	 data_out	 0.62
                    path	 data_in5	 data_out	 0.77
                    path	 data_in6	 data_out	 1.05
                    path	 data_in7	 data_out	 0.83
                    path	 data_in8	 data_out	 0.98
                    path	 data_in9	 data_out	 0.88
                    path	 data_in10	 data_out	 0.96
                    path	 data_in11	 data_out	 0.88
                    path	 data_in12	 data_out	 1.01
                    path	 sel	 data_out	 3.22
                  </data>
                  <data bit_width="16">
                    path	 data_in0	 data_out	 0.82
                    path	 data_in1	 data_out	 0.56
                    path	 data_in2	 data_out	 0.71
                    path	 data_in3	 data_out	 0.66
                    path	 data_in4	 data_out	 0.44
                    path	 data_in5	 data_out	 0.59
                    path	 data_in6	 data_out	 0.91
                    path	 data_in7	 data_out	 0.69
                    path	 data_in8	 data_out	 0.84
                    path	 data_in9	 data_out	 0.65
                    path	 data_in10	 data_out	 0.73
                    path	 data_in11	 data_out	 0.66
                    path	 data_in12	 data_out	 0.78
                    path	 sel	 data_out	 3.41
                  </data>
                  <data bit_width="32">
                    path	 data_in0	 data_out	 1.01
                    path	 data_in1	 data_out	 0.75
                    path	 data_in2	 data_out	 0.90
                    path	 data_in3	 data_out	 0.84
                    path	 data_in4	 data_out	 0.62
                    path	 data_in5	 data_out	 0.77
                    path	 data_in6	 data_out	 1.10
                    path	 data_in7	 data_out	 0.88
                    path	 data_in8	 data_out	 1.03
                    path	 data_in9	 data_out	 0.83
                    path	 data_in10	 data_out	 0.92
                    path	 data_in11	 data_out	 0.84
                    path	 data_in12	 data_out	 0.97
                    path	 sel	 data_out	 3.80
                  </data>
                </max>
                <min>
                  <data bit_width="1">
                  </data>
                  <data bit_width="4">
                    path	 data_in0	 data_out	 1.05
                    path	 data_in1	 data_out	 0.97
                    path	 data_in2	 data_out	 0.83
                    path	 data_in3	 data_out	 1.02
                    path	 data_in4	 data_out	 1.09
                    path	 data_in5	 data_out	 0.87
                    path	 data_in6	 data_out	 1.02
                    path	 data_in7	 data_out	 0.84
                    path	 data_in8	 data_out	 0.66
                    path	 data_in9	 data_out	 0.77
                    path	 data_in10	 data_out	 0.88
                    path	 data_in11	 data_out	 0.96
                    path	 data_in12	 data_out	 0.92
                    path	 sel	 data_out	 2.80
                  </data>
                  <data bit_width="8">
                    path	 data_in0	 data_out	 1.01
                    path	 data_in1	 data_out	 0.75
                    path	 data_in2	 data_out	 0.90
                    path	 data_in3	 data_out	 0.84
                    path	 data_in4	 data_out	 0.62
                    path	 data_in5	 data_out	 0.77
                    path	 data_in6	 data_out	 1.05
                    path	 data_in7	 data_out	 0.83
                    path	 data_in8	 data_out	 0.98
                    path	 data_in9	 data_out	 0.88
                    path	 data_in10	 data_out	 0.96
                    path	 data_in11	 data_out	 0.88
                    path	 data_in12	 data_out	 1.01
                    path	 sel	 data_out	 3.22
                  </data>
                  <data bit_width="16">
                    path	 data_in0	 data_out	 0.82
                    path	 data_in1	 data_out	 0.56
                    path	 data_in2	 data_out	 0.71
                    path	 data_in3	 data_out	 0.66
                    path	 data_in4	 data_out	 0.44
                    path	 data_in5	 data_out	 0.59
                    path	 data_in6	 data_out	 0.91
                    path	 data_in7	 data_out	 0.69
                    path	 data_in8	 data_out	 0.84
                    path	 data_in9	 data_out	 0.65
                    path	 data_in10	 data_out	 0.73
                    path	 data_in11	 data_out	 0.66
                    path	 data_in12	 data_out	 0.78
                    path	 sel	 data_out	 3.41
                  </data>
                  <data bit_width="32">
                    path	 data_in0	 data_out	 1.01
                    path	 data_in1	 data_out	 0.75
                    path	 data_in2	 data_out	 0.90
                    path	 data_in3	 data_out	 0.84
                    path	 data_in4	 data_out	 0.62
                    path	 data_in5	 data_out	 0.77
                    path	 data_in6	 data_out	 1.10
                    path	 data_in7	 data_out	 0.88
                    path	 data_in8	 data_out	 1.03
                    path	 data_in9	 data_out	 0.83
                    path	 data_in10	 data_out	 0.92
                    path	 data_in11	 data_out	 0.84
                    path	 data_in12	 data_out	 0.97
                    path	 sel	 data_out	 3.80
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1">
                    </data>
                    <data bit_width="4">
                      path	 data_in0	 data_out	 0.82
                      path	 data_in1	 data_out	 0.72
                      path	 data_in2	 data_out	 0.56
                      path	 data_in3	 data_out	 0.71
                      path	 data_in4	 data_out	 0.66
                      path	 data_in5	 data_out	 0.44
                      path	 data_in6	 data_out	 0.59
                      path	 data_in7	 data_out	 0.91
                      path	 data_in8	 data_out	 0.69
                      path	 data_in9	 data_out	 0.84
                      path	 data_in10	 data_out	 0.63
                      path	 data_in11	 data_out	 0.72
                      path	 data_in12	 data_out	 0.68
                      path	 sel	 data_out	 2.24
                    </data>
                    <data bit_width="8">
                      path	 data_in0	 data_out	 0.82
                      path	 data_in1	 data_out	 0.56
                      path	 data_in2	 data_out	 0.71
                      path	 data_in3	 data_out	 0.66
                      path	 data_in4	 data_out	 0.44
                      path	 data_in5	 data_out	 0.59
                      path	 data_in6	 data_out	 0.91
                      path	 data_in7	 data_out	 0.69
                      path	 data_in8	 data_out	 0.84
                      path	 data_in9	 data_out	 0.63
                      path	 data_in10	 data_out	 0.72
                      path	 data_in11	 data_out	 0.64
                      path	 data_in12	 data_out	 0.76
                      path	 sel	 data_out	 2.59
                    </data>
                    <data bit_width="16">
                      path	 data_in0	 data_out	 0.82
                      path	 data_in1	 data_out	 0.56
                      path	 data_in2	 data_out	 0.71
                      path	 data_in3	 data_out	 0.66
                      path	 data_in4	 data_out	 0.44
                      path	 data_in5	 data_out	 0.59
                      path	 data_in6	 data_out	 0.91
                      path	 data_in7	 data_out	 0.69
                      path	 data_in8	 data_out	 0.84
                      path	 data_in9	 data_out	 0.63
                      path	 data_in10	 data_out	 0.72
                      path	 data_in11	 data_out	 0.64
                      path	 data_in12	 data_out	 0.76
                      path	 sel	 data_out	 3.56
                    </data>
                    <data bit_width="32">
                      path	 data_in0	 data_out	 0.82
                      path	 data_in1	 data_out	 0.56
                      path	 data_in2	 data_out	 0.71
                      path	 data_in3	 data_out	 0.66
                      path	 data_in4	 data_out	 0.44
                      path	 data_in5	 data_out	 0.59
                      path	 data_in6	 data_out	 0.91
                      path	 data_in7	 data_out	 0.69
                      path	 data_in8	 data_out	 0.84
                      path	 data_in9	 data_out	 0.63
                      path	 data_in10	 data_out	 0.72
                      path	 data_in11	 data_out	 0.64
                      path	 data_in12	 data_out	 0.76
                      path	 sel	 data_out	 3.14
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1">
                    </data>
                    <data bit_width="4">
                      path	 data_in0	 data_out	 0.76
                      path	 data_in1	 data_out	 0.65
                      path	 data_in2	 data_out	 0.75
                      path	 data_in3	 data_out	 0.84
                      path	 data_in4	 data_out	 0.76
                      path	 data_in5	 data_out	 0.83
                      path	 data_in6	 data_out	 0.74
                      path	 data_in7	 data_out	 0.68
                      path	 data_in8	 data_out	 0.72
                      path	 data_in9	 data_out	 0.68
                      path	 data_in10	 data_out	 0.83
                      path	 data_in11	 data_out	 0.86
                      path	 data_in12	 data_out	 0.46
                      path	 sel	 data_out	 0.88
                    </data>
                    <data bit_width="8">
                      path	 data_in0	 data_out	 0.86
                      path	 data_in1	 data_out	 0.65
                      path	 data_in2	 data_out	 0.70
                      path	 data_in3	 data_out	 0.69
                      path	 data_in4	 data_out	 0.89
                      path	 data_in5	 data_out	 0.63
                      path	 data_in6	 data_out	 0.77
                      path	 data_in7	 data_out	 0.81
                      path	 data_in8	 data_out	 0.76
                      path	 data_in9	 data_out	 0.87
                      path	 data_in10	 data_out	 0.82
                      path	 data_in11	 data_out	 0.87
                      path	 data_in12	 data_out	 0.56
                      path	 sel	 data_out	 0.95
                    </data>
                    <data bit_width="16">
                      path	 data_in0	 data_out	 0.90
                      path	 data_in1	 data_out	 0.80
                      path	 data_in2	 data_out	 0.93
                      path	 data_in3	 data_out	 0.90
                      path	 data_in4	 data_out	 0.90
                      path	 data_in5	 data_out	 0.86
                      path	 data_in6	 data_out	 0.72
                      path	 data_in7	 data_out	 0.73
                      path	 data_in8	 data_out	 0.83
                      path	 data_in9	 data_out	 0.80
                      path	 data_in10	 data_out	 0.78
                      path	 data_in11	 data_out	 0.72
                      path	 data_in12	 data_out	 0.51
                      path	 sel	 data_out	 0.99
                    </data>
                    <data bit_width="32">
                      path	 data_in0	 data_out	 1.01
                      path	 data_in1	 data_out	 1.02
                      path	 data_in2	 data_out	 1.01
                      path	 data_in3	 data_out	 1.02
                      path	 data_in4	 data_out	 1.01
                      path	 data_in5	 data_out	 1.02
                      path	 data_in6	 data_out	 0.94
                      path	 data_in7	 data_out	 0.95
                      path	 data_in8	 data_out	 0.84
                      path	 data_in9	 data_out	 0.80
                      path	 data_in10	 data_out	 0.88
                      path	 data_in11	 data_out	 0.80
                      path	 data_in12	 data_out	 0.60
                      path	 sel	 data_out	 1.04
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1">
                    </data>
                    <data bit_width="4">
                      path	 data_in0	 data_out	 1.05
                      path	 data_in1	 data_out	 0.97
                      path	 data_in2	 data_out	 0.83
                      path	 data_in3	 data_out	 1.02
                      path	 data_in4	 data_out	 1.09
                      path	 data_in5	 data_out	 0.87
                      path	 data_in6	 data_out	 1.02
                      path	 data_in7	 data_out	 0.84
                      path	 data_in8	 data_out	 0.66
                      path	 data_in9	 data_out	 0.77
                      path	 data_in10	 data_out	 0.88
                      path	 data_in11	 data_out	 0.96
                      path	 data_in12	 data_out	 0.92
                      path	 sel	 data_out	 2.80
                    </data>
                    <data bit_width="8">
                      path	 data_in0	 data_out	 1.01
                      path	 data_in1	 data_out	 0.75
                      path	 data_in2	 data_out	 0.90
                      path	 data_in3	 data_out	 0.84
                      path	 data_in4	 data_out	 0.62
                      path	 data_in5	 data_out	 0.77
                      path	 data_in6	 data_out	 1.05
                      path	 data_in7	 data_out	 0.83
                      path	 data_in8	 data_out	 0.98
                      path	 data_in9	 data_out	 0.88
                      path	 data_in10	 data_out	 0.96
                      path	 data_in11	 data_out	 0.88
                      path	 data_in12	 data_out	 1.01
                      path	 sel	 data_out	 3.22
                    </data>
                    <data bit_width="16">
                      path	 data_in0	 data_out	 0.82
                      path	 data_in1	 data_out	 0.56
                      path	 data_in2	 data_out	 0.71
                      path	 data_in3	 data_out	 0.66
                      path	 data_in4	 data_out	 0.44
                      path	 data_in5	 data_out	 0.59
                      path	 data_in6	 data_out	 0.91
                      path	 data_in7	 data_out	 0.69
                      path	 data_in8	 data_out	 0.84
                      path	 data_in9	 data_out	 0.65
                      path	 data_in10	 data_out	 0.73
                      path	 data_in11	 data_out	 0.66
                      path	 data_in12	 data_out	 0.78
                      path	 sel	 data_out	 3.41
                    </data>
                    <data bit_width="32">
                      path	 data_in0	 data_out	 1.01
                      path	 data_in1	 data_out	 0.75
                      path	 data_in2	 data_out	 0.90
                      path	 data_in3	 data_out	 0.84
                      path	 data_in4	 data_out	 0.62
                      path	 data_in5	 data_out	 0.77
                      path	 data_in6	 data_out	 1.10
                      path	 data_in7	 data_out	 0.88
                      path	 data_in8	 data_out	 1.03
                      path	 data_in9	 data_out	 0.83
                      path	 data_in10	 data_out	 0.92
                      path	 data_in11	 data_out	 0.84
                      path	 data_in12	 data_out	 0.97
                      path	 sel	 data_out	 3.80
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="14">
                <max>
                  <data bit_width="1">
                  </data>
                  <data bit_width="4">
                    path	 data_in0	 data_out	 0.87
                    path	 data_in1	 data_out	 0.41
                    path	 data_in2	 data_out	 0.73
                    path	 data_in3	 data_out	 0.65
                    path	 data_in4	 data_out	 0.95
                    path	 data_in5	 data_out	 0.91
                    path	 data_in6	 data_out	 0.94
                    path	 data_in7	 data_out	 0.98
                    path	 data_in8	 data_out	 0.83
                    path	 data_in9	 data_out	 0.64
                    path	 data_in10	 data_out	 0.76
                    path	 data_in11	 data_out	 0.47
                    path	 data_in12	 data_out	 0.39
                    path	 data_in13	 data_out	 0.50
                    path	 sel	 data_out	 2.07
                  </data>
                  <data bit_width="8">
                    path	 data_in0	 data_out	 0.91
                    path	 data_in1	 data_out	 0.69
                    path	 data_in2	 data_out	 0.72
                    path	 data_in3	 data_out	 0.76
                    path	 data_in4	 data_out	 0.90
                    path	 data_in5	 data_out	 0.98
                    path	 data_in6	 data_out	 1.00
                    path	 data_in7	 data_out	 0.88
                    path	 data_in8	 data_out	 0.73
                    path	 data_in9	 data_out	 0.95
                    path	 data_in10	 data_out	 0.88
                    path	 data_in11	 data_out	 0.90
                    path	 data_in12	 data_out	 0.66
                    path	 data_in13	 data_out	 0.69
                    path	 sel	 data_out	 2.83
                  </data>
                  <data bit_width="16">
                    path	 data_in0	 data_out	 0.70
                    path	 data_in1	 data_out	 0.69
                    path	 data_in2	 data_out	 0.64
                    path	 data_in3	 data_out	 0.73
                    path	 data_in4	 data_out	 0.77
                    path	 data_in5	 data_out	 0.62
                    path	 data_in6	 data_out	 0.60
                    path	 data_in7	 data_out	 0.65
                    path	 data_in8	 data_out	 0.51
                    path	 data_in9	 data_out	 0.59
                    path	 data_in10	 data_out	 0.31
                    path	 data_in11	 data_out	 0.23
                    path	 data_in12	 data_out	 0.43
                    path	 data_in13	 data_out	 0.50
                    path	 sel	 data_out	 2.35
                  </data>
                  <data bit_width="32">
                    path	 data_in0	 data_out	 0.70
                    path	 data_in1	 data_out	 0.69
                    path	 data_in2	 data_out	 0.64
                    path	 data_in3	 data_out	 0.73
                    path	 data_in4	 data_out	 0.77
                    path	 data_in5	 data_out	 0.62
                    path	 data_in6	 data_out	 0.60
                    path	 data_in7	 data_out	 0.63
                    path	 data_in8	 data_out	 0.48
                    path	 data_in9	 data_out	 0.56
                    path	 data_in10	 data_out	 0.28
                    path	 data_in11	 data_out	 0.20
                    path	 data_in12	 data_out	 0.30
                    path	 data_in13	 data_out	 0.27
                    path	 sel	 data_out	 2.78
                  </data>
                </max>
                <min>
                  <data bit_width="1">
                  </data>
                  <data bit_width="4">
                    path	 data_in0	 data_out	 0.87
                    path	 data_in1	 data_out	 0.41
                    path	 data_in2	 data_out	 0.73
                    path	 data_in3	 data_out	 0.65
                    path	 data_in4	 data_out	 0.95
                    path	 data_in5	 data_out	 0.91
                    path	 data_in6	 data_out	 0.94
                    path	 data_in7	 data_out	 0.98
                    path	 data_in8	 data_out	 0.83
                    path	 data_in9	 data_out	 0.64
                    path	 data_in10	 data_out	 0.76
                    path	 data_in11	 data_out	 0.47
                    path	 data_in12	 data_out	 0.39
                    path	 data_in13	 data_out	 0.50
                    path	 sel	 data_out	 2.07
                  </data>
                  <data bit_width="8">
                    path	 data_in0	 data_out	 0.91
                    path	 data_in1	 data_out	 0.69
                    path	 data_in2	 data_out	 0.72
                    path	 data_in3	 data_out	 0.76
                    path	 data_in4	 data_out	 0.90
                    path	 data_in5	 data_out	 0.98
                    path	 data_in6	 data_out	 1.00
                    path	 data_in7	 data_out	 0.88
                    path	 data_in8	 data_out	 0.73
                    path	 data_in9	 data_out	 0.95
                    path	 data_in10	 data_out	 0.88
                    path	 data_in11	 data_out	 0.90
                    path	 data_in12	 data_out	 0.66
                    path	 data_in13	 data_out	 0.69
                    path	 sel	 data_out	 2.83
                  </data>
                  <data bit_width="16">
                    path	 data_in0	 data_out	 0.70
                    path	 data_in1	 data_out	 0.69
                    path	 data_in2	 data_out	 0.64
                    path	 data_in3	 data_out	 0.73
                    path	 data_in4	 data_out	 0.77
                    path	 data_in5	 data_out	 0.62
                    path	 data_in6	 data_out	 0.60
                    path	 data_in7	 data_out	 0.65
                    path	 data_in8	 data_out	 0.51
                    path	 data_in9	 data_out	 0.59
                    path	 data_in10	 data_out	 0.31
                    path	 data_in11	 data_out	 0.23
                    path	 data_in12	 data_out	 0.43
                    path	 data_in13	 data_out	 0.50
                    path	 sel	 data_out	 2.35
                  </data>
                  <data bit_width="32">
                    path	 data_in0	 data_out	 0.70
                    path	 data_in1	 data_out	 0.69
                    path	 data_in2	 data_out	 0.64
                    path	 data_in3	 data_out	 0.73
                    path	 data_in4	 data_out	 0.77
                    path	 data_in5	 data_out	 0.62
                    path	 data_in6	 data_out	 0.60
                    path	 data_in7	 data_out	 0.63
                    path	 data_in8	 data_out	 0.48
                    path	 data_in9	 data_out	 0.56
                    path	 data_in10	 data_out	 0.28
                    path	 data_in11	 data_out	 0.20
                    path	 data_in12	 data_out	 0.30
                    path	 data_in13	 data_out	 0.27
                    path	 sel	 data_out	 2.78
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1">
                    </data>
                    <data bit_width="4">
                      path	 data_in0	 data_out	 0.53
                      path	 data_in1	 data_out	 0.22
                      path	 data_in2	 data_out	 0.54
                      path	 data_in3	 data_out	 0.47
                      path	 data_in4	 data_out	 0.60
                      path	 data_in5	 data_out	 0.56
                      path	 data_in6	 data_out	 0.62
                      path	 data_in7	 data_out	 0.60
                      path	 data_in8	 data_out	 0.63
                      path	 data_in9	 data_out	 0.48
                      path	 data_in10	 data_out	 0.56
                      path	 data_in11	 data_out	 0.28
                      path	 data_in12	 data_out	 0.20
                      path	 data_in13	 data_out	 0.35
                      path	 sel	 data_out	 2.08
                    </data>
                    <data bit_width="8">
                      path	 data_in0	 data_out	 0.53
                      path	 data_in1	 data_out	 0.54
                      path	 data_in2	 data_out	 0.47
                      path	 data_in3	 data_out	 0.60
                      path	 data_in4	 data_out	 0.56
                      path	 data_in5	 data_out	 0.62
                      path	 data_in6	 data_out	 0.60
                      path	 data_in7	 data_out	 0.63
                      path	 data_in8	 data_out	 0.48
                      path	 data_in9	 data_out	 0.56
                      path	 data_in10	 data_out	 0.28
                      path	 data_in11	 data_out	 0.20
                      path	 data_in12	 data_out	 0.30
                      path	 data_in13	 data_out	 0.27
                      path	 sel	 data_out	 2.61
                    </data>
                    <data bit_width="16">
                      path	 data_in0	 data_out	 0.53
                      path	 data_in1	 data_out	 0.54
                      path	 data_in2	 data_out	 0.47
                      path	 data_in3	 data_out	 0.60
                      path	 data_in4	 data_out	 0.56
                      path	 data_in5	 data_out	 0.62
                      path	 data_in6	 data_out	 0.60
                      path	 data_in7	 data_out	 0.63
                      path	 data_in8	 data_out	 0.48
                      path	 data_in9	 data_out	 0.56
                      path	 data_in10	 data_out	 0.28
                      path	 data_in11	 data_out	 0.20
                      path	 data_in12	 data_out	 0.30
                      path	 data_in13	 data_out	 0.27
                      path	 sel	 data_out	 3.04
                    </data>
                    <data bit_width="32">
                      path	 data_in0	 data_out	 0.53
                      path	 data_in1	 data_out	 0.54
                      path	 data_in2	 data_out	 0.47
                      path	 data_in3	 data_out	 0.60
                      path	 data_in4	 data_out	 0.56
                      path	 data_in5	 data_out	 0.62
                      path	 data_in6	 data_out	 0.60
                      path	 data_in7	 data_out	 0.63
                      path	 data_in8	 data_out	 0.48
                      path	 data_in9	 data_out	 0.56
                      path	 data_in10	 data_out	 0.28
                      path	 data_in11	 data_out	 0.20
                      path	 data_in12	 data_out	 0.30
                      path	 data_in13	 data_out	 0.27
                      path	 sel	 data_out	 2.99
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1">
                    </data>
                    <data bit_width="4">
                      path	 data_in0	 data_out	 0.63
                      path	 data_in1	 data_out	 0.77
                      path	 data_in2	 data_out	 0.55
                      path	 data_in3	 data_out	 0.71
                      path	 data_in4	 data_out	 0.66
                      path	 data_in5	 data_out	 0.64
                      path	 data_in6	 data_out	 0.60
                      path	 data_in7	 data_out	 0.62
                      path	 data_in8	 data_out	 0.61
                      path	 data_in9	 data_out	 0.67
                      path	 data_in10	 data_out	 0.69
                      path	 data_in11	 data_out	 0.64
                      path	 data_in12	 data_out	 0.58
                      path	 data_in13	 data_out	 0.65
                      path	 sel	 data_out	 0.80
                    </data>
                    <data bit_width="8">
                      path	 data_in0	 data_out	 0.65
                      path	 data_in1	 data_out	 0.71
                      path	 data_in2	 data_out	 0.55
                      path	 data_in3	 data_out	 0.62
                      path	 data_in4	 data_out	 0.65
                      path	 data_in5	 data_out	 0.76
                      path	 data_in6	 data_out	 0.62
                      path	 data_in7	 data_out	 0.65
                      path	 data_in8	 data_out	 0.69
                      path	 data_in9	 data_out	 0.75
                      path	 data_in10	 data_out	 0.78
                      path	 data_in11	 data_out	 0.53
                      path	 data_in12	 data_out	 0.78
                      path	 data_in13	 data_out	 0.54
                      path	 sel	 data_out	 0.79
                    </data>
                    <data bit_width="16">
                      path	 data_in0	 data_out	 0.92
                      path	 data_in1	 data_out	 0.93
                      path	 data_in2	 data_out	 0.95
                      path	 data_in3	 data_out	 0.92
                      path	 data_in4	 data_out	 0.96
                      path	 data_in5	 data_out	 0.93
                      path	 data_in6	 data_out	 0.93
                      path	 data_in7	 data_out	 0.75
                      path	 data_in8	 data_out	 0.85
                      path	 data_in9	 data_out	 0.84
                      path	 data_in10	 data_out	 0.82
                      path	 data_in11	 data_out	 0.80
                      path	 data_in12	 data_out	 0.83
                      path	 data_in13	 data_out	 0.53
                      path	 sel	 data_out	 0.96
                    </data>
                    <data bit_width="32">
                      path	 data_in0	 data_out	 0.83
                      path	 data_in1	 data_out	 0.84
                      path	 data_in2	 data_out	 0.75
                      path	 data_in3	 data_out	 0.88
                      path	 data_in4	 data_out	 0.83
                      path	 data_in5	 data_out	 0.82
                      path	 data_in6	 data_out	 0.69
                      path	 data_in7	 data_out	 0.76
                      path	 data_in8	 data_out	 0.66
                      path	 data_in9	 data_out	 0.89
                      path	 data_in10	 data_out	 0.81
                      path	 data_in11	 data_out	 0.70
                      path	 data_in12	 data_out	 0.82
                      path	 data_in13	 data_out	 0.54
                      path	 sel	 data_out	 0.89
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1">
                    </data>
                    <data bit_width="4">
                      path	 data_in0	 data_out	 0.87
                      path	 data_in1	 data_out	 0.41
                      path	 data_in2	 data_out	 0.73
                      path	 data_in3	 data_out	 0.65
                      path	 data_in4	 data_out	 0.95
                      path	 data_in5	 data_out	 0.91
                      path	 data_in6	 data_out	 0.94
                      path	 data_in7	 data_out	 0.98
                      path	 data_in8	 data_out	 0.83
                      path	 data_in9	 data_out	 0.64
                      path	 data_in10	 data_out	 0.76
                      path	 data_in11	 data_out	 0.47
                      path	 data_in12	 data_out	 0.39
                      path	 data_in13	 data_out	 0.50
                      path	 sel	 data_out	 2.07
                    </data>
                    <data bit_width="8">
                      path	 data_in0	 data_out	 0.91
                      path	 data_in1	 data_out	 0.69
                      path	 data_in2	 data_out	 0.72
                      path	 data_in3	 data_out	 0.76
                      path	 data_in4	 data_out	 0.90
                      path	 data_in5	 data_out	 0.98
                      path	 data_in6	 data_out	 1.00
                      path	 data_in7	 data_out	 0.88
                      path	 data_in8	 data_out	 0.73
                      path	 data_in9	 data_out	 0.95
                      path	 data_in10	 data_out	 0.88
                      path	 data_in11	 data_out	 0.90
                      path	 data_in12	 data_out	 0.66
                      path	 data_in13	 data_out	 0.69
                      path	 sel	 data_out	 2.83
                    </data>
                    <data bit_width="16">
                      path	 data_in0	 data_out	 0.70
                      path	 data_in1	 data_out	 0.69
                      path	 data_in2	 data_out	 0.64
                      path	 data_in3	 data_out	 0.73
                      path	 data_in4	 data_out	 0.77
                      path	 data_in5	 data_out	 0.62
                      path	 data_in6	 data_out	 0.60
                      path	 data_in7	 data_out	 0.65
                      path	 data_in8	 data_out	 0.51
                      path	 data_in9	 data_out	 0.59
                      path	 data_in10	 data_out	 0.31
                      path	 data_in11	 data_out	 0.23
                      path	 data_in12	 data_out	 0.43
                      path	 data_in13	 data_out	 0.50
                      path	 sel	 data_out	 2.35
                    </data>
                    <data bit_width="32">
                      path	 data_in0	 data_out	 0.70
                      path	 data_in1	 data_out	 0.69
                      path	 data_in2	 data_out	 0.64
                      path	 data_in3	 data_out	 0.73
                      path	 data_in4	 data_out	 0.77
                      path	 data_in5	 data_out	 0.62
                      path	 data_in6	 data_out	 0.60
                      path	 data_in7	 data_out	 0.63
                      path	 data_in8	 data_out	 0.48
                      path	 data_in9	 data_out	 0.56
                      path	 data_in10	 data_out	 0.28
                      path	 data_in11	 data_out	 0.20
                      path	 data_in12	 data_out	 0.30
                      path	 data_in13	 data_out	 0.27
                      path	 sel	 data_out	 2.78
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="15">
                <max>
                  <data bit_width="1">
                  </data>
                  <data bit_width="4">
                    path	 data_in0	 data_out	 0.73
                    path	 data_in1	 data_out	 0.66
                    path	 data_in2	 data_out	 0.88
                    path	 data_in3	 data_out	 0.95
                    path	 data_in4	 data_out	 1.30
                    path	 data_in5	 data_out	 1.31
                    path	 data_in6	 data_out	 0.97
                    path	 data_in7	 data_out	 1.08
                    path	 data_in8	 data_out	 0.69
                    path	 data_in9	 data_out	 0.72
                    path	 data_in10	 data_out	 0.90
                    path	 data_in11	 data_out	 0.91
                    path	 data_in12	 data_out	 0.88
                    path	 data_in13	 data_out	 0.90
                    path	 data_in14	 data_out	 0.69
                    path	 sel	 data_out	 2.52
                  </data>
                  <data bit_width="8">
                    path	 data_in0	 data_out	 0.88
                    path	 data_in1	 data_out	 0.73
                    path	 data_in2	 data_out	 0.95
                    path	 data_in3	 data_out	 1.15
                    path	 data_in4	 data_out	 1.16
                    path	 data_in5	 data_out	 0.85
                    path	 data_in6	 data_out	 0.93
                    path	 data_in7	 data_out	 0.69
                    path	 data_in8	 data_out	 0.72
                    path	 data_in9	 data_out	 0.90
                    path	 data_in10	 data_out	 0.91
                    path	 data_in11	 data_out	 0.88
                    path	 data_in12	 data_out	 0.90
                    path	 data_in13	 data_out	 0.66
                    path	 data_in14	 data_out	 0.69
                    path	 sel	 data_out	 3.59
                  </data>
                  <data bit_width="16">
                    path	 data_in0	 data_out	 0.70
                    path	 data_in1	 data_out	 0.51
                    path	 data_in2	 data_out	 0.60
                    path	 data_in3	 data_out	 0.56
                    path	 data_in4	 data_out	 0.53
                    path	 data_in5	 data_out	 0.43
                    path	 data_in6	 data_out	 0.50
                    path	 data_in7	 data_out	 0.74
                    path	 data_in8	 data_out	 0.69
                    path	 data_in9	 data_out	 0.77
                    path	 data_in10	 data_out	 0.73
                    path	 data_in11	 data_out	 1.11
                    path	 data_in12	 data_out	 0.98
                    path	 data_in13	 data_out	 0.80
                    path	 data_in14	 data_out	 0.72
                    path	 sel	 data_out	 4.37
                  </data>
                  <data bit_width="32">
                    path	 data_in0	 data_out	 0.67
                    path	 data_in1	 data_out	 0.48
                    path	 data_in2	 data_out	 0.56
                    path	 data_in3	 data_out	 0.28
                    path	 data_in4	 data_out	 0.28
                    path	 data_in5	 data_out	 0.38
                    path	 data_in6	 data_out	 0.46
                    path	 data_in7	 data_out	 0.64
                    path	 data_in8	 data_out	 0.69
                    path	 data_in9	 data_out	 0.69
                    path	 data_in10	 data_out	 0.72
                    path	 data_in11	 data_out	 0.60
                    path	 data_in12	 data_out	 0.58
                    path	 data_in13	 data_out	 0.62
                    path	 data_in14	 data_out	 0.61
                    path	 sel	 data_out	 3.78
                  </data>
                </max>
                <min>
                  <data bit_width="1">
                  </data>
                  <data bit_width="4">
                    path	 data_in0	 data_out	 0.73
                    path	 data_in1	 data_out	 0.66
                    path	 data_in2	 data_out	 0.88
                    path	 data_in3	 data_out	 0.95
                    path	 data_in4	 data_out	 1.30
                    path	 data_in5	 data_out	 1.31
                    path	 data_in6	 data_out	 0.97
                    path	 data_in7	 data_out	 1.08
                    path	 data_in8	 data_out	 0.69
                    path	 data_in9	 data_out	 0.72
                    path	 data_in10	 data_out	 0.90
                    path	 data_in11	 data_out	 0.91
                    path	 data_in12	 data_out	 0.88
                    path	 data_in13	 data_out	 0.90
                    path	 data_in14	 data_out	 0.69
                    path	 sel	 data_out	 2.52
                  </data>
                  <data bit_width="8">
                    path	 data_in0	 data_out	 0.88
                    path	 data_in1	 data_out	 0.73
                    path	 data_in2	 data_out	 0.95
                    path	 data_in3	 data_out	 1.15
                    path	 data_in4	 data_out	 1.16
                    path	 data_in5	 data_out	 0.85
                    path	 data_in6	 data_out	 0.93
                    path	 data_in7	 data_out	 0.69
                    path	 data_in8	 data_out	 0.72
                    path	 data_in9	 data_out	 0.90
                    path	 data_in10	 data_out	 0.91
                    path	 data_in11	 data_out	 0.88
                    path	 data_in12	 data_out	 0.90
                    path	 data_in13	 data_out	 0.66
                    path	 data_in14	 data_out	 0.69
                    path	 sel	 data_out	 3.59
                  </data>
                  <data bit_width="16">
                    path	 data_in0	 data_out	 0.70
                    path	 data_in1	 data_out	 0.51
                    path	 data_in2	 data_out	 0.60
                    path	 data_in3	 data_out	 0.56
                    path	 data_in4	 data_out	 0.53
                    path	 data_in5	 data_out	 0.43
                    path	 data_in6	 data_out	 0.50
                    path	 data_in7	 data_out	 0.74
                    path	 data_in8	 data_out	 0.69
                    path	 data_in9	 data_out	 0.77
                    path	 data_in10	 data_out	 0.73
                    path	 data_in11	 data_out	 1.11
                    path	 data_in12	 data_out	 0.98
                    path	 data_in13	 data_out	 0.80
                    path	 data_in14	 data_out	 0.72
                    path	 sel	 data_out	 4.37
                  </data>
                  <data bit_width="32">
                    path	 data_in0	 data_out	 0.67
                    path	 data_in1	 data_out	 0.48
                    path	 data_in2	 data_out	 0.56
                    path	 data_in3	 data_out	 0.28
                    path	 data_in4	 data_out	 0.28
                    path	 data_in5	 data_out	 0.38
                    path	 data_in6	 data_out	 0.46
                    path	 data_in7	 data_out	 0.64
                    path	 data_in8	 data_out	 0.69
                    path	 data_in9	 data_out	 0.69
                    path	 data_in10	 data_out	 0.72
                    path	 data_in11	 data_out	 0.60
                    path	 data_in12	 data_out	 0.58
                    path	 data_in13	 data_out	 0.62
                    path	 data_in14	 data_out	 0.61
                    path	 sel	 data_out	 3.78
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1">
                    </data>
                    <data bit_width="4">
                      path	 data_in0	 data_out	 0.67
                      path	 data_in1	 data_out	 0.60
                      path	 data_in2	 data_out	 0.48
                      path	 data_in3	 data_out	 0.56
                      path	 data_in4	 data_out	 0.28
                      path	 data_in5	 data_out	 0.20
                      path	 data_in6	 data_out	 0.30
                      path	 data_in7	 data_out	 0.22
                      path	 data_in8	 data_out	 0.54
                      path	 data_in9	 data_out	 0.47
                      path	 data_in10	 data_out	 0.57
                      path	 data_in11	 data_out	 0.52
                      path	 data_in12	 data_out	 0.60
                      path	 data_in13	 data_out	 0.56
                      path	 data_in14	 data_out	 0.67
                      path	 sel	 data_out	 2.54
                    </data>
                    <data bit_width="8">
                      path	 data_in0	 data_out	 0.67
                      path	 data_in1	 data_out	 0.48
                      path	 data_in2	 data_out	 0.56
                      path	 data_in3	 data_out	 0.28
                      path	 data_in4	 data_out	 0.20
                      path	 data_in5	 data_out	 0.30
                      path	 data_in6	 data_out	 0.22
                      path	 data_in7	 data_out	 0.54
                      path	 data_in8	 data_out	 0.47
                      path	 data_in9	 data_out	 0.57
                      path	 data_in10	 data_out	 0.52
                      path	 data_in11	 data_out	 0.60
                      path	 data_in12	 data_out	 0.56
                      path	 data_in13	 data_out	 0.62
                      path	 data_in14	 data_out	 0.61
                      path	 sel	 data_out	 2.81
                    </data>
                    <data bit_width="16">
                      path	 data_in0	 data_out	 0.67
                      path	 data_in1	 data_out	 0.48
                      path	 data_in2	 data_out	 0.56
                      path	 data_in3	 data_out	 0.28
                      path	 data_in4	 data_out	 0.20
                      path	 data_in5	 data_out	 0.30
                      path	 data_in6	 data_out	 0.22
                      path	 data_in7	 data_out	 0.54
                      path	 data_in8	 data_out	 0.47
                      path	 data_in9	 data_out	 0.57
                      path	 data_in10	 data_out	 0.52
                      path	 data_in11	 data_out	 0.60
                      path	 data_in12	 data_out	 0.56
                      path	 data_in13	 data_out	 0.62
                      path	 data_in14	 data_out	 0.61
                      path	 sel	 data_out	 3.58
                    </data>
                    <data bit_width="32">
                      path	 data_in0	 data_out	 0.67
                      path	 data_in1	 data_out	 0.48
                      path	 data_in2	 data_out	 0.56
                      path	 data_in3	 data_out	 0.28
                      path	 data_in4	 data_out	 0.20
                      path	 data_in5	 data_out	 0.30
                      path	 data_in6	 data_out	 0.22
                      path	 data_in7	 data_out	 0.54
                      path	 data_in8	 data_out	 0.47
                      path	 data_in9	 data_out	 0.57
                      path	 data_in10	 data_out	 0.52
                      path	 data_in11	 data_out	 0.60
                      path	 data_in12	 data_out	 0.56
                      path	 data_in13	 data_out	 0.62
                      path	 data_in14	 data_out	 0.61
                      path	 sel	 data_out	 3.26
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1">
                    </data>
                    <data bit_width="4">
                      path	 data_in0	 data_out	 0.71
                      path	 data_in1	 data_out	 0.80
                      path	 data_in2	 data_out	 0.77
                      path	 data_in3	 data_out	 0.82
                      path	 data_in4	 data_out	 0.86
                      path	 data_in5	 data_out	 0.75
                      path	 data_in6	 data_out	 0.89
                      path	 data_in7	 data_out	 0.90
                      path	 data_in8	 data_out	 0.89
                      path	 data_in9	 data_out	 0.88
                      path	 data_in10	 data_out	 0.87
                      path	 data_in11	 data_out	 0.77
                      path	 data_in12	 data_out	 0.85
                      path	 data_in13	 data_out	 0.90
                      path	 data_in14	 data_out	 0.52
                      path	 sel	 data_out	 0.91
                    </data>
                    <data bit_width="8">
                      path	 data_in0	 data_out	 0.84
                      path	 data_in1	 data_out	 0.81
                      path	 data_in2	 data_out	 0.76
                      path	 data_in3	 data_out	 0.96
                      path	 data_in4	 data_out	 0.86
                      path	 data_in5	 data_out	 0.73
                      path	 data_in6	 data_out	 0.98
                      path	 data_in7	 data_out	 0.85
                      path	 data_in8	 data_out	 0.92
                      path	 data_in9	 data_out	 0.79
                      path	 data_in10	 data_out	 0.98
                      path	 data_in11	 data_out	 0.87
                      path	 data_in12	 data_out	 0.99
                      path	 data_in13	 data_out	 0.98
                      path	 data_in14	 data_out	 0.55
                      path	 sel	 data_out	 0.99
                    </data>
                    <data bit_width="16">
                      path	 data_in0	 data_out	 0.94
                      path	 data_in1	 data_out	 0.78
                      path	 data_in2	 data_out	 0.90
                      path	 data_in3	 data_out	 0.86
                      path	 data_in4	 data_out	 0.82
                      path	 data_in5	 data_out	 0.85
                      path	 data_in6	 data_out	 0.76
                      path	 data_in7	 data_out	 0.88
                      path	 data_in8	 data_out	 0.66
                      path	 data_in9	 data_out	 0.79
                      path	 data_in10	 data_out	 0.68
                      path	 data_in11	 data_out	 0.82
                      path	 data_in12	 data_out	 0.82
                      path	 data_in13	 data_out	 0.84
                      path	 data_in14	 data_out	 0.54
                      path	 sel	 data_out	 0.96
                    </data>
                    <data bit_width="32">
                      path	 data_in0	 data_out	 0.99
                      path	 data_in1	 data_out	 0.98
                      path	 data_in2	 data_out	 0.98
                      path	 data_in3	 data_out	 0.84
                      path	 data_in4	 data_out	 0.80
                      path	 data_in5	 data_out	 0.91
                      path	 data_in6	 data_out	 0.94
                      path	 data_in7	 data_out	 0.88
                      path	 data_in8	 data_out	 0.87
                      path	 data_in9	 data_out	 0.92
                      path	 data_in10	 data_out	 0.96
                      path	 data_in11	 data_out	 0.81
                      path	 data_in12	 data_out	 0.81
                      path	 data_in13	 data_out	 0.87
                      path	 data_in14	 data_out	 0.81
                      path	 sel	 data_out	 1.01
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1">
                    </data>
                    <data bit_width="4">
                      path	 data_in0	 data_out	 0.73
                      path	 data_in1	 data_out	 0.66
                      path	 data_in2	 data_out	 0.88
                      path	 data_in3	 data_out	 0.95
                      path	 data_in4	 data_out	 1.30
                      path	 data_in5	 data_out	 1.31
                      path	 data_in6	 data_out	 0.97
                      path	 data_in7	 data_out	 1.08
                      path	 data_in8	 data_out	 0.69
                      path	 data_in9	 data_out	 0.72
                      path	 data_in10	 data_out	 0.90
                      path	 data_in11	 data_out	 0.91
                      path	 data_in12	 data_out	 0.88
                      path	 data_in13	 data_out	 0.90
                      path	 data_in14	 data_out	 0.69
                      path	 sel	 data_out	 2.52
                    </data>
                    <data bit_width="8">
                      path	 data_in0	 data_out	 0.88
                      path	 data_in1	 data_out	 0.73
                      path	 data_in2	 data_out	 0.95
                      path	 data_in3	 data_out	 1.15
                      path	 data_in4	 data_out	 1.16
                      path	 data_in5	 data_out	 0.85
                      path	 data_in6	 data_out	 0.93
                      path	 data_in7	 data_out	 0.69
                      path	 data_in8	 data_out	 0.72
                      path	 data_in9	 data_out	 0.90
                      path	 data_in10	 data_out	 0.91
                      path	 data_in11	 data_out	 0.88
                      path	 data_in12	 data_out	 0.90
                      path	 data_in13	 data_out	 0.66
                      path	 data_in14	 data_out	 0.69
                      path	 sel	 data_out	 3.59
                    </data>
                    <data bit_width="16">
                      path	 data_in0	 data_out	 0.70
                      path	 data_in1	 data_out	 0.51
                      path	 data_in2	 data_out	 0.60
                      path	 data_in3	 data_out	 0.56
                      path	 data_in4	 data_out	 0.53
                      path	 data_in5	 data_out	 0.43
                      path	 data_in6	 data_out	 0.50
                      path	 data_in7	 data_out	 0.74
                      path	 data_in8	 data_out	 0.69
                      path	 data_in9	 data_out	 0.77
                      path	 data_in10	 data_out	 0.73
                      path	 data_in11	 data_out	 1.11
                      path	 data_in12	 data_out	 0.98
                      path	 data_in13	 data_out	 0.80
                      path	 data_in14	 data_out	 0.72
                      path	 sel	 data_out	 4.37
                    </data>
                    <data bit_width="32">
                      path	 data_in0	 data_out	 0.67
                      path	 data_in1	 data_out	 0.48
                      path	 data_in2	 data_out	 0.56
                      path	 data_in3	 data_out	 0.28
                      path	 data_in4	 data_out	 0.28
                      path	 data_in5	 data_out	 0.38
                      path	 data_in6	 data_out	 0.46
                      path	 data_in7	 data_out	 0.64
                      path	 data_in8	 data_out	 0.69
                      path	 data_in9	 data_out	 0.69
                      path	 data_in10	 data_out	 0.72
                      path	 data_in11	 data_out	 0.60
                      path	 data_in12	 data_out	 0.58
                      path	 data_in13	 data_out	 0.62
                      path	 data_in14	 data_out	 0.61
                      path	 sel	 data_out	 3.78
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16">
                <max>
                  <data bit_width="1">
                  </data>
                  <data bit_width="4">
                    path	 data_in0	 data_out	 0.78
                    path	 data_in1	 data_out	 0.41
                    path	 data_in2	 data_out	 0.65
                    path	 data_in3	 data_out	 0.76
                    path	 data_in4	 data_out	 0.70
                    path	 data_in5	 data_out	 0.79
                    path	 data_in6	 data_out	 0.74
                    path	 data_in7	 data_out	 0.81
                    path	 data_in8	 data_out	 0.77
                    path	 data_in9	 data_out	 0.61
                    path	 data_in10	 data_out	 0.69
                    path	 data_in11	 data_out	 0.62
                    path	 data_in12	 data_out	 0.70
                    path	 data_in13	 data_out	 0.47
                    path	 data_in14	 data_out	 0.39
                    path	 data_in15	 data_out	 0.54
                    path	 sel	 data_out	 1.92
                  </data>
                  <data bit_width="8">
                    path	 data_in0	 data_out	 0.80
                    path	 data_in1	 data_out	 0.67
                    path	 data_in2	 data_out	 0.79
                    path	 data_in3	 data_out	 0.71
                    path	 data_in4	 data_out	 0.98
                    path	 data_in5	 data_out	 0.89
                    path	 data_in6	 data_out	 0.84
                    path	 data_in7	 data_out	 0.75
                    path	 data_in8	 data_out	 0.65
                    path	 data_in9	 data_out	 0.74
                    path	 data_in10	 data_out	 0.66
                    path	 data_in11	 data_out	 0.75
                    path	 data_in12	 data_out	 0.59
                    path	 data_in13	 data_out	 0.69
                    path	 data_in14	 data_out	 0.56
                    path	 data_in15	 data_out	 0.53
                    path	 sel	 data_out	 2.92
                  </data>
                  <data bit_width="16">
                    path	 data_in0	 data_out	 0.75
                    path	 data_in1	 data_out	 0.67
                    path	 data_in2	 data_out	 0.79
                    path	 data_in3	 data_out	 0.71
                    path	 data_in4	 data_out	 0.82
                    path	 data_in5	 data_out	 0.74
                    path	 data_in6	 data_out	 0.84
                    path	 data_in7	 data_out	 0.75
                    path	 data_in8	 data_out	 0.65
                    path	 data_in9	 data_out	 0.74
                    path	 data_in10	 data_out	 0.66
                    path	 data_in11	 data_out	 0.75
                    path	 data_in12	 data_out	 0.59
                    path	 data_in13	 data_out	 0.69
                    path	 data_in14	 data_out	 0.56
                    path	 data_in15	 data_out	 0.48
                    path	 sel	 data_out	 3.58
                  </data>
                  <data bit_width="32">
                    path	 data_in0	 data_out	 0.80
                    path	 data_in1	 data_out	 0.67
                    path	 data_in2	 data_out	 0.79
                    path	 data_in3	 data_out	 0.71
                    path	 data_in4	 data_out	 0.98
                    path	 data_in5	 data_out	 0.89
                    path	 data_in6	 data_out	 0.84
                    path	 data_in7	 data_out	 0.75
                    path	 data_in8	 data_out	 0.65
                    path	 data_in9	 data_out	 0.74
                    path	 data_in10	 data_out	 0.66
                    path	 data_in11	 data_out	 0.75
                    path	 data_in12	 data_out	 0.59
                    path	 data_in13	 data_out	 0.69
                    path	 data_in14	 data_out	 0.56
                    path	 data_in15	 data_out	 0.53
                    path	 sel	 data_out	 4.15
                  </data>
                </max>
                <min>
                  <data bit_width="1">
                  </data>
                  <data bit_width="4">
                    path	 data_in0	 data_out	 0.78
                    path	 data_in1	 data_out	 0.41
                    path	 data_in2	 data_out	 0.65
                    path	 data_in3	 data_out	 0.76
                    path	 data_in4	 data_out	 0.70
                    path	 data_in5	 data_out	 0.79
                    path	 data_in6	 data_out	 0.74
                    path	 data_in7	 data_out	 0.81
                    path	 data_in8	 data_out	 0.77
                    path	 data_in9	 data_out	 0.61
                    path	 data_in10	 data_out	 0.69
                    path	 data_in11	 data_out	 0.62
                    path	 data_in12	 data_out	 0.70
                    path	 data_in13	 data_out	 0.47
                    path	 data_in14	 data_out	 0.39
                    path	 data_in15	 data_out	 0.54
                    path	 sel	 data_out	 1.92
                  </data>
                  <data bit_width="8">
                    path	 data_in0	 data_out	 0.80
                    path	 data_in1	 data_out	 0.67
                    path	 data_in2	 data_out	 0.79
                    path	 data_in3	 data_out	 0.71
                    path	 data_in4	 data_out	 0.98
                    path	 data_in5	 data_out	 0.89
                    path	 data_in6	 data_out	 0.84
                    path	 data_in7	 data_out	 0.75
                    path	 data_in8	 data_out	 0.65
                    path	 data_in9	 data_out	 0.74
                    path	 data_in10	 data_out	 0.66
                    path	 data_in11	 data_out	 0.75
                    path	 data_in12	 data_out	 0.59
                    path	 data_in13	 data_out	 0.69
                    path	 data_in14	 data_out	 0.56
                    path	 data_in15	 data_out	 0.53
                    path	 sel	 data_out	 2.92
                  </data>
                  <data bit_width="16">
                    path	 data_in0	 data_out	 0.75
                    path	 data_in1	 data_out	 0.67
                    path	 data_in2	 data_out	 0.79
                    path	 data_in3	 data_out	 0.71
                    path	 data_in4	 data_out	 0.82
                    path	 data_in5	 data_out	 0.74
                    path	 data_in6	 data_out	 0.84
                    path	 data_in7	 data_out	 0.75
                    path	 data_in8	 data_out	 0.65
                    path	 data_in9	 data_out	 0.74
                    path	 data_in10	 data_out	 0.66
                    path	 data_in11	 data_out	 0.75
                    path	 data_in12	 data_out	 0.59
                    path	 data_in13	 data_out	 0.69
                    path	 data_in14	 data_out	 0.56
                    path	 data_in15	 data_out	 0.48
                    path	 sel	 data_out	 3.58
                  </data>
                  <data bit_width="32">
                    path	 data_in0	 data_out	 0.80
                    path	 data_in1	 data_out	 0.67
                    path	 data_in2	 data_out	 0.79
                    path	 data_in3	 data_out	 0.71
                    path	 data_in4	 data_out	 0.98
                    path	 data_in5	 data_out	 0.89
                    path	 data_in6	 data_out	 0.84
                    path	 data_in7	 data_out	 0.75
                    path	 data_in8	 data_out	 0.65
                    path	 data_in9	 data_out	 0.74
                    path	 data_in10	 data_out	 0.66
                    path	 data_in11	 data_out	 0.75
                    path	 data_in12	 data_out	 0.59
                    path	 data_in13	 data_out	 0.69
                    path	 data_in14	 data_out	 0.56
                    path	 data_in15	 data_out	 0.53
                    path	 sel	 data_out	 4.15
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1">
                    </data>
                    <data bit_width="4">
                      path	 data_in0	 data_out	 0.59
                      path	 data_in1	 data_out	 0.22
                      path	 data_in2	 data_out	 0.47
                      path	 data_in3	 data_out	 0.57
                      path	 data_in4	 data_out	 0.52
                      path	 data_in5	 data_out	 0.60
                      path	 data_in6	 data_out	 0.56
                      path	 data_in7	 data_out	 0.62
                      path	 data_in8	 data_out	 0.60
                      path	 data_in9	 data_out	 0.43
                      path	 data_in10	 data_out	 0.48
                      path	 data_in11	 data_out	 0.46
                      path	 data_in12	 data_out	 0.49
                      path	 data_in13	 data_out	 0.28
                      path	 data_in14	 data_out	 0.20
                      path	 data_in15	 data_out	 0.35
                      path	 sel	 data_out	 2.15
                    </data>
                    <data bit_width="8">
                      path	 data_in0	 data_out	 0.59
                      path	 data_in1	 data_out	 0.47
                      path	 data_in2	 data_out	 0.57
                      path	 data_in3	 data_out	 0.52
                      path	 data_in4	 data_out	 0.60
                      path	 data_in5	 data_out	 0.56
                      path	 data_in6	 data_out	 0.62
                      path	 data_in7	 data_out	 0.60
                      path	 data_in8	 data_out	 0.43
                      path	 data_in9	 data_out	 0.48
                      path	 data_in10	 data_out	 0.46
                      path	 data_in11	 data_out	 0.49
                      path	 data_in12	 data_out	 0.28
                      path	 data_in13	 data_out	 0.20
                      path	 data_in14	 data_out	 0.30
                      path	 data_in15	 data_out	 0.27
                      path	 sel	 data_out	 2.59
                    </data>
                    <data bit_width="16">
                      path	 data_in0	 data_out	 0.59
                      path	 data_in1	 data_out	 0.47
                      path	 data_in2	 data_out	 0.57
                      path	 data_in3	 data_out	 0.52
                      path	 data_in4	 data_out	 0.60
                      path	 data_in5	 data_out	 0.56
                      path	 data_in6	 data_out	 0.62
                      path	 data_in7	 data_out	 0.60
                      path	 data_in8	 data_out	 0.43
                      path	 data_in9	 data_out	 0.48
                      path	 data_in10	 data_out	 0.46
                      path	 data_in11	 data_out	 0.49
                      path	 data_in12	 data_out	 0.28
                      path	 data_in13	 data_out	 0.20
                      path	 data_in14	 data_out	 0.30
                      path	 data_in15	 data_out	 0.27
                      path	 sel	 data_out	 3.18
                    </data>
                    <data bit_width="32">
                      path	 data_in0	 data_out	 0.59
                      path	 data_in1	 data_out	 0.47
                      path	 data_in2	 data_out	 0.57
                      path	 data_in3	 data_out	 0.52
                      path	 data_in4	 data_out	 0.60
                      path	 data_in5	 data_out	 0.56
                      path	 data_in6	 data_out	 0.62
                      path	 data_in7	 data_out	 0.60
                      path	 data_in8	 data_out	 0.43
                      path	 data_in9	 data_out	 0.48
                      path	 data_in10	 data_out	 0.46
                      path	 data_in11	 data_out	 0.49
                      path	 data_in12	 data_out	 0.28
                      path	 data_in13	 data_out	 0.20
                      path	 data_in14	 data_out	 0.30
                      path	 data_in15	 data_out	 0.27
                      path	 sel	 data_out	 3.06
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1">
                    </data>
                    <data bit_width="4">
                      path	 data_in0	 data_out	 0.71
                      path	 data_in1	 data_out	 0.64
                      path	 data_in2	 data_out	 0.80
                      path	 data_in3	 data_out	 0.82
                      path	 data_in4	 data_out	 0.78
                      path	 data_in5	 data_out	 0.70
                      path	 data_in6	 data_out	 0.75
                      path	 data_in7	 data_out	 0.70
                      path	 data_in8	 data_out	 0.81
                      path	 data_in9	 data_out	 0.79
                      path	 data_in10	 data_out	 0.63
                      path	 data_in11	 data_out	 0.79
                      path	 data_in12	 data_out	 0.76
                      path	 data_in13	 data_out	 0.80
                      path	 data_in14	 data_out	 0.55
                      path	 data_in15	 data_out	 0.60
                      path	 sel	 data_out	 0.83
                    </data>
                    <data bit_width="8">
                      path	 data_in0	 data_out	 0.78
                      path	 data_in1	 data_out	 0.84
                      path	 data_in2	 data_out	 0.69
                      path	 data_in3	 data_out	 0.72
                      path	 data_in4	 data_out	 0.87
                      path	 data_in5	 data_out	 0.80
                      path	 data_in6	 data_out	 0.72
                      path	 data_in7	 data_out	 0.74
                      path	 data_in8	 data_out	 0.96
                      path	 data_in9	 data_out	 0.78
                      path	 data_in10	 data_out	 0.88
                      path	 data_in11	 data_out	 0.79
                      path	 data_in12	 data_out	 0.81
                      path	 data_in13	 data_out	 0.85
                      path	 data_in14	 data_out	 0.77
                      path	 data_in15	 data_out	 0.73
                      path	 sel	 data_out	 1.04
                    </data>
                    <data bit_width="16">
                      path	 data_in0	 data_out	 0.68
                      path	 data_in1	 data_out	 0.76
                      path	 data_in2	 data_out	 0.83
                      path	 data_in3	 data_out	 0.95
                      path	 data_in4	 data_out	 0.81
                      path	 data_in5	 data_out	 0.79
                      path	 data_in6	 data_out	 0.87
                      path	 data_in7	 data_out	 0.99
                      path	 data_in8	 data_out	 0.85
                      path	 data_in9	 data_out	 0.87
                      path	 data_in10	 data_out	 0.88
                      path	 data_in11	 data_out	 0.99
                      path	 data_in12	 data_out	 0.89
                      path	 data_in13	 data_out	 0.84
                      path	 data_in14	 data_out	 0.87
                      path	 data_in15	 data_out	 0.64
                      path	 sel	 data_out	 1.00
                    </data>
                    <data bit_width="32">
                      path	 data_in0	 data_out	 0.83
                      path	 data_in1	 data_out	 0.86
                      path	 data_in2	 data_out	 0.86
                      path	 data_in3	 data_out	 0.95
                      path	 data_in4	 data_out	 0.97
                      path	 data_in5	 data_out	 0.79
                      path	 data_in6	 data_out	 0.99
                      path	 data_in7	 data_out	 0.85
                      path	 data_in8	 data_out	 0.97
                      path	 data_in9	 data_out	 0.83
                      path	 data_in10	 data_out	 0.98
                      path	 data_in11	 data_out	 0.86
                      path	 data_in12	 data_out	 0.98
                      path	 data_in13	 data_out	 0.94
                      path	 data_in14	 data_out	 0.87
                      path	 data_in15	 data_out	 0.64
                      path	 sel	 data_out	 1.01
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1">
                    </data>
                    <data bit_width="4">
                      path	 data_in0	 data_out	 0.78
                      path	 data_in1	 data_out	 0.41
                      path	 data_in2	 data_out	 0.65
                      path	 data_in3	 data_out	 0.76
                      path	 data_in4	 data_out	 0.70
                      path	 data_in5	 data_out	 0.79
                      path	 data_in6	 data_out	 0.74
                      path	 data_in7	 data_out	 0.81
                      path	 data_in8	 data_out	 0.77
                      path	 data_in9	 data_out	 0.61
                      path	 data_in10	 data_out	 0.69
                      path	 data_in11	 data_out	 0.62
                      path	 data_in12	 data_out	 0.70
                      path	 data_in13	 data_out	 0.47
                      path	 data_in14	 data_out	 0.39
                      path	 data_in15	 data_out	 0.54
                      path	 sel	 data_out	 1.92
                    </data>
                    <data bit_width="8">
                      path	 data_in0	 data_out	 0.80
                      path	 data_in1	 data_out	 0.67
                      path	 data_in2	 data_out	 0.79
                      path	 data_in3	 data_out	 0.71
                      path	 data_in4	 data_out	 0.98
                      path	 data_in5	 data_out	 0.89
                      path	 data_in6	 data_out	 0.84
                      path	 data_in7	 data_out	 0.75
                      path	 data_in8	 data_out	 0.65
                      path	 data_in9	 data_out	 0.74
                      path	 data_in10	 data_out	 0.66
                      path	 data_in11	 data_out	 0.75
                      path	 data_in12	 data_out	 0.59
                      path	 data_in13	 data_out	 0.69
                      path	 data_in14	 data_out	 0.56
                      path	 data_in15	 data_out	 0.53
                      path	 sel	 data_out	 2.92
                    </data>
                    <data bit_width="16">
                      path	 data_in0	 data_out	 0.75
                      path	 data_in1	 data_out	 0.67
                      path	 data_in2	 data_out	 0.79
                      path	 data_in3	 data_out	 0.71
                      path	 data_in4	 data_out	 0.82
                      path	 data_in5	 data_out	 0.74
                      path	 data_in6	 data_out	 0.84
                      path	 data_in7	 data_out	 0.75
                      path	 data_in8	 data_out	 0.65
                      path	 data_in9	 data_out	 0.74
                      path	 data_in10	 data_out	 0.66
                      path	 data_in11	 data_out	 0.75
                      path	 data_in12	 data_out	 0.59
                      path	 data_in13	 data_out	 0.69
                      path	 data_in14	 data_out	 0.56
                      path	 data_in15	 data_out	 0.48
                      path	 sel	 data_out	 3.58
                    </data>
                    <data bit_width="32">
                      path	 data_in0	 data_out	 0.80
                      path	 data_in1	 data_out	 0.67
                      path	 data_in2	 data_out	 0.79
                      path	 data_in3	 data_out	 0.71
                      path	 data_in4	 data_out	 0.98
                      path	 data_in5	 data_out	 0.89
                      path	 data_in6	 data_out	 0.84
                      path	 data_in7	 data_out	 0.75
                      path	 data_in8	 data_out	 0.65
                      path	 data_in9	 data_out	 0.74
                      path	 data_in10	 data_out	 0.66
                      path	 data_in11	 data_out	 0.75
                      path	 data_in12	 data_out	 0.59
                      path	 data_in13	 data_out	 0.69
                      path	 data_in14	 data_out	 0.56
                      path	 data_in15	 data_out	 0.53
                      path	 sel	 data_out	 4.15
                    </data>
                  </priority>
                </typ>
              </parameters>

            </est_index>
          </est_type>

          <est_type name="power">
            <est_index name="static_power">
              <unit> mW </unit>
              <parameters name="2">
                <max>
                  <data bit_width="1"> 1.2867 </data>
                  <data bit_width="4"> 5.1472 </data>
                  <data bit_width="8"> 10.3043 </data>
                  <data bit_width="16"> 20.5896 </data>
                  <data bit_width="32"> 34.4835 </data>
                  <data bit_width="128"> 42.2284 </data>
                </max>
                <min>
                  <data bit_width="1"> 0.3270302 </data>
                  <data bit_width="4"> 1.3090 </data>
                  <data bit_width="8"> 2.6170 </data>
                  <data bit_width="16"> 5.2348 </data>
                  <data bit_width="32"> 10.4684 </data>
                  <data bit_width="128"> 41.8799 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 0.3297527 </data>
                    <data bit_width="4"> 1.3199 </data>
                    <data bit_width="8"> 2.6388 </data>
                    <data bit_width="16"> 5.2784 </data>
                    <data bit_width="32"> 10.5555 </data>
                    <data bit_width="128"> 42.2284 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 1.2867 </data>
                    <data bit_width="4"> 5.1472 </data>
                    <data bit_width="8"> 10.3043 </data>
                    <data bit_width="16"> 20.5896 </data>
                    <data bit_width="32"> 34.4835 </data>
                    <data bit_width="128"> 42.2284 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 0.3270302 </data>
                    <data bit_width="4"> 1.3090 </data>
                    <data bit_width="8"> 2.6170 </data>
                    <data bit_width="16"> 5.2348 </data>
                    <data bit_width="32"> 10.4684 </data>
                    <data bit_width="128"> 41.8799 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="3">
                <max>
                  <data bit_width="1"> 1.1994 </data>
                  <data bit_width="4"> 12.8837 </data>
                  <data bit_width="8"> 25.7692 </data>
                  <data bit_width="16"> 40.5812 </data>
                  <data bit_width="32"> 102.1487 </data>
                  <data bit_width="128"> 319.8740 </data>
                </max>
                <min>
                  <data bit_width="1"> 0.8364267 </data>
                  <data bit_width="4"> 3.4576 </data>
                  <data bit_width="8"> 6.5204 </data>
                  <data bit_width="16"> 12.6558 </data>
                  <data bit_width="32"> 25.1232 </data>
                  <data bit_width="128"> 99.0869 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 0.8425544 </data>
                    <data bit_width="4"> 3.8306 </data>
                    <data bit_width="8"> 7.3730 </data>
                    <data bit_width="16"> 13.8126 </data>
                    <data bit_width="32"> 27.7881 </data>
                    <data bit_width="128"> 109.2660 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 1.1994 </data>
                    <data bit_width="4"> 12.8837 </data>
                    <data bit_width="8"> 25.7692 </data>
                    <data bit_width="16"> 40.5812 </data>
                    <data bit_width="32"> 102.1487 </data>
                    <data bit_width="128"> 319.8740 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 0.8364267 </data>
                    <data bit_width="4"> 3.4576 </data>
                    <data bit_width="8"> 6.5204 </data>
                    <data bit_width="16"> 12.6558 </data>
                    <data bit_width="32"> 25.1232 </data>
                    <data bit_width="128"> 99.0869 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4">
                <max>
                  <data bit_width="1"> 0.6944436 </data>
                  <data bit_width="4"> 11.8846 </data>
                  <data bit_width="8"> 35.2829 </data>
                  <data bit_width="16"> 11.1121 </data>
                  <data bit_width="32"> 52.2126 </data>
                  <data bit_width="128"> 156.2704 </data>
                </max>
                <min>
                  <data bit_width="1"> 0.6944436 </data>
                  <data bit_width="4"> 2.7776 </data>
                  <data bit_width="8"> 5.5549 </data>
                  <data bit_width="16"> 11.1121 </data>
                  <data bit_width="32"> 22.2239 </data>
                  <data bit_width="128"> 88.8989 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 0.6944436 </data>
                    <data bit_width="4"> 2.7776 </data>
                    <data bit_width="8"> 5.5549 </data>
                    <data bit_width="16"> 11.1121 </data>
                    <data bit_width="32"> 22.2239 </data>
                    <data bit_width="128"> 156.2704 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 0.6944436 </data>
                    <data bit_width="4"> 11.8846 </data>
                    <data bit_width="8"> 35.2829 </data>
                    <data bit_width="16"> 11.1121 </data>
                    <data bit_width="32"> 52.2126 </data>
                    <data bit_width="128"> 97.3812 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 0.6944436 </data>
                    <data bit_width="4"> 2.7776 </data>
                    <data bit_width="8"> 5.5549 </data>
                    <data bit_width="16"> 11.1121 </data>
                    <data bit_width="32"> 22.2239 </data>
                    <data bit_width="128"> 88.8989 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="5">
                <max>
                  <data bit_width="1"> 2.8785 </data>
                  <data bit_width="4"> 6.4740 </data>
                  <data bit_width="8"> 54.2135 </data>
                  <data bit_width="16"> 144.5523 </data>
                  <data bit_width="32"> 168.5463 </data>
                  <data bit_width="128"> 777.5195 </data>
                </max>
                <min>
                  <data bit_width="1"> 1.8713 </data>
                  <data bit_width="4"> 5.2239 </data>
                  <data bit_width="8"> 9.0810 </data>
                  <data bit_width="16"> 16.7369 </data>
                  <data bit_width="32"> 34.7679 </data>
                  <data bit_width="128"> 134.0591 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 1.9856 </data>
                    <data bit_width="4"> 6.4740 </data>
                    <data bit_width="8"> 10.9519 </data>
                    <data bit_width="16"> 20.3183 </data>
                    <data bit_width="32"> 41.2419 </data>
                    <data bit_width="128"> 163.2425 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 2.8785 </data>
                    <data bit_width="4"> 6.3187 </data>
                    <data bit_width="8"> 54.2135 </data>
                    <data bit_width="16"> 144.5523 </data>
                    <data bit_width="32"> 168.5463 </data>
                    <data bit_width="128"> 777.5195 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 1.8713 </data>
                    <data bit_width="4"> 5.2239 </data>
                    <data bit_width="8"> 9.0810 </data>
                    <data bit_width="16"> 16.7369 </data>
                    <data bit_width="32"> 34.7679 </data>
                    <data bit_width="128"> 134.0591 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="6">
                <max>
                  <data bit_width="1"> 2.7577 </data>
                  <data bit_width="4"> 42.0551 </data>
                  <data bit_width="8"> 72.1756 </data>
                  <data bit_width="16"> 127.7765 </data>
                  <data bit_width="32"> 219.3998 </data>
                  <data bit_width="128"> 671.4873 </data>
                </max>
                <min>
                  <data bit_width="1"> 2.4001 </data>
                  <data bit_width="4"> 6.6249 </data>
                  <data bit_width="8"> 10.6754 </data>
                  <data bit_width="16"> 19.6903 </data>
                  <data bit_width="32"> 38.0659 </data>
                  <data bit_width="128"> 153.9980 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 2.5177 </data>
                    <data bit_width="4"> 7.8350 </data>
                    <data bit_width="8"> 13.0677 </data>
                    <data bit_width="16"> 24.0852 </data>
                    <data bit_width="32"> 47.4059 </data>
                    <data bit_width="128"> 192.2766 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 2.7577 </data>
                    <data bit_width="4"> 42.0551 </data>
                    <data bit_width="8"> 72.1756 </data>
                    <data bit_width="16"> 127.7765 </data>
                    <data bit_width="32"> 219.3998 </data>
                    <data bit_width="128"> 671.4873 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 2.4001 </data>
                    <data bit_width="4"> 6.6249 </data>
                    <data bit_width="8"> 10.6754 </data>
                    <data bit_width="16"> 19.6903 </data>
                    <data bit_width="32"> 38.0659 </data>
                    <data bit_width="128"> 153.9980 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="7">
                <max>
                  <data bit_width="1"> 12.0202 </data>
                  <data bit_width="4"> 38.4680 </data>
                  <data bit_width="8"> 64.8862 </data>
                  <data bit_width="16"> 135.4740 </data>
                  <data bit_width="32"> 272.3884 </data>
                  <data bit_width="128"> 974.0698 </data>
                </max>
                <min>
                  <data bit_width="1"> 2.7459 </data>
                  <data bit_width="4"> 7.2799 </data>
                  <data bit_width="8"> 12.9600 </data>
                  <data bit_width="16"> 23.7842 </data>
                  <data bit_width="32"> 45.9291 </data>
                  <data bit_width="128"> 188.2372 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 2.8673 </data>
                    <data bit_width="4"> 9.3330 </data>
                    <data bit_width="8"> 16.1165 </data>
                    <data bit_width="16"> 29.7916 </data>
                    <data bit_width="32"> 58.3608 </data>
                    <data bit_width="128"> 236.9435 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 12.0202 </data>
                    <data bit_width="4"> 38.4680 </data>
                    <data bit_width="8"> 64.8862 </data>
                    <data bit_width="16"> 135.4740 </data>
                    <data bit_width="32"> 272.3884 </data>
                    <data bit_width="128"> 974.0698 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 2.7459 </data>
                    <data bit_width="4"> 7.2799 </data>
                    <data bit_width="8"> 12.9600 </data>
                    <data bit_width="16"> 23.7842 </data>
                    <data bit_width="32"> 45.9291 </data>
                    <data bit_width="128"> 188.2372 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8">
                <max>
                  <data bit_width="1"> 5.0787 </data>
                  <data bit_width="4"> 36.1310 </data>
                  <data bit_width="8"> 104.6586 </data>
                  <data bit_width="16"> 179.9789 </data>
                  <data bit_width="32"> 303.5141 </data>
                  <data bit_width="128"> 1041.1 </data>
                </max>
                <min>
                  <data bit_width="1"> 2.6135 </data>
                  <data bit_width="4"> 8.2080 </data>
                  <data bit_width="8"> 14.0177 </data>
                  <data bit_width="16"> 25.9809 </data>
                  <data bit_width="32"> 49.7834 </data>
                  <data bit_width="128"> 216.5662 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 2.7291 </data>
                    <data bit_width="4"> 10.5087 </data>
                    <data bit_width="8"> 18.1146 </data>
                    <data bit_width="16"> 32.3947 </data>
                    <data bit_width="32"> 63.7912 </data>
                    <data bit_width="128"> 260.5614 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 5.0787 </data>
                    <data bit_width="4"> 36.1310 </data>
                    <data bit_width="8"> 104.6586 </data>
                    <data bit_width="16"> 179.9789 </data>
                    <data bit_width="32"> 303.5141 </data>
                    <data bit_width="128"> 1041.1 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 2.6135 </data>
                    <data bit_width="4"> 8.2080 </data>
                    <data bit_width="8"> 14.0177 </data>
                    <data bit_width="16"> 25.9809 </data>
                    <data bit_width="32"> 49.7834 </data>
                    <data bit_width="128"> 216.5662 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="9">
                <max>
                  <data bit_width="1"> 10.7644 </data>
                  <data bit_width="4"> 38.6045 </data>
                  <data bit_width="8"> 100.3335 </data>
                  <data bit_width="16"> 186.8585 </data>
                  <data bit_width="32"> 360.9676 </data>
                  <data bit_width="128"> 1089.9 </data>
                </max>
                <min>
                  <data bit_width="1"> 3.8558 </data>
                  <data bit_width="4"> 8.8392 </data>
                  <data bit_width="8"> 14.4994 </data>
                  <data bit_width="16"> 25.8409 </data>
                  <data bit_width="32"> 48.9662 </data>
                  <data bit_width="128"> 206.5265 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 4.0830 </data>
                    <data bit_width="4"> 11.0671 </data>
                    <data bit_width="8"> 18.1637 </data>
                    <data bit_width="16"> 32.4999 </data>
                    <data bit_width="32"> 60.7780 </data>
                    <data bit_width="128"> 241.6318 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 10.7644 </data>
                    <data bit_width="4"> 38.6045 </data>
                    <data bit_width="8"> 100.3335 </data>
                    <data bit_width="16"> 186.8585 </data>
                    <data bit_width="32"> 360.9676 </data>
                    <data bit_width="128"> 1089.9 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 3.8558 </data>
                    <data bit_width="4"> 8.8392 </data>
                    <data bit_width="8"> 14.4994 </data>
                    <data bit_width="16"> 25.8409 </data>
                    <data bit_width="32"> 48.9662 </data>
                    <data bit_width="128"> 206.5265 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="10">
                <max>
                  <data bit_width="1"> 5.5549 </data>
                  <data bit_width="4"> 67.5682 </data>
                  <data bit_width="8"> 94.3580 </data>
                  <data bit_width="16"> 163.6549 </data>
                  <data bit_width="32"> 292.1978 </data>
                  <data bit_width="128"> 1205.3 </data>
                </max>
                <min>
                  <data bit_width="1"> 4.4143 </data>
                  <data bit_width="4"> 10.1369 </data>
                  <data bit_width="8"> 16.6663 </data>
                  <data bit_width="16"> 29.6356 </data>
                  <data bit_width="32"> 55.7273 </data>
                  <data bit_width="128"> 235.5718 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 4.4458 </data>
                    <data bit_width="4"> 11.8772 </data>
                    <data bit_width="8"> 19.5896 </data>
                    <data bit_width="16"> 35.1245 </data>
                    <data bit_width="32"> 67.7655 </data>
                    <data bit_width="128"> 267.0718 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 5.5549 </data>
                    <data bit_width="4"> 67.5682 </data>
                    <data bit_width="8"> 94.3580 </data>
                    <data bit_width="16"> 163.6549 </data>
                    <data bit_width="32"> 292.1978 </data>
                    <data bit_width="128"> 1205.3 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 4.4143 </data>
                    <data bit_width="4"> 10.1369 </data>
                    <data bit_width="8"> 16.6663 </data>
                    <data bit_width="16"> 29.6356 </data>
                    <data bit_width="32"> 55.7273 </data>
                    <data bit_width="128"> 235.5718 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="11">
                <max>
                  <data bit_width="1"> 6.1953 </data>
                  <data bit_width="4"> 61.3491 </data>
                  <data bit_width="8"> 121.0485 </data>
                  <data bit_width="16"> 235.9820 </data>
                  <data bit_width="32"> 536.9933 </data>
                  <data bit_width="128"> 1447 </data>
                </max>
                <min>
                  <data bit_width="1"> 4.8504 </data>
                  <data bit_width="4"> 11.3018 </data>
                  <data bit_width="8"> 17.2129 </data>
                  <data bit_width="16"> 30.5930 </data>
                  <data bit_width="32"> 57.9352 </data>
                  <data bit_width="128"> 248.4366 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 5.0845 </data>
                    <data bit_width="4"> 13.5332 </data>
                    <data bit_width="8"> 22.5243 </data>
                    <data bit_width="16"> 40.2087 </data>
                    <data bit_width="32"> 76.3387 </data>
                    <data bit_width="128"> 304.8139 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 6.1953 </data>
                    <data bit_width="4"> 61.3491 </data>
                    <data bit_width="8"> 121.0485 </data>
                    <data bit_width="16"> 235.9820 </data>
                    <data bit_width="32"> 536.9933 </data>
                    <data bit_width="128"> 1447 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 4.8504 </data>
                    <data bit_width="4"> 11.3018 </data>
                    <data bit_width="8"> 17.2129 </data>
                    <data bit_width="16"> 30.5930 </data>
                    <data bit_width="32"> 57.9352 </data>
                    <data bit_width="128"> 248.4366 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="12">
                <max>
                  <data bit_width="1"> 14.9201 </data>
                  <data bit_width="4"> 74.9055 </data>
                  <data bit_width="8"> 146.5857 </data>
                  <data bit_width="16"> 236.6430 </data>
                  <data bit_width="32"> 469.3581 </data>
                  <data bit_width="128"> 1443.7 </data>
                </max>
                <min>
                  <data bit_width="1"> 5.4930 </data>
                  <data bit_width="4"> 12.0904 </data>
                  <data bit_width="8"> 20.3667 </data>
                  <data bit_width="16"> 37.1011 </data>
                  <data bit_width="32"> 74.4461 </data>
                  <data bit_width="128"> 294.7191 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 5.5327 </data>
                    <data bit_width="4"> 13.1926 </data>
                    <data bit_width="8"> 21.9540 </data>
                    <data bit_width="16"> 39.5810 </data>
                    <data bit_width="32"> 76.6994 </data>
                    <data bit_width="128"> 313.3689 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 14.9201 </data>
                    <data bit_width="4"> 74.9055 </data>
                    <data bit_width="8"> 146.5857 </data>
                    <data bit_width="16"> 236.6430 </data>
                    <data bit_width="32"> 469.3581 </data>
                    <data bit_width="128"> 1443.7 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 5.4930 </data>
                    <data bit_width="4"> 12.0904 </data>
                    <data bit_width="8"> 20.3667 </data>
                    <data bit_width="16"> 37.1011 </data>
                    <data bit_width="32"> 74.4461 </data>
                    <data bit_width="128"> 294.7191 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="13">
                <max>
                  <data bit_width="1"> 14.6569 </data>
                  <data bit_width="4"> 78.7960 </data>
                  <data bit_width="8"> 146.1787 </data>
                  <data bit_width="16"> 294.5999 </data>
                  <data bit_width="32"> 351.5207 </data>
                  <data bit_width="128"> 1799.6 </data>
                </max>
                <min>
                  <data bit_width="1"> 5.8524 </data>
                  <data bit_width="4"> 12.3815 </data>
                  <data bit_width="8"> 20.7960 </data>
                  <data bit_width="16"> 37.6820 </data>
                  <data bit_width="32"> 75.8640 </data>
                  <data bit_width="128"> 309.6601 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 5.8963 </data>
                    <data bit_width="4"> 12.9194 </data>
                    <data bit_width="8"> 21.5226 </data>
                    <data bit_width="16"> 38.7586 </data>
                    <data bit_width="32"> 76.9398 </data>
                    <data bit_width="128"> 309.6601 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 14.6569 </data>
                    <data bit_width="4"> 78.7960 </data>
                    <data bit_width="8"> 146.1787 </data>
                    <data bit_width="16"> 294.5999 </data>
                    <data bit_width="32"> 351.5207 </data>
                    <data bit_width="128"> 1799.6 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 5.8524 </data>
                    <data bit_width="4"> 12.3815 </data>
                    <data bit_width="8"> 20.7960 </data>
                    <data bit_width="16"> 37.6820 </data>
                    <data bit_width="32"> 75.8640 </data>
                    <data bit_width="128"> 316.6523 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="14">
                <max>
                  <data bit_width="1"> 15.5771 </data>
                  <data bit_width="4"> 92.9153 </data>
                  <data bit_width="8"> 140.6424 </data>
                  <data bit_width="16"> 216.7001 </data>
                  <data bit_width="32"> 510.9126 </data>
                  <data bit_width="128"> 4713.7 </data>
                </max>
                <min>
                  <data bit_width="1"> 6.1976 </data>
                  <data bit_width="4"> 12.1803 </data>
                  <data bit_width="8"> 21.5170 </data>
                  <data bit_width="16"> 36.9414 </data>
                  <data bit_width="32"> 78.1214 </data>
                  <data bit_width="128"> 297.0933 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 6.2454 </data>
                    <data bit_width="4"> 14.8218 </data>
                    <data bit_width="8"> 25.4971 </data>
                    <data bit_width="16"> 46.1389 </data>
                    <data bit_width="32"> 89.1114 </data>
                    <data bit_width="128"> 371.6918 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 15.5771 </data>
                    <data bit_width="4"> 92.9153 </data>
                    <data bit_width="8"> 140.6424 </data>
                    <data bit_width="16"> 216.7001 </data>
                    <data bit_width="32"> 510.9126 </data>
                    <data bit_width="128"> 4713.7 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 6.1976 </data>
                    <data bit_width="4"> 12.1803 </data>
                    <data bit_width="8"> 21.5170 </data>
                    <data bit_width="16"> 36.9414 </data>
                    <data bit_width="32"> 78.1214 </data>
                    <data bit_width="128"> 297.0933 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="15">
                <max>
                  <data bit_width="1"> 19.0393 </data>
                  <data bit_width="4"> 81.4610 </data>
                  <data bit_width="8"> 170.5300 </data>
                  <data bit_width="16"> 288.7632 </data>
                  <data bit_width="32"> 534.4023 </data>
                  <data bit_width="128"> 11897 </data>
                </max>
                <min>
                  <data bit_width="1"> 6.5639 </data>
                  <data bit_width="4"> 13.4853 </data>
                  <data bit_width="8"> 22.2975 </data>
                  <data bit_width="16"> 39.8102 </data>
                  <data bit_width="32"> 80.0403 </data>
                  <data bit_width="128"> 332.6220 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 6.6152 </data>
                    <data bit_width="4"> 17.4461 </data>
                    <data bit_width="8"> 29.7693 </data>
                    <data bit_width="16"> 53.6957 </data>
                    <data bit_width="32"> 103.5045 </data>
                    <data bit_width="128"> 426.0140 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 19.0393 </data>
                    <data bit_width="4"> 81.4610 </data>
                    <data bit_width="8"> 170.5300 </data>
                    <data bit_width="16"> 288.7632 </data>
                    <data bit_width="32"> 534.4023 </data>
                    <data bit_width="128"> 11897 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 6.5639 </data>
                    <data bit_width="4"> 13.4853 </data>
                    <data bit_width="8"> 22.2975 </data>
                    <data bit_width="16"> 39.8102 </data>
                    <data bit_width="32"> 80.0403 </data>
                    <data bit_width="128"> 332.6220 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16">
                <max>
                  <data bit_width="1"> 18.8156 </data>
                  <data bit_width="4"> 77.4831 </data>
                  <data bit_width="8"> 160.0163 </data>
                  <data bit_width="16"> 283.5160 </data>
                  <data bit_width="32"> 758.0689 </data>
                  <data bit_width="128"> 11836.4 </data>
                </max>
                <min>
                  <data bit_width="1"> 6.6514 </data>
                  <data bit_width="4"> 14.2459 </data>
                  <data bit_width="8"> 23.5162 </data>
                  <data bit_width="16"> 42.1489 </data>
                  <data bit_width="32"> 85.0847 </data>
                  <data bit_width="128"> 353.4558 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 6.6978 </data>
                    <data bit_width="4"> 18.2980 </data>
                    <data bit_width="8"> 31.4530 </data>
                    <data bit_width="16"> 57.2430 </data>
                    <data bit_width="32"> 109.7095 </data>
                    <data bit_width="128"> 455.4258 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 18.8156 </data>
                    <data bit_width="4"> 77.4831 </data>
                    <data bit_width="8"> 160.0163 </data>
                    <data bit_width="16"> 283.5160 </data>
                    <data bit_width="32"> 758.0689 </data>
                    <data bit_width="128"> 11836.4 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 6.6514 </data>
                    <data bit_width="4"> 14.2459 </data>
                    <data bit_width="8"> 23.5162 </data>
                    <data bit_width="16"> 42.1489 </data>
                    <data bit_width="32"> 85.0847 </data>
                    <data bit_width="128"> 353.4558 </data>
                  </priority>
                </typ>
              </parameters>
            </est_index>
          </est_type>

          <est_type name="function_cycle">
            <unit> cycle </unit>

            <est_index name="cycle">
              <parameters name="2">
                <function name="sel">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="3">
                <function name="sel">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="4">
                <function name="sel">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="5">
                <function name="sel">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="6">
                <function name="sel">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="7">
                <function name="sel">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="8">
                <function name="sel">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="9">
                <function name="sel">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="10">
                <function name="sel">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="11">
                <function name="sel">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="12">
                <function name="sel">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="13">
                <function name="sel">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="14">
                <function name="sel">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="15">
                <function name="sel">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="16">
                <function name="sel">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>
	    </est_index>

            <est_index name="latency">
              <parameters name="2">
                <function name="sel">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="3">
                <function name="sel">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="4">
                <function name="sel">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="5">
                <function name="sel">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="6">
                <function name="sel">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="7">
                <function name="sel">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="8">
                <function name="sel">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="9">
                <function name="sel">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="10">
                <function name="sel">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="11">
                <function name="sel">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="12">
                <function name="sel">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="13">
                <function name="sel">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="14">
                <function name="sel">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="15">
                <function name="sel">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="16">
                <function name="sel">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>
	    </est_index>

            <est_index name="throughput">
              <parameters name="2">
                <function name="sel">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="3">
                <function name="sel">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="4">
                <function name="sel">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="5">
                <function name="sel">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="6">
                <function name="sel">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="7">
                <function name="sel">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="8">
                <function name="sel">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="9">
                <function name="sel">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="10">
                <function name="sel">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="11">
                <function name="sel">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="12">
                <function name="sel">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="13">
                <function name="sel">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="14">
                <function name="sel">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="15">
                <function name="sel">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="16">
                <function name="sel">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>
	    </est_index>
          </est_type>

          <est_type name="function_power">
            <!-- Dummy yet -->
          </est_type>
        </library>
      </estimation_data>

      <estimation_method>
         
        <est_type name="shape">

          <est_index name="area">

            <parameters name="2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for multiplexor(2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="3">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for multiplexor(3) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for multiplexor(4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="5">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for multiplexor(5) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="6">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for multiplexor(6) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="7">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for multiplexor(7) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for multiplexor(8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="9">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for multiplexor(9) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="10">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for multiplexor(10) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="11">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for multiplexor(11) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="12">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for multiplexor(12) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="13">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for multiplexor(13) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="14">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for multiplexor(14) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="15">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for multiplexor(15) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for multiplexor(16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

          </est_index>

           <est_index name="aspect_ratio">

             <!-- Dummy yet -->

           </est_index>
		
           <est_index name="height">

             <!-- Dummy yet -->

           </est_index>
		
           <est_index name="width">

             <!-- Dummy yet -->

           </est_index>
		
        </est_type>

        <est_type name="timing">

          <est_index name="delay">

            <parameters name="2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for multiplexor(2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="3">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for multiplexor(3) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for multiplexor(4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="5">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for multiplexor(5) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="6">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for multiplexor(6) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="7">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for multiplexor(7) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for multiplexor(8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="9">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for multiplexor(9) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="10">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for multiplexor(10) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="11">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for multiplexor(11) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="12">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for multiplexor(12) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="13">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for multiplexor(13) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="14">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for multiplexor(14) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="15">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for multiplexor(15) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for multiplexor(16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

          </est_index>

          <est_index name="delay_fullpath">

            <parameters name="2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for multiplexor(2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

$Round = 1;

#--------------------------------------------------------------------------#
# Type: Table lookup for delay_fullpath
#--------------------------------------------------------------------------#
$n = 0;

while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {

	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;

	$_ = <TMP>;
	$i = 0;

	while (! /\<\s*\/data\s*\>/ ) {

	    # path 
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }

	    # inport
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # outport
	     if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # internal
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }

	    $_ = <TMP>;
	}
    }
}
close(TMP);

$bit_width = $ARGV[1];
$line_num = $i;


for ($k = 0; $k < $line_num; $k++) {

    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }

    if ($bit_width < $bit[0]) {

	# divide by zero
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    
    elsif ($bit[$n-1] < $bit_width) {

	# divide by zero
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}

	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}

	# divide by zero
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";

    
  NEXT:
}


exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}


            </parameters>

            <parameters name="3">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for multiplexor(3) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

$Round = 1;

#--------------------------------------------------------------------------#
# Type: Table lookup for delay_fullpath
#--------------------------------------------------------------------------#
$n = 0;

while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {

	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;

	$_ = <TMP>;
	$i = 0;

	while (! /\<\s*\/data\s*\>/ ) {

	    # path 
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }

	    # inport
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # outport
	     if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # internal
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }

	    $_ = <TMP>;
	}
    }
}
close(TMP);

$bit_width = $ARGV[1];
$line_num = $i;


for ($k = 0; $k < $line_num; $k++) {

    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }

    if ($bit_width < $bit[0]) {

	# divide by zero
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    
    elsif ($bit[$n-1] < $bit_width) {

	# divide by zero
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}

	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}

	# divide by zero
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";

    
  NEXT:
}


exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}


            </parameters>

            <parameters name="4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for multiplexor(4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

$Round = 1;

#--------------------------------------------------------------------------#
# Type: Table lookup for delay_fullpath
#--------------------------------------------------------------------------#
$n = 0;

while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {

	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;

	$_ = <TMP>;
	$i = 0;

	while (! /\<\s*\/data\s*\>/ ) {

	    # path 
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }

	    # inport
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # outport
	     if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # internal
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }

	    $_ = <TMP>;
	}
    }
}
close(TMP);

$bit_width = $ARGV[1];
$line_num = $i;


for ($k = 0; $k < $line_num; $k++) {

    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }

    if ($bit_width < $bit[0]) {

	# divide by zero
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    
    elsif ($bit[$n-1] < $bit_width) {

	# divide by zero
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}

	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}

	# divide by zero
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";

    
  NEXT:
}


exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}


            </parameters>

            <parameters name="5">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for multiplexor(5) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

$Round = 1;

#--------------------------------------------------------------------------#
# Type: Table lookup for delay_fullpath
#--------------------------------------------------------------------------#
$n = 0;

while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {

	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;

	$_ = <TMP>;
	$i = 0;

	while (! /\<\s*\/data\s*\>/ ) {

	    # path 
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }

	    # inport
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # outport
	     if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # internal
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }

	    $_ = <TMP>;
	}
    }
}
close(TMP);

$bit_width = $ARGV[1];
$line_num = $i;


for ($k = 0; $k < $line_num; $k++) {

    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }

    if ($bit_width < $bit[0]) {

	# divide by zero
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    
    elsif ($bit[$n-1] < $bit_width) {

	# divide by zero
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}

	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}

	# divide by zero
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";

    
  NEXT:
}


exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}


            </parameters>

            <parameters name="6">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for multiplexor(6) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

$Round = 1;

#--------------------------------------------------------------------------#
# Type: Table lookup for delay_fullpath
#--------------------------------------------------------------------------#
$n = 0;

while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {

	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;

	$_ = <TMP>;
	$i = 0;

	while (! /\<\s*\/data\s*\>/ ) {

	    # path 
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }

	    # inport
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # outport
	     if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # internal
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }

	    $_ = <TMP>;
	}
    }
}
close(TMP);

$bit_width = $ARGV[1];
$line_num = $i;


for ($k = 0; $k < $line_num; $k++) {

    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }

    if ($bit_width < $bit[0]) {

	# divide by zero
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    
    elsif ($bit[$n-1] < $bit_width) {

	# divide by zero
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}

	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}

	# divide by zero
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";

    
  NEXT:
}


exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}


            </parameters>

            <parameters name="7">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for multiplexor(7) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

$Round = 1;

#--------------------------------------------------------------------------#
# Type: Table lookup for delay_fullpath
#--------------------------------------------------------------------------#
$n = 0;

while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {

	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;

	$_ = <TMP>;
	$i = 0;

	while (! /\<\s*\/data\s*\>/ ) {

	    # path 
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }

	    # inport
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # outport
	     if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # internal
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }

	    $_ = <TMP>;
	}
    }
}
close(TMP);

$bit_width = $ARGV[1];
$line_num = $i;


for ($k = 0; $k < $line_num; $k++) {

    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }

    if ($bit_width < $bit[0]) {

	# divide by zero
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    
    elsif ($bit[$n-1] < $bit_width) {

	# divide by zero
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}

	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}

	# divide by zero
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";

    
  NEXT:
}


exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}


            </parameters>

            <parameters name="8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for multiplexor(8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

$Round = 1;

#--------------------------------------------------------------------------#
# Type: Table lookup for delay_fullpath
#--------------------------------------------------------------------------#
$n = 0;

while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {

	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;

	$_ = <TMP>;
	$i = 0;

	while (! /\<\s*\/data\s*\>/ ) {

	    # path 
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }

	    # inport
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # outport
	     if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # internal
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }

	    $_ = <TMP>;
	}
    }
}
close(TMP);

$bit_width = $ARGV[1];
$line_num = $i;


for ($k = 0; $k < $line_num; $k++) {

    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }

    if ($bit_width < $bit[0]) {

	# divide by zero
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    
    elsif ($bit[$n-1] < $bit_width) {

	# divide by zero
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}

	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}

	# divide by zero
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";

    
  NEXT:
}


exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}


            </parameters>

            <parameters name="9">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for multiplexor(9) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

$Round = 1;

#--------------------------------------------------------------------------#
# Type: Table lookup for delay_fullpath
#--------------------------------------------------------------------------#
$n = 0;

while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {

	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;

	$_ = <TMP>;
	$i = 0;

	while (! /\<\s*\/data\s*\>/ ) {

	    # path 
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }

	    # inport
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # outport
	     if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # internal
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }

	    $_ = <TMP>;
	}
    }
}
close(TMP);

$bit_width = $ARGV[1];
$line_num = $i;


for ($k = 0; $k < $line_num; $k++) {

    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }

    if ($bit_width < $bit[0]) {

	# divide by zero
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    
    elsif ($bit[$n-1] < $bit_width) {

	# divide by zero
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}

	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}

	# divide by zero
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";

    
  NEXT:
}


exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}


            </parameters>

            <parameters name="10">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for multiplexor(10) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

$Round = 1;

#--------------------------------------------------------------------------#
# Type: Table lookup for delay_fullpath
#--------------------------------------------------------------------------#
$n = 0;

while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {

	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;

	$_ = <TMP>;
	$i = 0;

	while (! /\<\s*\/data\s*\>/ ) {

	    # path 
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }

	    # inport
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # outport
	     if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # internal
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }

	    $_ = <TMP>;
	}
    }
}
close(TMP);

$bit_width = $ARGV[1];
$line_num = $i;


for ($k = 0; $k < $line_num; $k++) {

    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }

    if ($bit_width < $bit[0]) {

	# divide by zero
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    
    elsif ($bit[$n-1] < $bit_width) {

	# divide by zero
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}

	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}

	# divide by zero
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";

    
  NEXT:
}


exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}


            </parameters>

            <parameters name="11">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for multiplexor(11) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

$Round = 1;

#--------------------------------------------------------------------------#
# Type: Table lookup for delay_fullpath
#--------------------------------------------------------------------------#
$n = 0;

while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {

	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;

	$_ = <TMP>;
	$i = 0;

	while (! /\<\s*\/data\s*\>/ ) {

	    # path 
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }

	    # inport
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # outport
	     if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # internal
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }

	    $_ = <TMP>;
	}
    }
}
close(TMP);

$bit_width = $ARGV[1];
$line_num = $i;


for ($k = 0; $k < $line_num; $k++) {

    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }

    if ($bit_width < $bit[0]) {

	# divide by zero
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    
    elsif ($bit[$n-1] < $bit_width) {

	# divide by zero
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}

	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}

	# divide by zero
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";

    
  NEXT:
}


exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}


            </parameters>

            <parameters name="12">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for multiplexor(12) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

$Round = 1;

#--------------------------------------------------------------------------#
# Type: Table lookup for delay_fullpath
#--------------------------------------------------------------------------#
$n = 0;

while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {

	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;

	$_ = <TMP>;
	$i = 0;

	while (! /\<\s*\/data\s*\>/ ) {

	    # path 
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }

	    # inport
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # outport
	     if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # internal
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }

	    $_ = <TMP>;
	}
    }
}
close(TMP);

$bit_width = $ARGV[1];
$line_num = $i;


for ($k = 0; $k < $line_num; $k++) {

    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }

    if ($bit_width < $bit[0]) {

	# divide by zero
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    
    elsif ($bit[$n-1] < $bit_width) {

	# divide by zero
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}

	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}

	# divide by zero
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";

    
  NEXT:
}


exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}


            </parameters>

            <parameters name="13">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for multiplexor(13) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

$Round = 1;

#--------------------------------------------------------------------------#
# Type: Table lookup for delay_fullpath
#--------------------------------------------------------------------------#
$n = 0;

while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {

	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;

	$_ = <TMP>;
	$i = 0;

	while (! /\<\s*\/data\s*\>/ ) {

	    # path 
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }

	    # inport
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # outport
	     if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # internal
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }

	    $_ = <TMP>;
	}
    }
}
close(TMP);

$bit_width = $ARGV[1];
$line_num = $i;


for ($k = 0; $k < $line_num; $k++) {

    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }

    if ($bit_width < $bit[0]) {

	# divide by zero
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    
    elsif ($bit[$n-1] < $bit_width) {

	# divide by zero
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}

	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}

	# divide by zero
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";

    
  NEXT:
}


exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}


            </parameters>

            <parameters name="14">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for multiplexor(14) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

$Round = 1;

#--------------------------------------------------------------------------#
# Type: Table lookup for delay_fullpath
#--------------------------------------------------------------------------#
$n = 0;

while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {

	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;

	$_ = <TMP>;
	$i = 0;

	while (! /\<\s*\/data\s*\>/ ) {

	    # path 
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }

	    # inport
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # outport
	     if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # internal
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }

	    $_ = <TMP>;
	}
    }
}
close(TMP);

$bit_width = $ARGV[1];
$line_num = $i;


for ($k = 0; $k < $line_num; $k++) {

    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }

    if ($bit_width < $bit[0]) {

	# divide by zero
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    
    elsif ($bit[$n-1] < $bit_width) {

	# divide by zero
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}

	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}

	# divide by zero
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";

    
  NEXT:
}


exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}


            </parameters>

            <parameters name="15">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for multiplexor(15) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

$Round = 1;

#--------------------------------------------------------------------------#
# Type: Table lookup for delay_fullpath
#--------------------------------------------------------------------------#
$n = 0;

while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {

	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;

	$_ = <TMP>;
	$i = 0;

	while (! /\<\s*\/data\s*\>/ ) {

	    # path 
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }

	    # inport
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # outport
	     if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # internal
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }

	    $_ = <TMP>;
	}
    }
}
close(TMP);

$bit_width = $ARGV[1];
$line_num = $i;


for ($k = 0; $k < $line_num; $k++) {

    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }

    if ($bit_width < $bit[0]) {

	# divide by zero
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    
    elsif ($bit[$n-1] < $bit_width) {

	# divide by zero
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}

	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}

	# divide by zero
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";

    
  NEXT:
}


exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}


            </parameters>

            <parameters name="16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for multiplexor(16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

$Round = 1;

#--------------------------------------------------------------------------#
# Type: Table lookup for delay_fullpath
#--------------------------------------------------------------------------#
$n = 0;

while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {

	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;

	$_ = <TMP>;
	$i = 0;

	while (! /\<\s*\/data\s*\>/ ) {

	    # path 
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }

	    # inport
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # outport
	     if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # internal
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }

	    $_ = <TMP>;
	}
    }
}
close(TMP);

$bit_width = $ARGV[1];
$line_num = $i;


for ($k = 0; $k < $line_num; $k++) {

    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }

    if ($bit_width < $bit[0]) {

	# divide by zero
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    
    elsif ($bit[$n-1] < $bit_width) {

	# divide by zero
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}

	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}

	# divide by zero
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";

    
  NEXT:
}


exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}


            </parameters>

          </est_index>

        </est_type>

        <est_type name="power">

          <est_index name="static_power">

            <parameters name="2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for multiplexor(2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="3">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for multiplexor(3) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for multiplexor(4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="5">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for multiplexor(5) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="6">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for multiplexor(6) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="7">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for multiplexor(7) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for multiplexor(8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="9">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for multiplexor(9) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="10">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for multiplexor(10) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="11">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for multiplexor(11) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="12">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for multiplexor(12) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="13">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for multiplexor(13) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="14">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for multiplexor(14) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="15">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for multiplexor(15) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for multiplexor(16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

          </est_index>

        </est_type>

        <est_type name="function_cycle">
          <est_index name="cycle">
            <parameters name="2">
              <script>
                <![CDATA[
#!/usr/bin/perl
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="3">
              <script>
                <![CDATA[
#!/usr/bin/perl
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="4">
              <script>
                <![CDATA[
#!/usr/bin/perl
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="5">
              <script>
                <![CDATA[
#!/usr/bin/perl
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="6">
              <script>
                <![CDATA[
#!/usr/bin/perl
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="7">
              <script>
                <![CDATA[
#!/usr/bin/perl
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="8">
              <script>
                <![CDATA[
#!/usr/bin/perl
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="9">
              <script>
                <![CDATA[
#!/usr/bin/perl
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="10">
              <script>
                <![CDATA[
#!/usr/bin/perl
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="11">
              <script>
                <![CDATA[
#!/usr/bin/perl
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="12">
              <script>
                <![CDATA[
#!/usr/bin/perl
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="13">
              <script>
                <![CDATA[
#!/usr/bin/perl
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="14">
              <script>
                <![CDATA[
#!/usr/bin/perl
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="15">
              <script>
                <![CDATA[
#!/usr/bin/perl
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="16">
              <script>
                <![CDATA[
#!/usr/bin/perl
print "0";
                ]]>
              </script>
            </parameters>
          </est_index>

          <est_index name="latency">
            <parameters name="2">
              <script>
                <![CDATA[
#!/usr/bin/perl
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="3">
              <script>
                <![CDATA[
#!/usr/bin/perl
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="4">
              <script>
                <![CDATA[
#!/usr/bin/perl
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="5">
              <script>
                <![CDATA[
#!/usr/bin/perl
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="6">
              <script>
                <![CDATA[
#!/usr/bin/perl
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="7">
              <script>
                <![CDATA[
#!/usr/bin/perl
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="8">
              <script>
                <![CDATA[
#!/usr/bin/perl
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="9">
              <script>
                <![CDATA[
#!/usr/bin/perl
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="10">
              <script>
                <![CDATA[
#!/usr/bin/perl
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="11">
              <script>
                <![CDATA[
#!/usr/bin/perl
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="12">
              <script>
                <![CDATA[
#!/usr/bin/perl
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="13">
              <script>
                <![CDATA[
#!/usr/bin/perl
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="14">
              <script>
                <![CDATA[
#!/usr/bin/perl
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="15">
              <script>
                <![CDATA[
#!/usr/bin/perl
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="16">
              <script>
                <![CDATA[
#!/usr/bin/perl
print "0";
                ]]>
              </script>
            </parameters>
          </est_index>

          <est_index name="throughput">
            <parameters name="2">
              <script>
                <![CDATA[
#!/usr/bin/perl
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="3">
              <script>
                <![CDATA[
#!/usr/bin/perl
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="4">
              <script>
                <![CDATA[
#!/usr/bin/perl
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="5">
              <script>
                <![CDATA[
#!/usr/bin/perl
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="6">
              <script>
                <![CDATA[
#!/usr/bin/perl
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="7">
              <script>
                <![CDATA[
#!/usr/bin/perl
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="8">
              <script>
                <![CDATA[
#!/usr/bin/perl
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="9">
              <script>
                <![CDATA[
#!/usr/bin/perl
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="10">
              <script>
                <![CDATA[
#!/usr/bin/perl
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="11">
              <script>
                <![CDATA[
#!/usr/bin/perl
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="12">
              <script>
                <![CDATA[
#!/usr/bin/perl
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="13">
              <script>
                <![CDATA[
#!/usr/bin/perl
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="14">
              <script>
                <![CDATA[
#!/usr/bin/perl
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="15">
              <script>
                <![CDATA[
#!/usr/bin/perl
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="16">
              <script>
                <![CDATA[
#!/usr/bin/perl
print "0";
                ]]>
              </script>
            </parameters>

          </est_index>

        </est_type>

        <est_type name="function_power">

        </est_type>

    
      </estimation_method>

    </estimation>


  </model>
</FHM>
