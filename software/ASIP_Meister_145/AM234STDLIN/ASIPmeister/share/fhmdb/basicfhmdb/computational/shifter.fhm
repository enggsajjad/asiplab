<?xml version="1.0" encoding="UTF-8" ?>
<!-- Modified by T.Hamabe on 2006/12/05 -->
<!-- Modified by T.Hamabe on 2006/11/30 -->
<FHM>
  <model_name> shifter </model_name>

  <model>
    <design_level> behavior </design_level>
    <version> 1.0 </version>
    <author> <![CDATA[ Yamane Yukinori ]]> </author>
    <affiliation> <![CDATA[ Osaka Univ. ]]> </affiliation>
    <model_info> <![CDATA[
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                %
%    Copyright 2008 ASIP Solutions, Inc. All rights reserved.    %
%              Copyright 2002-2005 PEAS Project                  %
%                                                                %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
]]> </model_info>

    <parameter>
      <parameter_value key="bit_width">
        <value> 4 </value>
        <value> 8 </value>
        <value> 12 </value>
        <value> 16 </value>
        <value> 20 </value>
        <value> 24 </value>
        <value> 28 </value>
        <value> 32 </value>
        <value> 36 </value>
        <value> 40 </value>
        <value> 44 </value>
        <value> 48 </value>
        <value> 52 </value>
        <value> 56 </value>
        <value> 60 </value>
        <value> 64 </value>
      </parameter_value>
      <parameter_value key="amount">
        <value> variable </value>
        <value> 1 </value>
        <value> 2 </value>
        <value> 4 </value>
        <value> 8 </value>
        <value> 16 </value>
        <value> 32 </value>
      </parameter_value>
    </parameter>

    <function_description>
      <script>
        <![CDATA[
#!/usr/bin/perl
# this script generates shifter function definition in behavior level
# parameter : bit_width

if ($#ARGV != 1){
    print "number of parameters is wrong.\n";
    print "usage : this_script bit_width amount\n";
    exit (100);
}

$bit_width = $ARGV[0];
$bit_width_1 = $bit_width - 1;
$ctrl_width    = log($bit_width)/log(2);
if ($ctrl_width == int($ctrl_width)){
    $ctrl_width = int($ctrl_width);
}
else{
    $ctrl_width = int($ctrl_width) + 1;
}
$ctrl_width_1  = $ctrl_width - 1;
$amount        = $ARGV[1];

if ($amount eq "variable"){
  $info = "shift variable bit";
  $func = "shiftv";
  $func_par = "data_in, mode, ctrl";
  print "unsigned shiftv(unsigned data_in, unsigned mode, unsigned ctrl);\n\n";
}
else{
  if ($bit_width <= $amount){
    print "The value of \"bit_width\" must be greater than the value of \"amount\".\n";
    exit (100); 
  }
  $info = "shift $amount bit";
  $func = "shift";
  $func_par = "data_in, mode";
  print "unsigned shift(unsigned data_in, unsigned mode);\n\n";
}
{
print <<FHM_DL_FUNCTION
/** ${bit_width}-bit shifter : ${info} */
model shifter_var{
  port{
    in  data_in[${bit_width_1}:0], mode[1:0], ctrl[${ctrl_width_1}:0];
    out data_out[${bit_width_1}:0];
  }

  /** shift left logical */
  function sll{
    input{
      unsigned data_in;
      unsigned ctrl;
    }
    output{
      unsigned data_out = ${func}(${func_par});
    }
    control{
      unsigned mode;
    }
    protocol{
      [mode == "00"]{
	valid data_out;
      }
    }
  }
  
  /** shift left arithmetic */
  function sla{
    input{
      unsigned data_in;
      unsigned ctrl;
    }
    output{
      unsigned data_out = ${func}(${func_par});
    }
    control{
      unsigned mode;
    }
    protocol{
      [mode == "01"]{
	valid data_out;
      }
    }
  }

  /** shift right logical */
  function srl{
    input{
      unsigned data_in;
      unsigned ctrl;
    }
    output{
      unsigned data_out = ${func}(${func_par});
    }
    control{
      unsigned mode;
    }
    protocol{
      [mode == "10"]{
	valid data_out;
      }
    }
  }

  /** shift right arithmetic */
  function sra{
    input{
      unsigned data_in;
      unsigned ctrl;
    }
    output{
      unsigned data_out = ${func}(${func_par});
    }
    control{
      unsigned mode;
    }
    protocol{
      [mode == "11"]{
	valid data_out;
      }
    }
  }
FHM_DL_FUNCTION
}
exit (0);
        ]]>
      </script>
    </function_description>

    <function_conv>
      <script>
        <![CDATA[
#!/usr/bin/perl
# this script generates shifter function definition in behavior level
# parameter : bit_width

if ($#ARGV != 1){
    print "number of parameters is wrong.\n";
    print "usage : this_script bit_width amount\n";
    exit (100);
}

$bit_width = $ARGV[0];
$bit_width_1 = $bit_width - 1;
$ctrl_width    = log($bit_width)/log(2);
if ($ctrl_width == int($ctrl_width)){
    $ctrl_width = int($ctrl_width);
}
else{
    $ctrl_width = int($ctrl_width) + 1;
}
$ctrl_width_1  = $ctrl_width - 1;
$amount        = $ARGV[1];

if ($amount eq "variable") {
  $in_ctrl = "bit [$ctrl_width_1:0] ctrl;";
  $ctrl_ctrl = "";
  $prtcl_ctrl = "";
}
else {
  $tmp_w = $bit_width/2;
  $tmp_a = $amount;

  while ( $tmp_w > 0 ) {
    $diff = $tmp_a - $tmp_w;
    $tmp_w = int($tmp_w/2);
    if ($diff >= 0) {
      $ctrl_bin .= "1";
      $tmp_a = $diff;
    }
    else {
      $ctrl_bin .= "0";
    }
  }

  $in_ctrl = "";
  $ctrl_ctrl = "in bit [$ctrl_width_1:0] ctrl;";
  $prtcl_ctrl = "ctrl = \"$ctrl_bin\";";
}

{
print <<FHM_DL_FUNCTION
/** shift left logical */
function sll {
  input {
    bit [$bit_width_1:0] data_in;
    $in_ctrl
  }
  output {
    bit [$bit_width_1:0] data_out;
  }
  control {
    in bit [1:0] mode;
    $ctrl_ctrl
  }
  protocol {
    single_cycle_protocol {
      mode = "00";
      $prtcl_ctrl
    }
  }
}

/** shift left arithmetic */
function sla {
  input {
    bit [$bit_width_1:0] data_in;
    $in_ctrl
  }
  output {
    bit [$bit_width_1:0] data_out;
  }
  control {
    in bit [1:0] mode;
    $ctrl_ctrl
  }
  protocol {
    single_cycle_protocol {
      mode = "01";
      $prtcl_ctrl
    }
  }
}

/** shift right logical */
function srl {
  input {
    bit [$bit_width_1:0] data_in;
    $in_ctrl
  }
  output {
    bit [$bit_width_1:0] data_out;
  }
  control {
    in bit [1:0] mode;
    $ctrl_ctrl
  }
  protocol {
    single_cycle_protocol {
      mode = "10";
      $prtcl_ctrl
    }
  }
}

/** shift right arithmetic */
function sra {
  input {
    bit [$bit_width_1:0] data_in;
    $in_ctrl
  }
  output {
    bit [$bit_width_1:0] data_out;
  }
  control {
    in bit [1:0] mode;
    $ctrl_ctrl
  }
  protocol {
    single_cycle_protocol {
      mode = "11";
      $prtcl_ctrl
    }
  }
}

FHM_DL_FUNCTION
}
exit (0);
        ]]>
      </script>
    </function_conv>

    <function_port>
      <script>
        <![CDATA[
#!/usr/bin/perl
# this script generates shifter port infomation in behavior level
# parameter : bit_width

if ($#ARGV != 1){
    print "number of parameters is wrong.\n";
    print "usage : this_script bit_width amount\n";
    exit (100);
}


$bit_width = $ARGV[0];
$bit_width_1 = $bit_width - 1;
$ctrl_width    = log($bit_width)/log(2);
if ($ctrl_width == int($ctrl_width)){
    $ctrl_width = int($ctrl_width);
}
else{
    $ctrl_width = int($ctrl_width) + 1;
}
$ctrl_width_1  = $ctrl_width - 1;
$amount        = $ARGV[1];

if ($amount eq "variable") {
  $ctrl_attr = "data";
}
else {
  if ($bit_width <= $amount){
    print "The value of \"bit_width\" must be greater than the value of \"amount\".\n";
    exit (100); 
  }
  $ctrl_attr = "ctrl";
}

{
print <<FHM_DL_PORTINFO
data_in	in	bit_vector   $bit_width_1   0	data
mode	in	bit_vector   1   0	mode
ctrl	in	bit_vector   $ctrl_width_1   0	$ctrl_attr
data_out	out	bit_vector   $bit_width_1   0	data
FHM_DL_PORTINFO
}
exit (0);

        ]]>
      </script>
    </function_port>

    <design>
      <design_lang> vhdl </design_lang>

      <instance>
        <script>
          <![CDATA[
#!/usr/bin/perl
# this script generates shifter instance in behavior level
# parameter : instance_name bit_width

if ($#ARGV != 2){
    print "number of parameters is wrong.\n";
    print "usage : this_script instance_name bit_width amount\n";
    exit (100);
}


$instance_name = $ARGV[0];
$bit_width     = $ARGV[1];
$amount        = $ARGV[2];
$bit_width_1   = $bit_width - 1;
$bit_width_2   = $bit_width - 2;

$ctrl_width    = log($bit_width)/log(2);
if ($ctrl_width == int($ctrl_width)){
    $ctrl_width = int($ctrl_width);
}
else{
    $ctrl_width = int($ctrl_width) + 1;
}
$ctrl_width_1  = $ctrl_width - 1;

{
print <<FHM_DL_INSTANCE_HEAD1
-- Module     : Shifter
-- Feature    : Shift Right or Left, Arithmetic or Logic
-- References : Started from scratch.
-- Author     : Designed by T.Morifuji (c)1996.

-- Version    : 1.1  : Modified by K.Ueda 2001/12/12
--                     Add rotate function
--            : 1.2  : Modified by Y.Yamane 2001/12/26
--            : 1.3  : Modified by Y.Yamane 2001/01/15

-- Comment :
--  mode
--   00  : shift left  logic
--   01  : shift left  arithmetic
--   10  : shift right logic
--   11  : shift right arithmetic

FHM_DL_INSTANCE_HEAD1
}

if ("$amount" eq "variable"){
    print ("--  ctrl : shift amount\n");
}else{
    print ("--  ctrl : shift amount (ignore)\n");
}

{
print <<FHM_DL_INSTANCE_HEAD2


library IEEE;
  use IEEE.std_logic_1164.all;
  use IEEE.std_logic_arith.all;
  use IEEE.std_logic_unsigned.all;

entity $instance_name is
  port (data_in   : in  std_logic_vector($bit_width_1 downto 0);
        mode      : in  std_logic_vector(1 downto 0);
        ctrl      : in  std_logic_vector($ctrl_width_1 downto 0);
        data_out  : out std_logic_vector($bit_width_1 downto 0));
end $instance_name;

FHM_DL_INSTANCE_HEAD2
}

if ("$amount" eq "variable"){
print <<FHM_DL_V_INSTANCE
architecture behavior of $instance_name is

begin

  process(data_in, mode, ctrl)

    variable tmp : std_logic_vector($bit_width_1 downto 0);
    variable amount : integer range 0 to $bit_width_1;

  begin

    amount := conv_integer(unsigned(ctrl));

    case mode is
      when "00" =>  -- SLL
        tmp($bit_width_1 downto amount) :=
          data_in($bit_width_1-amount downto 0);
        tmp(amount-1 downto 0) := (others => '0'); 
      when "01" =>  -- SLA
        tmp($bit_width_1) := data_in($bit_width_1);
        tmp($bit_width_2 downto amount) :=
          data_in($bit_width_2-amount downto 0);
        tmp(amount-1 downto 0) := (others => '0'); 
      when "10" =>  -- SRL
        tmp($bit_width_1 downto $bit_width-amount) := (others => '0');
        tmp($bit_width_1-amount downto 0) :=
          data_in($bit_width-1 downto amount);
      when "11" =>  -- SRA
        tmp($bit_width_1) := data_in($bit_width_1);
        tmp($bit_width_2 downto $bit_width_1-amount) :=
          (others => data_in($bit_width_1));
        tmp($bit_width_1-amount downto 0) :=
          data_in($bit_width-1 downto amount);
      when others =>
        tmp := (others => 'X');
    end case;

    data_out <= tmp;

  end process;
end behavior;
FHM_DL_V_INSTANCE

}elsif ($amount > 0){
 if ($amount == 1){
print <<FHM_DL_F_INSTANCE
architecture behavior of $instance_name is

begin

  process(data_in, mode)

    variable tmp : std_logic_vector($bit_width_1 downto 0);

  begin

    case mode is
      when "00" =>  -- SLL
        tmp($bit_width_1 downto $amount) :=
          data_in($bit_width_1-$amount downto 0);
        tmp(0) := '0'; 
      when "01" =>  -- SLA
        tmp($bit_width_1) := data_in($bit_width_1);
        tmp($bit_width_2 downto $amount) :=
          data_in($bit_width_2-$amount downto 0);
        tmp(0) := '0'; 
      when "10" =>  -- SRL
        tmp($bit_width_1) := '0';
        tmp($bit_width_1-$amount downto 0) :=
          data_in($bit_width-1 downto $amount);
      when "11" =>  -- SRA
        tmp($bit_width_1) := data_in($bit_width_1);
        tmp($bit_width_1-$amount downto 0) :=
          data_in($bit_width-1 downto $amount);
      when others =>
        tmp := (others => 'X');
    end case;

    data_out <= tmp;

  end process;
end behavior;
FHM_DL_F_INSTANCE
 }else{
print <<FHM_DL_F_INSTANCE
architecture behavior of $instance_name is

begin

  process(data_in, mode)

    variable tmp : std_logic_vector($bit_width_1 downto 0);

  begin

    case mode is
      when "00" =>  -- SLL
        tmp($bit_width_1 downto $amount) :=
          data_in($bit_width_1-$amount downto 0);
        tmp($amount-1 downto 0) := (others => '0'); 
      when "01" =>  -- SLA
        tmp($bit_width_1) := data_in($bit_width_1);
        tmp($bit_width_2 downto $amount) :=
          data_in($bit_width_2-$amount downto 0);
        tmp($amount-1 downto 0) := (others => '0'); 
      when "10" =>  -- SRL
        tmp($bit_width_1 downto $bit_width-$amount) := (others => '0');
        tmp($bit_width_1-$amount downto 0) :=
          data_in($bit_width-1 downto $amount);
      when "11" =>  -- SRA
        tmp($bit_width_1) := data_in($bit_width_1);
        tmp($bit_width_2 downto $bit_width-$amount) :=
          (others => data_in($bit_width_1));
        tmp($bit_width_1-$amount downto 0) :=
          data_in($bit_width-1 downto $amount);
      when others =>
        tmp := (others => 'X');
    end case;

    data_out <= tmp;

  end process;
end behavior;
FHM_DL_F_INSTANCE
}
}elsif ($amount == 0){
print <<FHM_DL_Z_INSTANCE
architecture behavior of $instance_name is

begin

  process(data_in, mode)

  begin

    data_out <= data_in;

  end process;
end behavior;
FHM_DL_Z_INSTANCE

}else{
        print "amount $amount is not supported.\n";
        exit (100);
}
exit (0);
          ]]>
        </script>
      </instance>

      <entity></entity>

      <testvector>
        <testvector_script>
          <![CDATA[ ]]>
        </testvector_script>
      </testvector>

      <synthesis></synthesis>
    </design>

    <design>
      <design_lang> Verilog </design_lang>
                                                                                
      <instance>
        <script>
          <![CDATA[
#!/usr/bin/perl
# this script generates shifter instance in behavior level
# parameter : instance_name bit_width

if ($#ARGV != 2){
    print "number of parameters is wrong.\n";
    print "usage : this_script instance_name bit_width amount\n";
    exit (100);
}


$instance_name = $ARGV[0];
$bit_width     = $ARGV[1];
$amount        = $ARGV[2];
$amount_1      = $amount - 1;
$bit_width_1   = $bit_width - 1;
$bit_width_2   = $bit_width - 2;

$ctrl_width    = log($bit_width)/log(2);
if ($ctrl_width == int($ctrl_width)){
    $ctrl_width = int($ctrl_width);
}
else{
    $ctrl_width = int($ctrl_width) + 1;
}
$ctrl_width_1  = $ctrl_width - 1;

{
print <<FHM_DL_INSTANCE_HEAD1
// Module     : Shifter
// Feature    : Shift Right or Left, Arithmetic or Logic
// References : Started from scratch.
// Author     : Designed by T.Morifuji (c)1996.
\n
// Version    : 1.1  : Modified by K.Ueda 2001/12/12
//                     Add rotate function
//            : 1.2  : Modified by Y.Yamane 2001/12/26
//            : 1.3  : Modified by Y.Yamane 2001/01/15
\n
// Comment :
//  mode
//   00  : shift left  logic
//   01  : shift left  arithmetic
//   10  : shift right logic
//   11  : shift right arithmetic
\n
FHM_DL_INSTANCE_HEAD1
}

if ("$amount" eq "variable"){
    print ("//  ctrl : shift amount\n");
}else{
    print ("//  ctrl : shift amount (ignore)\n");
}

{
print <<FHM_DL_INSTANCE_HEAD2
module $instance_name (
  data_in  ,
  mode     ,
  ctrl     ,
  data_out );
\n
input  [$bit_width_1:0] data_in  ;
input  [ 1:0] mode     ;
input  [$ctrl_width_1:0]  ctrl     ;
output [$bit_width_1:0] data_out ;
\n
wire  [$bit_width_1:0] data_in  ;
wire  [ 1:0] mode     ;
wire  [$ctrl_width_1:0]  ctrl     ;
reg   [$bit_width_1:0] data_out ;
\n
FHM_DL_INSTANCE_HEAD2
}

if ("$amount" eq "variable"){
print <<FHM_DL_V_INSTANCE
integer i, j   ;
integer amount ;
\n
always@ (data_in or mode or ctrl)
begin
  amount = ctrl;
    case (mode)
      2'b00 :  // SLL
      begin
        j = $bit_width_1 - amount ;
        for (i = $bit_width_1 ; i >= amount ; i = i - 1) // data_out[$bit_width_1:amount] = data_in[$bit_width_1-amount:0] ;
        begin
          data_out[i] = data_in[j] ;
          j = j - 1 ;
        end
        for (i = amount - 1 ; i >= 0 ; i = i - 1)
        begin
          data_out[i] = 1'b0 ;
        end
      end 
      2'b01 :  // SLA
      begin
        data_out[$bit_width_1] = data_in[$bit_width_1] ;
        j = $bit_width_2 - amount ;
        for (i = $bit_width_2 ; i >= amount ; i = i - 1) // data_out[$bit_width_2:amount] = data_in[$bit_width_2-amount:0] ;
        begin
          data_out[i] = data_in[j] ;
          j = j - 1 ;
        end
        for (i = amount - 1 ; i >= 0 ; i = i - 1)
        begin
          data_out[i] = 1'b0 ;
        end
      end
      2'b10 :  // SRL
      begin
        for (i = $bit_width_1 ; i >= $bit_width - amount ; i = i - 1)
        begin
          data_out[i] = 1'b0 ;
        end
        j = $bit_width_1 ;
        for (i = $bit_width_1 - amount ; i >= 0 ; i = i - 1) // data_out[$bit_width_1-amount:0] = data_in[$bit_width_1:amount] ;
        begin
          data_out[i] = data_in[j] ;
          j = j - 1 ;
        end
      end
      2'b11 :  // SRA
      begin
        data_out[$bit_width_1] = data_in[$bit_width_1] ;
        for (i = $bit_width_2 ; i >= $bit_width_1 - amount ; i = i - 1)
        begin
          data_out[i] = data_in[$bit_width_1] ;
        end
        j = $bit_width_1 ;
        for (i = $bit_width_1 - amount ; i >= 0 ; i = i - 1) // data_out[$bit_width_1-amount:0] = data_in[$bit_width_1:amount] ;
        begin
          data_out[i] = data_in[j] ;
          j = j - 1 ;
        end
      end
      default :
      begin
        data_out = \{$bit_width\{1'bX}};
      end
    endcase
\n
end
\n
endmodule
FHM_DL_V_INSTANCE

}elsif ($amount > 0){
 if ($amount == 1){
print <<FHM_DL_F_INSTANCE
always@ (data_in or mode)
  begin
    case (mode)
      2'b00 : // SLL
      begin
        data_out[$bit_width_1:$amount] = data_in[$bit_width_1-$amount:0];
        data_out[0] = 1'b0; 
      end
      2'b01 : // SLA
      begin
        data_out[$bit_width_1] = data_in[$bit_width_1];
        data_out[$bit_width_2:$amount] = data_in[$bit_width_2-$amount:0];
        data_out[0] = 1'b0; 
      end
      2'b10 : // SRL
      begin
        data_out[$bit_width_1] = 1'b0;
        data_out[$bit_width_1-$amount:0] = data_in[$bit_width-1:$amount];
      end
      2'b11 : // SRA
      begin
        data_out[$bit_width_1] = data_in[$bit_width_1];
        data_out[$bit_width_1-$amount:0] = data_in[$bit_width-1:$amount];
      end
      default :
      begin
        data_out = \{$bit_width\{1'bX}};
      end
endcase
\n
end
\n
endmodule
FHM_DL_F_INSTANCE
 }else{
print <<FHM_DL_F_INSTANCE
always@ (data_in or mode)
  begin
    case (mode)
      2'b00 : // SLL
      begin
        data_out[$bit_width_1:$amount] = data_in[$bit_width_1-$amount:0];
        data_out[$amount-1:0] = \{$amount\{1'b0}}; 
      end
      2'b01 : // SLA
      begin
        data_out[$bit_width_1] = data_in[$bit_width_1];
        data_out[$bit_width_2:$amount] = data_in[$bit_width_2-$amount:0];
        data_out[$amount-1:0] = \{$amount\{1'b0}}; 
      end
      2'b10 : // SRL
      begin
        data_out[$bit_width_1:$bit_width-$amount] = \{$amount\{1'b0}};
        data_out[$bit_width_1-$amount:0] = data_in[$bit_width-1:$amount];
      end
      2'b11 : // SRA
      begin
        data_out[$bit_width_1] = data_in[$bit_width_1];
        data_out[$bit_width_2:$bit_width-$amount] = \{$amount_1\{data_in[$bit_width_1]}};
        data_out[$bit_width_1-$amount:0] = data_in[$bit_width-1:$amount];
      end
      default :
      begin
        data_out = \{$bit_width\{1'bX}};
      end
endcase
\n
end
\n
endmodule
FHM_DL_F_INSTANCE
 } 
}elsif ($amount == 0){
print <<FHM_DL_Z_INSTANCE
architecture behavior of $instance_name is

begin

  process(data_in, mode)

  begin

    data_out <= data_in;

  end process;
end behavior;
FHM_DL_Z_INSTANCE

}else{
        print "amount $amount is not supported.\n";
        exit (100);
}
exit (0);
          ]]>
        </script>
      </instance>
                                                                                
      <entity></entity>
                                                                                
      <testvector></testvector>
                                                                                
      <synthesis></synthesis>
    </design>

    <design>
      <design_lang> SystemC Header </design_lang>

      <instance>
        <script>
          <![CDATA[
#!/usr/bin/perl
# this script generates shifter instance in behavior level
# parameter : name_space instance_name bit_width

if ($#ARGV != 3){
    print "number of parameters is wrong.\n";
    print "usage : this_script name_space instance_name bit_width amount\n";
    exit (100);
}

$name_space    = $ARGV[0];
$instance_name = $ARGV[1];
$bit_width     = $ARGV[2];
$amount        = $ARGV[3];

$bit_width_1   = $bit_width - 1;
$bit_width_2   = $bit_width - 2;

$ctrl_width    = log($bit_width)/log(2);
if ($ctrl_width == int($ctrl_width)){
    $ctrl_width = int($ctrl_width);
}
else{
    $ctrl_width = int($ctrl_width) + 1;
}
$ctrl_width_1  = $ctrl_width - 1;

if ($bit_width <= 64) {
    $input_type = "sc_dt::sc_uint<$bit_width>";
} else {
    $input_type = "sc_dt::sc_biguint<$bit_width>";
}

if ($ctrl_width <= 64) {
    $ctrl_type = "sc_dt::sc_uint<$ctrl_width>";
} else {
    $ctrl_type = "sc_dt::sc_biguint<$ctrl_type>";
}

$macro = "__" . uc($name_space) . "_" . uc($instance_name) . "_H__";

{
print <<FHM_DL_INSTANCE_HEAD1
#ifndef $macro
#define $macro 1

// Module     : Shifter
// Feature    : Shift Right or Left, Arithmetic or Logic
// References : Started from scratch.
// Author     : Designed by T.Morifuji (c)1996.

// Version    : 1.1  : Modified by K.Ueda 2001/12/12
//                     Add rotate function
//            : 1.2  : Modified by Y.Yamane 2001/12/26
//            : 1.3  : Modified by Y.Yamane 2001/01/15

// Comment :
//  mode
//   00  : shift left  logic
//   01  : shift left  arithmetic
//   10  : shift right logic
//   11  : shift right arithmetic

FHM_DL_INSTANCE_HEAD1
}

if ("$amount" eq "variable"){
    print ("//  ctrl : shift amount\n");
}else{
    print ("//  ctrl : shift amount (ignore)\n");
}

{
print <<FHM_DL_INSTANCE_HEAD2

#include <systemc>

namespace $name_space {
  SC_MODULE($instance_name) {
    sc_core::sc_in< $input_type > data_in;
    sc_core::sc_in< sc_dt::sc_uint<2> > mode;
    sc_core::sc_in< $ctrl_type > ctrl;
    sc_core::sc_out< $input_type > data_out;
  
    SC_CTOR($instance_name) :
      data_in("data_in"),
      mode("mode"),
      ctrl("ctrl"),
      data_out("data_out")
    {
      SC_METHOD(process);
      sensitive << data_in << mode << ctrl;
    }
  
    void process();
  };
};

#endif // $macro
FHM_DL_INSTANCE_HEAD2
};

exit (0);
          ]]>
        </script>
      </instance>

      <entity>
        <script>
          <![CDATA[
          ]]>
        </script>
      </entity>

      <testvector>
        <testvector_script>
          <![CDATA[ ]]>
        </testvector_script>
      </testvector>
    </design>

    <design>
      <design_lang> SystemC Program </design_lang>

      <instance>
        <script>
          <![CDATA[
#!/usr/bin/perl
# this script generates shifter instance in behavior level
# parameter : name_space instance_name bit_width

if ($#ARGV != 3){
    print "number of parameters is wrong.\n";
    print "usage : this_script name_space instance_name bit_width amount\n";
    exit (100);
}

$name_space    = $ARGV[0];
$instance_name = $ARGV[1];
$bit_width     = $ARGV[2];
$amount        = $ARGV[3];

$bit_width_1   = $bit_width - 1;
$bit_width_2   = $bit_width - 2;

$ctrl_width    = log($bit_width)/log(2);
if ($ctrl_width == int($ctrl_width)){
    $ctrl_width = int($ctrl_width);
}
else{
    $ctrl_width = int($ctrl_width) + 1;
}
$ctrl_width_1  = $ctrl_width - 1;

if ( $bit_width <= 64 ) {
  $data_type = "sc_dt::sc_int<$bit_width>";
} else {
  $data_type = "sc_dt::sc_bigint<$bit_width>";
}

{
print <<FHM_DL_INSTANCE_HEAD1
#include "${instance_name}.h"

// Module     : Shifter
// Feature    : Shift Right or Left, Arithmetic or Logic
// References : Started from scratch.
// Author     : Designed by T.Morifuji (c)1996.

// Version    : 1.1  : Modified by K.Ueda 2001/12/12
//                     Add rotate function
//            : 1.2  : Modified by Y.Yamane 2001/12/26
//            : 1.3  : Modified by Y.Yamane 2001/01/15

// Comment :
//  mode
//   00  : shift left  logic
//   01  : shift left  arithmetic
//   10  : shift right logic
//   11  : shift right arithmetic

FHM_DL_INSTANCE_HEAD1
}

if ("$amount" eq "variable"){
    print ("//  ctrl : shift amount\n");
}else{
    print ("//  ctrl : shift amount (ignore)\n");
}

{
print <<FHM_DL_INSTANCE_HEAD2

#include <systemc>

void ${name_space}::${instance_name}::process() 
{
FHM_DL_INSTANCE_HEAD2
}

if ("$amount" eq "variable"){
print <<FHM_DL_V_INSTANCE
  switch( mode.read() ) {
  case 0: // SLL
    data_out.write( data_in.read() << ctrl.read() );
    break;
  case 1: // SLA
    data_out.write( ${data_type}(data_in.read()) << ctrl.read() );
    break;
  case 2: // SRL
    data_out.write( data_in.read() >> ctrl.read() );
    break;
  case 3: // SRA
    data_out.write( ${data_type}(data_in.read()) >> ctrl.read() );
    break;
  default:
    data_out.write( "1" );
    break;
  }
FHM_DL_V_INSTANCE

}elsif ($amount > 0){
print <<FHM_DL_F_INSTANCE
  switch( mode.read() ) {
  case 0:
    data_out.write( data_in.read() << $amount );
    break;
  case 1:
    data_out.write( ${data_type}(data_in.read()) << $amount );
    break;
  case 2:
    data_out.write( data_in.read() >> $amount );
    break;
  case 3:
    data_out.write( ${data_type}(data_in.read()) >> $amount );
  default:
    data_out.write( "1" );
  }
FHM_DL_F_INSTANCE
}elsif ($amount == 0){
print <<FHM_DL_Z_INSTANCE
  data_out.write( data_in.read() );
FHM_DL_Z_INSTANCE
}else{
        print "amount $amount is not supported.\n";
        exit (100);
}

print "}\n";

exit (0);
          ]]>
        </script>
      </instance>

      <entity>
        <script>
          <![CDATA[
          ]]>
        </script>
      </entity>

      <testvector>
        <testvector_script>
          <![CDATA[ ]]>
        </testvector_script>
      </testvector>
    </design>

    <estimation>
      <estimation_data>
        <library name="OSAKA">

          <est_type name="shape">
            <est_index name="area">
              <unit> mm2 </unit>
              <translate>
                <translate_value key="gate"> 4201.68 </translate_value>
                <translate_value key="mm2">  1 </translate_value>
              </translate>

              <parameters name="variable">
                <max>
                  <data bit_width="4"> 0.0330554582928733 </data>
                  <data bit_width="8"> 0.103177984520478 </data>
                  <data bit_width="16"> 0.246919112831058 </data>
                  <data bit_width="32"> 0.715223699329792 </data>
                  <data bit_width="64"> 1.72459975747796 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.0188335725233716 </data>
                  <data bit_width="8"> 0.049282168561147 </data>
                  <data bit_width="16"> 0.121487136811942 </data>
                  <data bit_width="32"> 0.28958637211782 </data>
                  <data bit_width="64"> 0.762168451428952 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.0188335725233716 </data>
                    <data bit_width="8"> 0.049282168561147 </data>
                    <data bit_width="16"> 0.121487136811942 </data>
                    <data bit_width="32"> 0.28958637211782 </data>
                    <data bit_width="64"> 0.762168451428952 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.0330554582928733 </data>
                    <data bit_width="8"> 0.103177984520478 </data>
                    <data bit_width="16"> 0.246919112831058 </data>
                    <data bit_width="32"> 0.715223699329792 </data>
                    <data bit_width="64"> 1.72459975747796 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.0225727796976448 </data>
                    <data bit_width="8"> 0.0581620946859351 </data>
                    <data bit_width="16"> 0.140409578073532 </data>
                    <data bit_width="32"> 0.335437288417966 </data>
                    <data bit_width="64"> 0.841934199177472 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="1">
                <max>
                  <data bit_width="4"> 0.0106444424611108 </data>
                  <data bit_width="8"> 0.0171145927343348 </data>
                  <data bit_width="16"> 0.0302417604386817 </data>
                  <data bit_width="32"> 0.0573802271948363 </data>
                  <data bit_width="64"> 0.110364905942385 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.00567945179071229 </data>
                  <data bit_width="8"> 0.00946281035204966 </data>
                  <data bit_width="16"> 0.0178969231355077 </data>
                  <data bit_width="32"> 0.0347651465604234 </data>
                  <data bit_width="64"> 0.068501593886255 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.00812870589859294 </data>
                    <data bit_width="8"> 0.0133665533786485 </data>
                    <data bit_width="16"> 0.024556250119 </data>
                    <data bit_width="32"> 0.0459157694065231 </data>
                    <data bit_width="64"> 0.0880565569010491 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.00567945179071229 </data>
                    <data bit_width="8"> 0.00946281035204966 </data>
                    <data bit_width="16"> 0.0178969231355077 </data>
                    <data bit_width="32"> 0.0347651465604234 </data>
                    <data bit_width="64"> 0.068501593886255 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.0106444424611108 </data>
                    <data bit_width="8"> 0.0171145927343348 </data>
                    <data bit_width="16"> 0.0302417604386817 </data>
                    <data bit_width="32"> 0.0573802271948363 </data>
                    <data bit_width="64"> 0.110364905942385 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="2">
                <max>
                  <data bit_width="4"> 0.00977704656232745 </data>
                  <data bit_width="8"> 0.0161453951752632 </data>
                  <data bit_width="16"> 0.0295361293577807 </data>
                  <data bit_width="32"> 0.0569125944860151 </data>
                  <data bit_width="64"> 0.109659272957484 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.00686154609584737 </data>
                  <data bit_width="8"> 0.0109507718341235 </data>
                  <data bit_width="16"> 0.0193848843795815 </data>
                  <data bit_width="32"> 0.0362531080424973 </data>
                  <data bit_width="64"> 0.0699895589383294 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.00686154609584737 </data>
                    <data bit_width="8"> 0.0129412230345957 </data>
                    <data bit_width="16"> 0.0240630509700882 </data>
                    <data bit_width="32"> 0.0454225738276118 </data>
                    <data bit_width="64"> 0.0875633575141372 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.00977704656232745 </data>
                    <data bit_width="8"> 0.0109507718341235 </data>
                    <data bit_width="16"> 0.0193848843795815 </data>
                    <data bit_width="32"> 0.0362531080424973 </data>
                    <data bit_width="64"> 0.0699895589383294 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.00826397988423678 </data>
                    <data bit_width="8"> 0.0161453951752632 </data>
                    <data bit_width="16"> 0.0295361293577807 </data>
                    <data bit_width="32"> 0.0569125944860151 </data>
                    <data bit_width="64"> 0.109659272957484 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4">
                <max>
                  <data bit_width="8"> 0.0140284981245597 </data>
                  <data bit_width="16"> 0.0263566011690562 </data>
                  <data bit_width="32"> 0.0546595035795206 </data>
                  <data bit_width="64"> 0.107406174910988 </data>
                </max>
                <min>
                  <data bit_width="8"> 0.00982073361131738 </data>
                  <data bit_width="16"> 0.0207640615182498 </data>
                  <data bit_width="32"> 0.0380297411987586 </data>
                  <data bit_width="64"> 0.0717661920945907 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8"> 0.00982073361131738 </data>
                    <data bit_width="16"> 0.0207640615182498 </data>
                    <data bit_width="32"> 0.0421914517526323 </data>
                    <data bit_width="64"> 0.0843322354391577 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8"> 0.0140284981245597 </data>
                    <data bit_width="16"> 0.0211615158698425 </data>
                    <data bit_width="32"> 0.0380297411987586 </data>
                    <data bit_width="64"> 0.0717661920945907 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8"> 0.0119966675234668 </data>
                    <data bit_width="16"> 0.0263566011690562 </data>
                    <data bit_width="32"> 0.0546595035795206 </data>
                    <data bit_width="64"> 0.107406174910988 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8">
                <max>
                  <data bit_width="12"> 0.0150232621237219 </data>
                  <data bit_width="16"> 0.0260414408046305 </data>
                  <data bit_width="32"> 0.0480880138420822 </data>
                  <data bit_width="64"> 0.103070118857219 </data>
                </max>
                <min>
                  <data bit_width="12"> 0.0103650639744102 </data>
                  <data bit_width="16"> 0.0160533450905352 </data>
                  <data bit_width="32"> 0.038552200310352 </data>
                  <data bit_width="64"> 0.0766461153633785 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="12"> 0.0103650639744102 </data>
                    <data bit_width="16"> 0.0160533450905352 </data>
                    <data bit_width="32"> 0.038552200310352 </data>
                    <data bit_width="64"> 0.0809309804649569 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="12"> 0.0150232621237219 </data>
                    <data bit_width="16"> 0.0260414408046305 </data>
                    <data bit_width="32"> 0.0429096644675463 </data>
                    <data bit_width="64"> 0.0766461153633785 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="12"> 0.0126599979055997 </data>
                    <data bit_width="16"> 0.0197423456807753 </data>
                    <data bit_width="32"> 0.0480880138420822 </data>
                    <data bit_width="64"> 0.103070118857219 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16">
                <max>
                  <data bit_width="20"> 0.0177528179204509 </data>
                  <data bit_width="32"> 0.0510881157060985 </data>
                  <data bit_width="64"> 0.0946360072637612 </data>
                </max>
                <min>
                  <data bit_width="20"> 0.0118874212219874 </data>
                  <data bit_width="32"> 0.0290457010053122 </data>
                  <data bit_width="64"> 0.0721217467774795 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="20"> 0.0118874212219874 </data>
                    <data bit_width="32"> 0.0290457010053122 </data>
                    <data bit_width="64"> 0.0721217467774795 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="20"> 0.0177528179204509 </data>
                    <data bit_width="32"> 0.0510881157060985 </data>
                    <data bit_width="64"> 0.0848245630319301 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="20"> 0.0143097232535557 </data>
                    <data bit_width="32"> 0.0417703359132537 </data>
                    <data bit_width="64"> 0.0946360072637612 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32">
                <max>
                  <data bit_width="36"> 0.017132712629234 </data>
                  <data bit_width="64"> 0.101181465747035 </data>
                </max>
                <min>
                  <data bit_width="36"> 0.0130783446145351 </data>
                  <data bit_width="64"> 0.0544865453818473 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="36"> 0.0130783446145351 </data>
                    <data bit_width="64"> 0.0544865453818473 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="36"> 0.017132712629234 </data>
                    <data bit_width="64"> 0.101181465747035 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="36"> 0.0147271474743436 </data>
                    <data bit_width="64"> 0.0786179828068772 </data>
                  </priority>
                </typ>
              </parameters>
            </est_index>

            <est_index name="aspect_ratio">
              <!-- Dummy yet -->
            </est_index>

            <est_index name="height">
              <!-- Dummy yet -->
            </est_index>

            <est_index name="width">
              <!-- Dummy yet -->
            </est_index>
          </est_type>

          <est_type name="timing">
            <est_index name="delay">
              <unit> ns </unit>

              <parameters name="variable">
                <max>
                  <data bit_width="4"> 2.61 </data>
                  <data bit_width="8"> 4.00 </data>
                  <data bit_width="16"> 5.37 </data>
                  <data bit_width="32"> 7.15 </data>
                  <data bit_width="64"> 8.61 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.00 </data>
                  <data bit_width="8"> 1.72 </data>
                  <data bit_width="16"> 2.27 </data>
                  <data bit_width="32"> 2.62 </data>
                  <data bit_width="64"> 3.38 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 2.07 </data>
                    <data bit_width="8"> 3.10 </data>
                    <data bit_width="16"> 3.71 </data>
                    <data bit_width="32"> 4.57 </data>
                    <data bit_width="64"> 6.01 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.00 </data>
                    <data bit_width="8"> 1.72 </data>
                    <data bit_width="16"> 2.27 </data>
                    <data bit_width="32"> 2.62 </data>
                    <data bit_width="64"> 3.38 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.61 </data>
                    <data bit_width="8"> 4.00 </data>
                    <data bit_width="16"> 5.37 </data>
                    <data bit_width="32"> 7.15 </data>
                    <data bit_width="64"> 8.61 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="1">
                <max>
                  <data bit_width="4"> 2.11 </data>
                  <data bit_width="8"> 1.83 </data>
                  <data bit_width="16"> 1.96 </data>
                  <data bit_width="32"> 2.80 </data>
                  <data bit_width="64"> 2.62 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.45 </data>
                  <data bit_width="8"> 0.58 </data>
                  <data bit_width="16"> 0.58 </data>
                  <data bit_width="32"> 0.58 </data>
                  <data bit_width="64"> 0.58 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.65 </data>
                    <data bit_width="8"> 1.73 </data>
                    <data bit_width="16"> 1.79 </data>
                    <data bit_width="32"> 2.09 </data>
                    <data bit_width="64"> 2.39 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.45 </data>
                    <data bit_width="8"> 0.58 </data>
                    <data bit_width="16"> 0.58 </data>
                    <data bit_width="32"> 0.58 </data>
                    <data bit_width="64"> 0.58 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.11 </data>
                    <data bit_width="8"> 1.83 </data>
                    <data bit_width="16"> 1.96 </data>
                    <data bit_width="32"> 2.80 </data>
                    <data bit_width="64"> 2.62 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="2">
                <max>
                  <data bit_width="4"> 1.53 </data>
                  <data bit_width="8"> 1.83 </data>
                  <data bit_width="16"> 2.03 </data>
                  <data bit_width="32"> 2.42 </data>
                  <data bit_width="64"> 2.62 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.62 </data>
                  <data bit_width="8"> 0.44 </data>
                  <data bit_width="16"> 0.44 </data>
                  <data bit_width="32"> 0.44 </data>
                  <data bit_width="64"> 0.44 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.90 </data>
                    <data bit_width="8"> 1.77 </data>
                    <data bit_width="16"> 1.76 </data>
                    <data bit_width="32"> 2.08 </data>
                    <data bit_width="64"> 2.37 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.62 </data>
                    <data bit_width="8"> 0.44 </data>
                    <data bit_width="16"> 0.44 </data>
                    <data bit_width="32"> 0.44 </data>
                    <data bit_width="64"> 0.44 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 1.53 </data>
                    <data bit_width="8"> 1.83 </data>
                    <data bit_width="16"> 2.03 </data>
                    <data bit_width="32"> 2.42 </data>
                    <data bit_width="64"> 2.62 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4">
                <max>
                  <data bit_width="8"> 1.53 </data>
                  <data bit_width="16"> 2.03 </data>
                  <data bit_width="32"> 2.27 </data>
                  <data bit_width="64"> 2.49 </data>
                </max>
                <min>
                  <data bit_width="8"> 0.45 </data>
                  <data bit_width="16"> 0.58 </data>
                  <data bit_width="32"> 0.58 </data>
                  <data bit_width="64"> 0.58 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8"> 1.09 </data>
                    <data bit_width="16"> 2.03 </data>
                    <data bit_width="32"> 1.71 </data>
                    <data bit_width="64"> 2.01 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8"> 0.45 </data>
                    <data bit_width="16"> 0.58 </data>
                    <data bit_width="32"> 0.58 </data>
                    <data bit_width="64"> 0.58 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8"> 1.53 </data>
                    <data bit_width="16"> 1.95 </data>
                    <data bit_width="32"> 2.27 </data>
                    <data bit_width="64"> 2.49 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8">
                <max>
                  <data bit_width="12"> 1.53 </data>
                  <data bit_width="16"> 1.40 </data>
                  <data bit_width="32"> 2.42 </data>
                  <data bit_width="64"> 2.74 </data>
                </max>
                <min>
                  <data bit_width="12"> 0.49 </data>
                  <data bit_width="16"> 0.58 </data>
                  <data bit_width="32"> 0.58 </data>
                  <data bit_width="64"> 0.58 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="12"> 1.09 </data>
                    <data bit_width="16"> 1.26 </data>
                    <data bit_width="32"> 2.42 </data>
                    <data bit_width="64"> 2.44 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="12"> 0.49 </data>
                    <data bit_width="16"> 0.58 </data>
                    <data bit_width="32"> 0.58 </data>
                    <data bit_width="64"> 0.58 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="12"> 1.53 </data>
                    <data bit_width="16"> 1.40 </data>
                    <data bit_width="32"> 2.32 </data>
                    <data bit_width="64"> 2.74 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16">
                <max>
                  <data bit_width="20"> 2.22 </data>
                  <data bit_width="32"> 2.04 </data>
                  <data bit_width="64"> 2.63 </data>
                </max>
                <min>
                  <data bit_width="20"> 0.44 </data>
                  <data bit_width="32"> 0.58 </data>
                  <data bit_width="64"> 0.58 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="20"> 1.73 </data>
                    <data bit_width="32"> 1.87 </data>
                    <data bit_width="64"> 2.34 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="20"> 0.44 </data>
                    <data bit_width="32"> 0.58 </data>
                    <data bit_width="64"> 0.58 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="20"> 2.22 </data>
                    <data bit_width="32"> 2.04 </data>
                    <data bit_width="64"> 2.63 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32">
                <max>
                  <data bit_width="36"> 2.31 </data>
                  <data bit_width="64"> 2.86 </data>
                </max>
                <min>
                  <data bit_width="36"> 0.58 </data>
                  <data bit_width="64"> 0.58 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="36"> 2.12 </data>
                    <data bit_width="64"> 2.12 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="36"> 0.58 </data>
                    <data bit_width="64"> 0.58 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="36"> 2.31 </data>
                    <data bit_width="64"> 2.86 </data>
                  </priority>
                </typ>
              </parameters>
            </est_index>

            <est_index name="delay_fullpath">
            <!-- Dummy yet -->
            </est_index>
          </est_type>

          <est_type name="power">
            <est_index name="static_power">
              <unit> mW </unit>
              <parameters name="variable">
                <max>
                  <data bit_width="4"> 17.1455 </data>
                  <data bit_width="8"> 48.7853 </data>
                  <data bit_width="16"> 111.9544 </data>
                  <data bit_width="32"> 324.9434 </data>
                  <data bit_width="64"> 759.3666 </data>
                </max>
                <min>
                  <data bit_width="4"> 6.4369 </data>
                  <data bit_width="8"> 17.4386 </data>
                  <data bit_width="16"> 44.4278 </data>
                  <data bit_width="32"> 107.7428 </data>
                  <data bit_width="64"> 288.5927 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 8.5241 </data>
                    <data bit_width="8"> 23.1921 </data>
                    <data bit_width="16"> 58.8086 </data>
                    <data bit_width="32"> 145.3465 </data>
                    <data bit_width="64"> 369.6021 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 17.1455 </data>
                    <data bit_width="8"> 48.7853 </data>
                    <data bit_width="16"> 111.9544 </data>
                    <data bit_width="32"> 324.9434 </data>
                    <data bit_width="64"> 759.3666 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 6.4369 </data>
                    <data bit_width="8"> 17.4386 </data>
                    <data bit_width="16"> 44.4278 </data>
                    <data bit_width="32"> 107.7428 </data>
                    <data bit_width="64"> 288.5927 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="1">
                <max>
                  <data bit_width="4"> 3.8131 </data>
                  <data bit_width="8"> 6.4425 </data>
                  <data bit_width="16"> 11.7090 </data>
                  <data bit_width="32"> 22.5830 </data>
                  <data bit_width="64"> 43.7106 </data>
                </max>
                <min>
                  <data bit_width="4"> 2.8296 </data>
                  <data bit_width="8"> 3.6305 </data>
                  <data bit_width="16"> 6.2678 </data>
                  <data bit_width="32"> 11.5453 </data>
                  <data bit_width="64"> 22.1028 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 3.8131 </data>
                    <data bit_width="8"> 6.4425 </data>
                    <data bit_width="16"> 11.7090 </data>
                    <data bit_width="32"> 22.5830 </data>
                    <data bit_width="64"> 43.7106 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 2.8296 </data>
                    <data bit_width="8"> 3.6305 </data>
                    <data bit_width="16"> 6.2678 </data>
                    <data bit_width="32"> 11.5453 </data>
                    <data bit_width="64"> 22.1028 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 3.3743 </data>
                    <data bit_width="8"> 5.5991 </data>
                    <data bit_width="16"> 9.9003 </data>
                    <data bit_width="32"> 18.7511 </data>
                    <data bit_width="64"> 36.0195 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="2">
                <max>
                  <data bit_width="4"> 5.6046 </data>
                  <data bit_width="8"> 5.7243 </data>
                  <data bit_width="16"> 11.3652 </data>
                  <data bit_width="32"> 22.2372 </data>
                  <data bit_width="64"> 43.3677 </data>
                </max>
                <min>
                  <data bit_width="4"> 2.5306 </data>
                  <data bit_width="8"> 5.1952 </data>
                  <data bit_width="16"> 7.9964 </data>
                  <data bit_width="32"> 13.2746 </data>
                  <data bit_width="64"> 23.8297 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 2.6488 </data>
                    <data bit_width="8"> 5.7243 </data>
                    <data bit_width="16"> 11.3652 </data>
                    <data bit_width="32"> 22.2372 </data>
                    <data bit_width="64"> 43.3677 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 5.6046 </data>
                    <data bit_width="8"> 5.3605 </data>
                    <data bit_width="16"> 7.9964 </data>
                    <data bit_width="32"> 13.2746 </data>
                    <data bit_width="64"> 23.8297 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.5306 </data>
                    <data bit_width="8"> 5.1952 </data>
                    <data bit_width="16"> 9.6504 </data>
                    <data bit_width="32"> 18.5573 </data>
                    <data bit_width="64"> 35.8719 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4">
                <max>
                  <data bit_width="8"> 8.4532 </data>
                  <data bit_width="16"> 9.4504 </data>
                  <data bit_width="32"> 20.2344 </data>
                  <data bit_width="64"> 41.0578 </data>
                </max>
                <min>
                  <data bit_width="8"> 3.8453 </data>
                  <data bit_width="16"> 7.9317 </data>
                  <data bit_width="32"> 14.7232 </data>
                  <data bit_width="64"> 25.3017 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8"> 4.0713 </data>
                    <data bit_width="16"> 9.3039 </data>
                    <data bit_width="32"> 20.2344 </data>
                    <data bit_width="64"> 41.0578 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8"> 8.4532 </data>
                    <data bit_width="16"> 9.4504 </data>
                    <data bit_width="32"> 14.7232 </data>
                    <data bit_width="64"> 25.3017 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8"> 3.8453 </data>
                    <data bit_width="16"> 7.9317 </data>
                    <data bit_width="32"> 16.2670 </data>
                    <data bit_width="64"> 32.2580 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8">
                <max>
                  <data bit_width="12"> 8.4343 </data>
                  <data bit_width="16"> 14.0813 </data>
                  <data bit_width="32"> 19.4115 </data>
                  <data bit_width="64"> 37.4569 </data>
                </max>
                <min>
                  <data bit_width="12"> 3.9336 </data>
                  <data bit_width="16"> 6.3277 </data>
                  <data bit_width="32"> 14.5105 </data>
                  <data bit_width="64"> 29.9352 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="12"> 4.1741 </data>
                    <data bit_width="16"> 6.8178 </data>
                    <data bit_width="32"> 17.2390 </data>
                    <data bit_width="64"> 37.4569 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="12"> 8.4343 </data>
                    <data bit_width="16"> 14.0813 </data>
                    <data bit_width="32"> 19.4115 </data>
                    <data bit_width="64"> 29.9352 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="12"> 3.9336 </data>
                    <data bit_width="16"> 6.3277 </data>
                    <data bit_width="32"> 14.5105 </data>
                    <data bit_width="64"> 30.5165 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16">
                <max>
                  <data bit_width="20"> 10.5000 </data>
                  <data bit_width="32"> 27.4655 </data>
                  <data bit_width="64"> 38.0124 </data>
                </max>
                <min>
                  <data bit_width="20"> 4.2274 </data>
                  <data bit_width="32"> 11.1175 </data>
                  <data bit_width="64"> 27.1828 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="20"> 4.9268 </data>
                    <data bit_width="32"> 11.7950 </data>
                    <data bit_width="64"> 32.5006 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="20"> 10.5000 </data>
                    <data bit_width="32"> 27.4655 </data>
                    <data bit_width="64"> 38.0124 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="20"> 4.2274 </data>
                    <data bit_width="32"> 11.1175 </data>
                    <data bit_width="64"> 27.1828 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32">
                <max>
                  <data bit_width="36"> 8.5708 </data>
                  <data bit_width="64"> 54.2149 </data>
                </max>
                <min>
                  <data bit_width="36"> 4.0824 </data>
                  <data bit_width="64"> 20.4612 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="36"> 4.9947 </data>
                    <data bit_width="64"> 22.6665 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="36"> 8.5708 </data>
                    <data bit_width="64"> 54.2149 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="36"> 4.0824 </data>
                    <data bit_width="64"> 20.4612 </data>
                  </priority>
                </typ>
              </parameters>
            </est_index>
          </est_type>

          <est_type name="function_cycle">
            <!-- Dummy yet -->
          </est_type>

          <est_type name="function_power">
            <!-- Dummy yet -->
          </est_type>
        </library>
      </estimation_data>

      <estimation_method>
         
        <est_type name="shape">

          <est_index name="area">

            <parameters name="variable">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for shifter(variable) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for shifter(1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for shifter(2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for shifter(4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for shifter(8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for shifter(16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for shifter(32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

          </est_index>

           <est_index name="aspect_ratio">

             <!-- Dummy yet -->

           </est_index>
		
           <est_index name="height">

             <!-- Dummy yet -->

           </est_index>
		
           <est_index name="width">

             <!-- Dummy yet -->

           </est_index>
		
        </est_type>

        <est_type name="timing">

          <est_index name="delay">

            <parameters name="variable">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for shifter(variable) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for shifter(1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for shifter(2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for shifter(4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for shifter(8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for shifter(16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for shifter(32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

          </est_index>

          <est_index name="delay_fullpath">

          </est_index>

        </est_type>

        <est_type name="power">

          <est_index name="static_power">

            <parameters name="variable">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for shifter(variable) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for shifter(1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for shifter(2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for shifter(4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for shifter(8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for shifter(16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for shifter(32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

          </est_index>

        </est_type>

        <est_type name="function_cycle">

        </est_type>

        <est_type name="function_power">

        </est_type>

    
      </estimation_method>

    </estimation>

  </model>

  <model>
    <design_level> synthesis </design_level>
    <version> 1.0 </version>
    <author> <![CDATA[ Yamane Yukinori ]]> </author>
    <affiliation> <![CDATA[ Osaka Univ. ]]> </affiliation>
    <model_info> <![CDATA[
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                %
%    Copyright 2008 ASIP Solutions, Inc. All rights reserved.    %
%              Copyright 2002-2005 PEAS Project                  %
%                                                                %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
]]> </model_info>

    <parameter>
      <parameter_value key="bit_width">
        <value> 4 </value>
        <value> 8 </value>
        <value> 12 </value>
        <value> 16 </value>
        <value> 20 </value>
        <value> 24 </value>
        <value> 28 </value>
        <value> 32 </value>
        <value> 36 </value>
        <value> 40 </value>
        <value> 44 </value>
        <value> 48 </value>
        <value> 52 </value>
        <value> 56 </value>
        <value> 60 </value>
        <value> 64 </value>
      </parameter_value>
      <parameter_value key="amount">
        <value> variable </value>
        <value> 1 </value>
        <value> 2 </value>
        <value> 4 </value>
        <value> 8 </value>
        <value> 16 </value>
        <value> 32 </value>
      </parameter_value>
    </parameter>

    <function_description>
      <script>
        <![CDATA[
#!/usr/bin/perl
# this script generates shifter function definition in synthesis level
# parameter : bit_width

if ($#ARGV != 1){
    print "number of parameters is wrong.\n";
    print "usage : this_script bit_width amount\n";
    exit (100);
}

$bit_width = $ARGV[0];
$bit_width_1 = $bit_width - 1;
$ctrl_width    = log($bit_width)/log(2);
if ($ctrl_width == int($ctrl_width)){
    $ctrl_width = int($ctrl_width);
}
else{
    $ctrl_width = int($ctrl_width) + 1;
}

$ctrl_width_1  = $ctrl_width - 1;
$amount        = $ARGV[1];

if ($amount eq "variable"){
  $info = "shift variable bit";
  $func = "shiftv";
  $func_par = "data_in, mode, ctrl";
  print "unsigned shiftv(unsigned data_in, unsigned mode, unsigned ctrl);\n\n";
}
else{
  if ($bit_width <= $amount){
    print "The value of \"bit_width\" must be greater than the value of \"amount\".\n";
    exit (100); 
  }
  $info = "shift $amount bit";
  $func = "shift";
  $func_par = "data_in, mode";
  print "unsigned shift(unsigned data_in, unsigned mode);\n\n";
}
{
print <<FHM_DL_FUNCTION
/** ${bit_width}-bit shifter : ${info} */
model shifter_var{
  port{
    in  data_in[${bit_width_1}:0], mode[1:0], ctrl[${ctrl_width_1}:0];
    out data_out[${bit_width_1}:0];
  }

  /** shift left logical */
  function sll{
    input{
      unsigned data_in;
      unsigned ctrl;
    }
    output{
      unsigned data_out = ${func}(${func_par});
    }
    control{
      unsigned mode;
    }
    protocol{
      [mode == "00"]{
	valid data_out;
      }
    }
  }
  
  /** shift left arithmetic */
  function sla{
    input{
      unsigned data_in;
      unsigned ctrl;
    }
    output{
      unsigned data_out = ${func}(${func_par});
    }
    control{
      unsigned mode;
    }
    protocol{
      [mode == "01"]{
	valid data_out;
      }
    }
  }

  /** shift right logical */
  function srl{
    input{
      unsigned data_in;
      unsigned ctrl;
    }
    output{
      unsigned data_out = ${func}(${func_par});
    }
    control{
      unsigned mode;
    }
    protocol{
      [mode == "10"]{
	valid data_out;
      }
    }
  }

  /** shift right arithmetic */
  function sra{
    input{
      unsigned data_in;
      unsigned ctrl;
    }
    output{
      unsigned data_out = ${func}(${func_par});
    }
    control{
      unsigned mode;
    }
    protocol{
      [mode == "11"]{
	valid data_out;
      }
    }
  }
FHM_DL_FUNCTION
}
exit (0);
        ]]>
      </script>
    </function_description>

    <function_conv>
      <script>
        <![CDATA[
#!/usr/bin/perl
# this script generates shifter function definition in behavior level
# parameter : bit_width

if ($#ARGV != 1){
    print "number of parameters is wrong.\n";
    print "usage : this_script bit_width amount\n";
    exit (100);
}

$bit_width = $ARGV[0];
$bit_width_1 = $bit_width - 1;
$ctrl_width    = log($bit_width)/log(2);
if ($ctrl_width == int($ctrl_width)){
    $ctrl_width = int($ctrl_width);
}
else{
    $ctrl_width = int($ctrl_width) + 1;
}
$ctrl_width_1  = $ctrl_width - 1;
$amount        = $ARGV[1];

if ($amount eq "variable") {
  $in_ctrl = "bit [$ctrl_width_1:0] ctrl;";
  $ctrl_ctrl = "";
  $prtcl_ctrl = "";
}
else {
  $tmp_w = $bit_width/2;
  $tmp_a = $amount;

  while ( $tmp_w > 0 ) {
    $diff = $tmp_a - $tmp_w;
    $tmp_w = int($tmp_w/2);
    if ($diff >= 0) {
      $ctrl_bin .= "1";
      $tmp_a = $diff;
    }
    else {
      $ctrl_bin .= "0";
    }
  }

  $in_ctrl = "";
  $ctrl_ctrl = "in bit [$ctrl_width_1:0] ctrl;";
  $prtcl_ctrl = "ctrl = \"$ctrl_bin\";";
}

{
print <<FHM_DL_FUNCTION
/** shift left logical */
function sll {
  input {
    bit [$bit_width_1:0] data_in;
    $in_ctrl
  }
  output {
    bit [$bit_width_1:0] data_out;
  }
  control {
    in bit [1:0] mode;
    $ctrl_ctrl
  }
  protocol {
    single_cycle_protocol {
      mode = "00";
      $prtcl_ctrl
    }
  }
}

/** shift left arithmetic */
function sla {
  input {
    bit [$bit_width_1:0] data_in;
    $in_ctrl
  }
  output {
    bit [$bit_width_1:0] data_out;
  }
  control {
    in bit [1:0] mode;
    $ctrl_ctrl
  }
  protocol {
    single_cycle_protocol {
      mode = "01";
      $prtcl_ctrl
    }
  }
}

/** shift right logical */
function srl {
  input {
    bit [$bit_width_1:0] data_in;
    $in_ctrl
  }
  output {
    bit [$bit_width_1:0] data_out;
  }
  control {
    in bit [1:0] mode;
    $ctrl_ctrl
  }
  protocol {
    single_cycle_protocol {
      mode = "10";
      $prtcl_ctrl
    }
  }
}

/** shift right arithmetic */
function sra {
  input {
    bit [$bit_width_1:0] data_in;
    $in_ctrl
  }
  output {
    bit [$bit_width_1:0] data_out;
  }
  control {
    in bit [1:0] mode;
    $ctrl_ctrl
  }
  protocol {
    single_cycle_protocol {
      mode = "11";
      $prtcl_ctrl
    }
  }
}

FHM_DL_FUNCTION
}
exit (0);
        ]]>
      </script>
    </function_conv>

    <function_port>
      <script>
        <![CDATA[
#!/usr/bin/perl
# this script generates shifter port infomation in behavior level
# parameter : bit_width

if ($#ARGV != 1){
    print "number of parameters is wrong.\n";
    print "usage : this_script bit_width amount\n";
    exit (100);
}


$bit_width = $ARGV[0];
$bit_width_1 = $bit_width - 1;
$ctrl_width    = log($bit_width)/log(2);
if ($ctrl_width == int($ctrl_width)){
    $ctrl_width = int($ctrl_width);
}
else{
    $ctrl_width = int($ctrl_width) + 1;
}
$ctrl_width_1  = $ctrl_width - 1;
$amount        = $ARGV[1];

if ($amount eq "variable") {
  $ctrl_attr = "data";
}
else {
  if ($bit_width <= $amount){
    print "The value of \"bit_width\" must be greater than the value of \"amount\".\n";
    exit (100); 
  }
  $ctrl_attr = "ctrl";
}

{
print <<FHM_DL_PORTINFO
data_in	in	bit_vector   $bit_width_1   0	data
mode	in	bit_vector   1   0	mode
ctrl	in	bit_vector   $ctrl_width_1   0	$ctrl_attr
data_out	out	bit_vector   $bit_width_1   0	data
FHM_DL_PORTINFO
}
exit (0);

        ]]>
      </script>
    </function_port>

    <design>
      <design_lang> vhdl </design_lang>

      <instance>
        <script>
          <![CDATA[
#!/usr/bin/perl
# this script generates shifter instance in synthesis level
# parameter : instance_name bit_width

if ($#ARGV != 2){
    print "number of parameters is wrong.\n";
    print "usage : this_script instance_name bit_width amount\n";
    exit (100);
}


$instance_name = $ARGV[0];
$bit_width     = $ARGV[1];
$amount        = $ARGV[2];
$bit_width_1   = $bit_width - 1;
$bit_width_2   = $bit_width - 2;
$bit_width_3   = $bit_width - 3;
$bit_width_4   = $bit_width - 4;
$bit_width_5   = $bit_width - 5;
$bit_width_6   = $bit_width - 6;
$bit_width_9   = $bit_width - 9;
$bit_width_10  = $bit_width - 10;
$bit_width_17  = $bit_width - 17;
$bit_width_18  = $bit_width - 18;
$bit_width_33  = $bit_width - 33;
$bit_width_34  = $bit_width - 34;
$bit_width_a   = $bit_width - $amount;
$bit_width_1_a = $bit_width - 1 - $amount;
$bit_width_2_a = $bit_width - 2 - $amount;
$amount_1      = $amount - 1;

$ctrl_width    = log($bit_width)/log(2);
if ($ctrl_width == int($ctrl_width)){
    $ctrl_width = int($ctrl_width);
}
else{
    $ctrl_width = int($ctrl_width) + 1;
}
$ctrl_width_1  = $ctrl_width - 1;

if ($bit_width <= $amount){
    print "bit_width must bigger than amount.\n";
    exit (100);
}

{
print <<FHM_DL_INSTANCE_HEAD1
-- Module     : Shifter
-- Feature    : Shift Right or Left, Arithmetic or Logic
-- References : Started from scratch.
-- Author     : Designed by T.Morifuji (c)1996.

-- Version    : 1.1  : Modified by K.Ueda 2001/12/12
--                     Add rotate function
--            : 1.2  : Modified by Y.Yamane 2001/12/26
--            : 1.3  : Modified by Y.Yamane 2001/01/15

FHM_DL_INSTANCE_HEAD1
}

{
print <<FHM_DL_INSTANCE_MODE1
-- Comment :
--  mode
--   00  : shift left  logic
--   01  : shift left  arithmetic
--   10  : shift right logic
--   11  : shift right arithmetic

FHM_DL_INSTANCE_MODE1
}

if ("$amount" eq "variable"){
    print ("--  ctrl : shift amount\n");
}else{
    print ("--  ctrl : shift amount (ignore)\n");
}

{
print <<FHM_DL_INSTANCE_HEAD2


library IEEE;
  use IEEE.std_logic_1164.all;
  use IEEE.std_logic_arith.all;
  use IEEE.std_logic_unsigned.all;

entity $instance_name is
  port (data_in   : in  std_logic_vector($bit_width_1 downto 0);
        mode      : in  std_logic_vector(1 downto 0);
        ctrl      : in  std_logic_vector($ctrl_width_1 downto 0);
        data_out  : out std_logic_vector($bit_width_1 downto 0));
end $instance_name;

FHM_DL_INSTANCE_HEAD2
}

if ("$amount" eq "variable"){
print "architecture synthesis of $instance_name is\n";

if ($bit_width >= 4){
    print "  signal int1       : std_logic_vector($bit_width_1 downto 0);\n";
    print "  signal int2       : std_logic_vector($bit_width_1 downto 0);\n";
}
if ($bit_width >= 5){
    print "  signal int4       : std_logic_vector($bit_width_1 downto 0);\n";
}
if ($bit_width >= 9){
    print "  signal int8       : std_logic_vector($bit_width_1 downto 0);\n";
}
if ($bit_width >= 17){
    print "  signal int16      : std_logic_vector($bit_width_1 downto 0);\n";
}
if ($bit_width >= 33){
    print "  signal int32      : std_logic_vector($bit_width_1 downto 0);\n";
}

if ($bit_width >= 4){
    print "  signal sign1      : std_logic;\n";
    print "  signal sign2      : std_logic_vector(1 downto 0);\n";
}
if ($bit_width >= 5){
    print "  signal sign4      : std_logic_vector(3 downto 0);\n";
}
if ($bit_width >= 9){
    print "  signal sign8      : std_logic_vector(7 downto 0);\n";
}
if ($bit_width >= 17){
    print "  signal sign16     : std_logic_vector(15 downto 0);\n";
}
if ($bit_width >= 33){
    print "  signal sign32     : std_logic_vector(31 downto 0);\n";
}

{
print <<FHM_DL_COMMON
  signal rl    : std_logic;
  signal al    : std_logic;
  signal s_cnt : std_logic_vector($ctrl_width_1 downto 0);

begin

  s_cnt <= ctrl;
  rl <= mode(1);
  al <= mode(0);

  --  generate sign vectors
FHM_DL_COMMON
}

if ($bit_width >= 4){
print <<FHM_DL_SIGN_1_2
  sign1 <= data_in($bit_width_1) when (al = '1') else
           '0';
  sign2 <= data_in($bit_width_1) & data_in($bit_width_1) when (al = '1') else
           (others => '0');
FHM_DL_SIGN_1_2
}
if ($bit_width >= 5){
print <<FHM_DL_SIGN_4
  sign4 <= (3 downto 0 => data_in($bit_width_1)) when (al = '1') else
           (others => '0');
FHM_DL_SIGN_4
}
if ($bit_width >= 9){
print <<FHM_DL_SIGN_8
  sign8 <= (7 downto 0 => data_in($bit_width_1)) when (al = '1') else
           (others => '0');
FHM_DL_SIGN_8
}
if ($bit_width >= 17){
print <<FHM_DL_SIGN_16
  sign16<= (15 downto 0 => data_in($bit_width_1)) when (al = '1') else
           (others => '0');
FHM_DL_SIGN_16
}
if ($bit_width >= 33){
print <<FHM_DL_SIGN_32
  sign32<= (31 downto 0 => data_in($bit_width_1)) when (al = '1') else
           (others => '0');
FHM_DL_SIGN_32
}

if ($bit_width >= 4){
print <<FHM_DL_SHIFT_1_2

  -- 1 bit shift
  first_step: block
  begin  --  block first_step
    int1 <= data_in($bit_width_2 downto 0) & '0'
			when (s_cnt(0)='1') and (rl = '0') and (al = '0') else
            data_in($bit_width_1) & data_in($bit_width_3 downto 0) & '0'
			when (s_cnt(0)='1') and (rl = '0') and (al = '1') else
            sign1 & data_in($bit_width_1 downto 1) 
			when (s_cnt(0)='1') and (rl = '1') else
            data_in;
  end block first_step;

  -- 2 bit shift
  second_step: block
  begin  --  block second_step 
    int2 <= int1($bit_width_3 downto 0) & "00"  
			when (s_cnt(1)='1') and (rl = '0') and (al = '0') else
            int1($bit_width_1) & int1($bit_width_4 downto 0) & "00"  
			when (s_cnt(1)='1') and (rl = '0') and (al = '1') else
            sign2 & int1($bit_width_1 downto 2) 
			when (s_cnt(1)='1') and (rl = '1') else
            int1;
  end block second_step;
FHM_DL_SHIFT_1_2
}

if ($bit_width >= 5){
print <<FHM_DL_SHIFT_4

  -- 4 bit shift
  third_step: block
  begin  --  block third_step 
    int4 <= int2($bit_width_5 downto 0) & "0000"
			when (s_cnt(2)='1') and (rl = '0') and (al = '0') else
            int2($bit_width_1) & int2($bit_width_6 downto 0) & "0000"
			when (s_cnt(2)='1') and (rl = '0') and (al = '1') else
            sign4 & int2($bit_width_1 downto 4)
			when (s_cnt(2)='1') and (rl = '1') else
            int2;
  end block third_step;
FHM_DL_SHIFT_4
}

if ($bit_width >= 9){
print <<FHM_DL_SHIFT_8

  -- 8 bit shift
  fourth_step: block
  begin  --  block fourth_step 
    int8 <= int4($bit_width_9 downto 0) & "00000000"
			 when (s_cnt(3)='1') and (rl = '0') and (al = '0') else
            int4($bit_width_1) & int4($bit_width_10 downto 0) & "00000000"
			 when (s_cnt(3)='1') and (rl = '0') and (al = '1') else
            sign8 & int4($bit_width_1 downto 8) 
			 when (s_cnt(3)='1') and (rl = '1') else
            int4;
  end block fourth_step;
FHM_DL_SHIFT_8
}

if ($bit_width >= 17){
print <<FHM_DL_SHIFT_16

  -- 16 bit shift
  fifth_step: block
  begin  --  block fifth_step 
    int16 <= int8($bit_width_17 downto 0) & "0000000000000000" 
		        when (s_cnt(4)='1') and (rl = '0') and (al = '0') else
             int8($bit_width_1) & int8($bit_width_18 downto 0) & "0000000000000000" 
		        when (s_cnt(4)='1') and (rl = '0') and (al = '1') else
             sign16 & int8($bit_width_1 downto 16) 
		        when (s_cnt(4)='1') and (rl = '1') else
             int8;
  end block fifth_step;
FHM_DL_SHIFT_16
}

if ($bit_width >= 33){
print <<FHM_DL_SHIFT_32

  -- 32 bit shift
  sixth_step: block
  begin  --  block sixth_step
    int32 <= int16($bit_width_33 downto 0) & "00000000000000000000000000000000" 
		        when (s_cnt(5)='1') and (rl = '0') and (al = '0') else
             int16($bit_width_1) & int16($bit_width_34 downto 0) & "00000000000000000000000000000000" 
		        when (s_cnt(5)='1') and (rl = '0') and (al = '1') else
             sign32 & int16($bit_width_1 downto 32) 
		        when (s_cnt(5)='1') and (rl = '1') else
             int16;
  end block sixth_step;
FHM_DL_SHIFT_32
}

print "\n";

if ($bit_width <= 4){
    print "  data_out <= int2;\n";
}
elsif ($bit_width <= 8){
    print "  data_out <= int4;\n";
}
elsif ($bit_width <= 16){
    print "  data_out <= int8;\n";
}
elsif ($bit_width <= 32){
    print "  data_out <= int16;\n";
}
elsif ($bit_width <= 64){
    print "  data_out <= int32;\n";
}
else{
    print "false\n";
    exit (100);
}
    print "end synthesis;\n";



}elsif ($amount > 0){
    if ($bit_width == $amount + 1){
	$b_1_to_a   = "$bit_width_1";
	$b_1_a_to_0 = "$bit_width_1_a";
	$LA_str = "";
    }
    else{
	$b_1_to_a   = "$bit_width_1 downto $amount";
	$b_1_a_to_0 = "$bit_width_1_a downto 0";
	if ($bit_width == $amount + 2){
	    $LAstr = "LA($bit_width_2) <= data_in(0);\n  ";
	}
	else{
	    $LAstr = "LA($bit_width_2 downto $amount) <= data_in($bit_width_2_a downto 0);\n  ";
	}
    }

    if ($amount == 1){
	$a_1_to_0   = "$amount_1";
	$b_1_to_b_a = "$bit_width_1";
	$zeros      = "\'0\'";
	$carrys      = "data_in($bit_width_1)";
    }
    else{
	$a_1_to_0   = "$amount_1 downto 0";
	$b_1_to_b_a = "$bit_width_1 downto $bit_width_a";
	$zeros      = "(others => '0')";
	$carrys      = "(others => data_in($bit_width_1))";
    }

    print <<FHM_DL_F_INSTANCE
architecture synthesis of $instance_name is

    signal LL,LA,RL,RA : std_logic_vector($bit_width_1 downto 0);

begin

  LL($b_1_to_a) <= data_in($b_1_a_to_0);
  LL($a_1_to_0) <= $zeros; 

  LA($bit_width_1) <= data_in($bit_width_1);
  ${LAstr}LA($a_1_to_0) <= $zeros; 

  RL($b_1_to_b_a) <= $zeros;
  RL($b_1_a_to_0) <= data_in($b_1_to_a);

  RA($b_1_to_b_a) <= $carrys;
  RA($b_1_a_to_0) <= data_in($b_1_to_a);

  data_out <= LL when mode = "00" else
              LA when mode = "01" else
              RL when mode = "10" else
              RA when mode = "11" else
              (others => 'X');

end synthesis;
FHM_DL_F_INSTANCE

}else{
        print "amount $amount is not supported.\n";
        exit (100);
}
exit (0);
          ]]>
        </script>
      </instance>

      <entity></entity>

      <testvector>
        <testvector_script>
          <![CDATA[ ]]>
        </testvector_script>
      </testvector>

      <synthesis>
        <parameter></parameter>
        <synthesis_script>
          <script>
            <![CDATA[
#!/usr/bin/perl
# this script generates shifter synthesis script in synthesis level
# parameter : instance_name priority bit_width

if ($#ARGV != 3){
    print "number of parameters is wrong.\n";
    print "usage : this_script instance_name priority bit_width amount\n";
    exit (100);
}


$instance_name = $ARGV[0];
$priority      = $ARGV[1];
$bit_width     = $ARGV[2];
$amount        = $ARGV[3];

if ($priority eq "area"){
  $priority_const = "set_max_area 0";
}
elsif ($priority eq "performance"){
  $priority_const = "set_max_delay -from all_inputs() -to all_outputs() 0";
}
elsif ($priority eq "power"){
  $priority_const = "";
}
elsif ($priority eq "none"){
  $priority_const = "";
}
else{
  print "Not supported priority\n";
  exit (100);
}

{
print <<FHM_DL_SCRIPT
hdlin_auto_save_templates = TRUE

analyze -f vhdl $instance_name.vhd

elaborate $instance_name
uniquify

$priority_const

compile 

write -hierarchy -output $instance_name.db

report_area
report_timing

quit
FHM_DL_SCRIPT
}
exit (0);
            ]]>
          </script>
        </synthesis_script>
      </synthesis>
    </design>

    <design>
      <design_lang> Verilog </design_lang>
                                                                                
      <instance>
        <script>
          <![CDATA[
#!/usr/bin/perl
# this script generates shifter instance in synthesis level
# parameter : instance_name bit_width

if ($#ARGV != 2){
    print "number of parameters is wrong.\n";
    print "usage : this_script instance_name bit_width amount\n";
    exit (100);
}


$instance_name = $ARGV[0];
$bit_width     = $ARGV[1];
$amount        = $ARGV[2];
$bit_width_1   = $bit_width - 1;
$bit_width_2   = $bit_width - 2;
$bit_width_3   = $bit_width - 3;
$bit_width_4   = $bit_width - 4;
$bit_width_5   = $bit_width - 5;
$bit_width_6   = $bit_width - 6;
$bit_width_9   = $bit_width - 9;
$bit_width_10  = $bit_width - 10;
$bit_width_17  = $bit_width - 17;
$bit_width_18  = $bit_width - 18;
$bit_width_33  = $bit_width - 33;
$bit_width_34  = $bit_width - 34;
$bit_width_a   = $bit_width - $amount;
$bit_width_1_a = $bit_width - 1 - $amount;
$bit_width_2_a = $bit_width - 2 - $amount;
$amount_1      = $amount - 1;

$ctrl_width    = log($bit_width)/log(2);
if ($ctrl_width == int($ctrl_width)){
    $ctrl_width = int($ctrl_width);
}
else{
    $ctrl_width = int($ctrl_width) + 1;
}
$ctrl_width_1  = $ctrl_width - 1;

if ($bit_width <= $amount){
    print "bit_width must bigger than amount.\n";
    exit (100);
}

{
print <<FHM_DL_INSTANCE_HEAD1
// Module     : Shifter
// Feature    : Shift Right or Left, Arithmetic or Logic
// References : Started from scratch.
// Author     : Designed by T.Morifuji (c)1996.

// Version    : 1.1  : Modified by K.Ueda 2001/12/12
//                     Add rotate function
//            : 1.2  : Modified by Y.Yamane 2001/12/26
//            : 1.3  : Modified by Y.Yamane 2001/01/15

FHM_DL_INSTANCE_HEAD1
}

{
print <<FHM_DL_INSTANCE_MODE1
// Comment :
//  mode
//   00  : shift left  logic
//   01  : shift left  arithmetic
//   10  : shift right logic
//   11  : shift right arithmetic
\n
FHM_DL_INSTANCE_MODE1
}

if ("$amount" eq "variable"){
    print ("//  ctrl : shift amount\n");
}else{
    print ("//  ctrl : shift amount (ignore)\n");
}

{
print <<FHM_DL_INSTANCE_HEAD2
\n
module $instance_name (
  data_in   ,
  mode      ,
  ctrl      ,
  data_out  );
\n
input  [$bit_width_1:0] data_in  ;
input  [ 1:0] mode     ;
input  [ $ctrl_width_1:0] ctrl     ;
output [$bit_width_1:0] data_out ;
\n
wire  [$bit_width_1:0] data_in  ;
wire  [ 1:0] mode     ;
wire  [ $ctrl_width_1:0] ctrl     ;
wire  [$bit_width_1:0] data_out ;
\n
FHM_DL_INSTANCE_HEAD2
}

if ("$amount" eq "variable"){
if ($bit_width >= 4){
    print "wire [$bit_width_1:0] int1 ;\n" ;
    print "wire [$bit_width_1:0] int2 ;\n" ;
}
if ($bit_width >= 5){
    print "wire [$bit_width_1:0] int4 ;\n" ;
}
if ($bit_width >= 9){
    print "wire [$bit_width_1:0] int8 ;\n" ;
}
if ($bit_width >= 17){
    print "wire [$bit_width_1:0] int16 ;\n";
}
if ($bit_width >= 33){
    print "wire [$bit_width_1:0] int32 ;\n";
}

if ($bit_width >= 4){
    print "wire        sign1 ;\n";
    print "wire [ 1:0] sign2 ;\n";
}
if ($bit_width >= 5){
    print "wire [ 3:0] sign4 ;\n";
}
if ($bit_width >= 9){
    print "wire [ 7:0] sign8 ;\n";
}
if ($bit_width >= 17){
    print "wire [15:0] sign16 ;\n";
}
if ($bit_width >= 33){
    print "wire [31:0] sign32 ;\n";
}

{
print <<FHM_DL_COMMON
wire        rl ;
wire        al ;
wire [ $ctrl_width_1:0] s_cnt ;
\n
assign  s_cnt = ctrl;
assign  rl    = mode[1];
assign  al    = mode[0];
\n
  //  generate sign vectors
FHM_DL_COMMON
}

if ($bit_width >= 4){
print <<FHM_DL_SIGN_1_2
assign  sign1  = (al == 1'b1) ? data_in[$bit_width_1] : 1'b0 ;
assign  sign2  = (al == 1'b1) ? \{2\{data_in[$bit_width_1]\}\} : \{2\{1'b0\}\} ;
FHM_DL_SIGN_1_2
}
if ($bit_width >= 5){
print <<FHM_DL_SIGN_4
assign  sign4  = (al == 1'b1) ? \{4\{data_in[$bit_width_1]\}\} : \{4\{1'b0\}\} ;
FHM_DL_SIGN_4
}
if ($bit_width >= 9){
print <<FHM_DL_SIGN_8
assign  sign8  = (al == 1'b1) ? \{8\{data_in[$bit_width_1]\}\} : \{8\{1'b0\}\} ;
FHM_DL_SIGN_8
}
if ($bit_width >= 17){
print <<FHM_DL_SIGN_16
assign  sign16 = (al == 1'b1) ? \{16\{data_in[$bit_width_1]\}\} : \{16\{1'b0\}\} ;
FHM_DL_SIGN_16
}
if ($bit_width >= 33){
print <<FHM_DL_SIGN_32
assign  sign32 = (al == 1'b1) ? \{32\{data_in[$bit_width_1]\}\} : \{32\{1'b0\}\} ;
FHM_DL_SIGN_32
}

if ($bit_width >= 4){
print <<FHM_DL_SHIFT_1_2
\n
  // 1 bit shift
assign    int1 = ((s_cnt[0] == 1'b1) && (rl == 1'b0) && (al == 1'b0)) ? 
                                    \{data_in[$bit_width_2:0] , 1'b0\} :
                 ((s_cnt[0] == 1'b1) && (rl == 1'b0) && (al == 1'b1)) ?
                                    \{data_in[$bit_width_1] , data_in[$bit_width_3:0] , 1'b0\} :
                 ((s_cnt[0] == 1'b1) && (rl == 1'b1)) ?
                                    \{sign1 , data_in[$bit_width_1:1]\} : data_in;
\n
  // 2 bit shift
assign    int2 = ((s_cnt[1] == 1'b1) && (rl == 1'b0) && (al == 1'b0)) ? 
                                    \{int1[$bit_width_3:0] , \{2\{1'b0\}\}\} :
                 ((s_cnt[1] == 1'b1) && (rl == 1'b0) && (al == 1'b1)) ?
                                    \{int1[$bit_width_1] , int1[$bit_width_4:0] , \{2\{1'b0\}\}\} :
                 ((s_cnt[1] == 1'b1) && (rl == 1'b1)) ?
                                    \{sign2 , int1[$bit_width_1:2]\} : int1;
FHM_DL_SHIFT_1_2
}

if ($bit_width >= 5){
print <<FHM_DL_SHIFT_4
\n
  // 4 bit shift
assign    int4 = ((s_cnt[2] == 1'b1) && (rl == 1'b0) && (al == 1'b0)) ? 
                                    \{int2[$bit_width_5:0] , \{4\{1'b0\}\}\} :
                 ((s_cnt[2] == 1'b1) && (rl == 1'b0) && (al == 1'b1)) ?
                                    \{int2[$bit_width_1] , int2[$bit_width_6:0] , \{4\{1'b0\}\}\} :
                 ((s_cnt[2] == 1'b1) && (rl == 1'b1)) ?
                                    \{sign4 , int2[$bit_width_1:4]\} : int2;
FHM_DL_SHIFT_4
}

if ($bit_width >= 9){
print <<FHM_DL_SHIFT_8
\n
  // 8 bit shift
assign    int8 = ((s_cnt[3] == 1'b1) && (rl == 1'b0) && (al == 1'b0)) ? 
                                    \{int4[$bit_width_9:0] , \{8\{1'b0\}\}\} :
                 ((s_cnt[3] == 1'b1) && (rl == 1'b0) && (al == 1'b1)) ?
                                    \{int4[$bit_width_1] , int4[$bit_width_10:0] , \{8\{1'b0\}\}\} :
                 ((s_cnt[3] == 1'b1) && (rl == 1'b1)) ?
                                    \{sign8 , int4[$bit_width_1:8]\} : int4;
FHM_DL_SHIFT_8
}

if ($bit_width >= 17){
print <<FHM_DL_SHIFT_16
\n
  // 16 bit shift
assign    int16 = ((s_cnt[4] == 1'b1) && (rl == 1'b0) && (al == 1'b0)) ? 
                                     \{int8[$bit_width_17:0] , \{16\{1'b0\}\}\} :
                  ((s_cnt[4] == 1'b1) && (rl == 1'b0) && (al == 1'b1)) ?
                                     \{int8[$bit_width_1] , int8[$bit_width_18:0] , \{16\{1'b0\}\}\} :
                  ((s_cnt[4] == 1'b1) && (rl == 1'b1)) ?
                                     \{sign16 , int8[$bit_width_1:16]\} : int8;
FHM_DL_SHIFT_16
}

if ($bit_width >= 33){
print <<FHM_DL_SHIFT_32
\n
  // 32 bit shift
assign    int32 = ((s_cnt[5] == 1'b1) && (rl == 1'b0) && (al == 1'b0)) ? 
                                     \{int16[$bit_width_33:0] , \{32\{1'b0\}\}\} :
                  ((s_cnt[5] == 1'b1) && (rl == 1'b0) && (al == 1'b1)) ?
                                     \{int16[$bit_width_1] , int16[$bit_width_34:0] , \{32\{1'b0\}\}\} :
                  ((s_cnt[5] == 1'b1) && (rl == 1'b1)) ?
                                     \{sign32 , int16[$bit_width_1:32]\} : int16;
FHM_DL_SHIFT_32
}

print "\n";

if ($bit_width <= 4){
    print "assign  data_out = int2;\n";
}
elsif ($bit_width <= 8){
    print "assign  data_out = int4;\n";
}
elsif ($bit_width <= 16){
    print "assign  data_out = int8;\n";
}
elsif ($bit_width <= 32){
    print "assign  data_out = int16;\n";
}
elsif ($bit_width <= 64){
    print "assign  data_out = int32;\n";
}
else{
    print "false\n";
    exit (100);
}
    print "endmodule\n";



}elsif ($amount > 0){
    if ($bit_width == $amount + 1){
	$b_1_to_a   = "[$bit_width_1]";
	$b_1_a_to_0 = "[$bit_width_1_a]";
	$LA_str = "";
    }
    else{
	$b_1_to_a   = "[$bit_width_1:$amount]";
	$b_1_a_to_0 = "[$bit_width_1_a:0]";
	if ($bit_width == $amount + 2){
	    $LAstr = "LA[$bit_width_2] = data_in[0];\n";
	}
	else{
	    $LAstr = "LA[$bit_width_2:$amount] = data_in[$bit_width_2_a:0];\n";
	}
    }

    if ($amount == 1){
	$a_1_to_0   = "[$amount_1]";
	$b_1_to_b_a = "[$bit_width_1]";
	$zeros      = "0";
	$carrys      = "data_in[$bit_width_1]";
    }
    else{
	$a_1_to_0   = "[$amount_1:0]";
	$b_1_to_b_a = "[$bit_width_1:$bit_width_a]";
	$zeros      = "\{$amount\{1'b0\}\}";
	$carrys      = "\{$amount\{data_in[$bit_width_1]\}\}";
    }

    print <<FHM_DL_F_INSTANCE
wire [$bit_width_1:0] LL ;
wire [$bit_width_1:0] LA ;
wire [$bit_width_1:0] RL ;
wire [$bit_width_1:0] RA ;
\n
assign  LL$b_1_to_a = data_in$b_1_a_to_0;
assign  LL$a_1_to_0 = $zeros; 
\n
assign  LA[$bit_width_1] = data_in[$bit_width_1];
assign  ${LAstr}assign  LA$a_1_to_0 = $zeros; 
\n
assign  RL$b_1_to_b_a = $zeros;
assign  RL$b_1_a_to_0 = data_in$b_1_to_a;
\n
assign  RA$b_1_to_b_a = $carrys;
assign  RA$b_1_a_to_0 = data_in$b_1_to_a;
\n
assign  data_out = (mode == 2'b00) ? LL :
                   (mode == 2'b01) ? LA :
                   (mode == 2'b10) ? RL :
                   (mode == 2'b11) ? RA : \{$bit_width\{1'bX\}\};
\n
endmodule
FHM_DL_F_INSTANCE

}else{
        print "amount $amount is not supported.\n";
        exit (100);
}

exit (0);
          ]]>
        </script>
      </instance>
                                                                                
      <entity></entity>
                                                                                
      <testvector></testvector>
                                                                                
      <synthesis></synthesis>
    </design>

    <design>
      <design_lang> SystemC Header </design_lang>

      <instance>
        <script>
          <![CDATA[
#!/usr/bin/perl
# this script generates shifter instance in behavior level
# parameter : name_space instance_name bit_width

if ($#ARGV != 3){
    print "number of parameters is wrong.\n";
    print "usage : this_script name_space instance_name bit_width amount\n";
    exit (100);
}

$name_space    = $ARGV[0];
$instance_name = $ARGV[1];
$bit_width     = $ARGV[2];
$amount        = $ARGV[3];

$bit_width_1   = $bit_width - 1;
$bit_width_2   = $bit_width - 2;

$ctrl_width    = log($bit_width)/log(2);
if ($ctrl_width == int($ctrl_width)){
    $ctrl_width = int($ctrl_width);
}
else{
    $ctrl_width = int($ctrl_width) + 1;
}
$ctrl_width_1  = $ctrl_width - 1;

if ($bit_width <= 64) {
    $input_type = "sc_dt::sc_uint<$bit_width>";
} else {
    $input_type = "sc_dt::sc_biguint<$bit_width>";
}

if ($ctrl_width <= 64) {
    $ctrl_type = "sc_dt::sc_uint<$ctrl_width>";
} else {
    $ctrl_type = "sc_dt::sc_biguint<$ctrl_type>";
}

$macro = "__" . uc($name_space) . "_" . uc($instance_name) . "_H__";

{
print <<FHM_DL_INSTANCE_HEAD1
#ifndef $macro
#define $macro 1

// Module     : Shifter
// Feature    : Shift Right or Left, Arithmetic or Logic
// References : Started from scratch.
// Author     : Designed by T.Morifuji (c)1996.

// Version    : 1.1  : Modified by K.Ueda 2001/12/12
//                     Add rotate function
//            : 1.2  : Modified by Y.Yamane 2001/12/26
//            : 1.3  : Modified by Y.Yamane 2001/01/15

// Comment :
//  mode
//   00  : shift left  logic
//   01  : shift left  arithmetic
//   10  : shift right logic
//   11  : shift right arithmetic

FHM_DL_INSTANCE_HEAD1
}

if ("$amount" eq "variable"){
    print ("//  ctrl : shift amount\n");
}else{
    print ("//  ctrl : shift amount (ignore)\n");
}

{
print <<FHM_DL_INSTANCE_HEAD2

#include <systemc>

namespace $name_space {
  SC_MODULE($instance_name) {
    sc_core::sc_in< $input_type > data_in;
    sc_core::sc_in< sc_dt::sc_uint<2> > mode;
    sc_core::sc_in< $ctrl_type > ctrl;
    sc_core::sc_out< $input_type > data_out;
  
    SC_CTOR($instance_name) :
      data_in("data_in"),
      mode("mode"),
      ctrl("ctrl"),
      data_out("data_out")
    {
      SC_METHOD(process);
      sensitive << data_in << mode << ctrl;
    }
  
    void process();
  };
};

#endif // $macro
FHM_DL_INSTANCE_HEAD2
};

exit (0);
          ]]>
        </script>
      </instance>

      <entity>
        <script>
          <![CDATA[
          ]]>
        </script>
      </entity>

      <testvector>
        <testvector_script>
          <![CDATA[ ]]>
        </testvector_script>
      </testvector>
    </design>

    <design>
      <design_lang> SystemC Program </design_lang>

      <instance>
        <script>
          <![CDATA[
#!/usr/bin/perl
# this script generates shifter instance in behavior level
# parameter : name_space instance_name bit_width

if ($#ARGV != 3){
    print "number of parameters is wrong.\n";
    print "usage : this_script name_space instance_name bit_width amount\n";
    exit (100);
}

$name_space    = $ARGV[0];
$instance_name = $ARGV[1];
$bit_width     = $ARGV[2];
$amount        = $ARGV[3];

$bit_width_1   = $bit_width - 1;
$bit_width_2   = $bit_width - 2;

$ctrl_width    = log($bit_width)/log(2);
if ($ctrl_width == int($ctrl_width)){
    $ctrl_width = int($ctrl_width);
}
else{
    $ctrl_width = int($ctrl_width) + 1;
}
$ctrl_width_1  = $ctrl_width - 1;

if ( $bit_width <= 64 ) {
  $data_type = "sc_dt::sc_int<$bit_width>";
} else {
  $data_type = "sc_dt::sc_bigint<$bit_width>";
}

{
print <<FHM_DL_INSTANCE_HEAD1
#include "${instance_name}.h"

// Module     : Shifter
// Feature    : Shift Right or Left, Arithmetic or Logic
// References : Started from scratch.
// Author     : Designed by T.Morifuji (c)1996.

// Version    : 1.1  : Modified by K.Ueda 2001/12/12
//                     Add rotate function
//            : 1.2  : Modified by Y.Yamane 2001/12/26
//            : 1.3  : Modified by Y.Yamane 2001/01/15

// Comment :
//  mode
//   00  : shift left  logic
//   01  : shift left  arithmetic
//   10  : shift right logic
//   11  : shift right arithmetic

FHM_DL_INSTANCE_HEAD1
}

if ("$amount" eq "variable"){
    print ("//  ctrl : shift amount\n");
}else{
    print ("//  ctrl : shift amount (ignore)\n");
}

{
print <<FHM_DL_INSTANCE_HEAD2

#include <systemc>

void ${name_space}::${instance_name}::process() 
{
FHM_DL_INSTANCE_HEAD2
}

if ("$amount" eq "variable"){
print <<FHM_DL_V_INSTANCE
  switch( mode.read() ) {
  case 0: // SLL
    data_out.write( data_in.read() << ctrl.read() );
    break;
  case 1: // SLA
    data_out.write( ${data_type}(data_in.read()) << ctrl.read() );
    break;
  case 2: // SRL
    data_out.write( data_in.read() >> ctrl.read() );
    break;
  case 3: // SRA
    data_out.write( ${data_type}(data_in.read()) >> ctrl.read() );
    break;
  default:
    data_out.write( "1" );
    break;
  }
FHM_DL_V_INSTANCE

}elsif ($amount > 0){
print <<FHM_DL_F_INSTANCE
  switch( mode.read() ) {
  case 0:
    data_out.write( data_in.read() << $amount );
    break;
  case 1:
    data_out.write( ${data_type}(data_in.read()) << $amount );
    break;
  case 2:
    data_out.write( data_in.read() >> $amount );
    break;
  case 3:
    data_out.write( ${data_type}(data_in.read()) >> $amount );
  default:
    data_out.write( "1" );
  }
FHM_DL_F_INSTANCE
}elsif ($amount == 0){
print <<FHM_DL_Z_INSTANCE
  data_out.write( data_in.read() );
FHM_DL_Z_INSTANCE
}else{
        print "amount $amount is not supported.\n";
        exit (100);
}

print "}\n";

exit (0);
          ]]>
        </script>
      </instance>

      <entity>
        <script>
          <![CDATA[
          ]]>
        </script>
      </entity>

      <testvector>
        <testvector_script>
          <![CDATA[ ]]>
        </testvector_script>
      </testvector>
    </design>

    <estimation>
      <estimation_data>
        <library name="OSAKA">

          <est_type name="shape">
            <est_index name="area">
              <unit> mm2 </unit>
              <translate>
                <translate_value key="gate"> 4201.68 </translate_value>
                <translate_value key="mm2">  1 </translate_value>
              </translate>

              <parameters name="variable">
                <max>
                  <data bit_width="4"> 0.0330554582928733 </data>
                  <data bit_width="8"> 0.103177984520478 </data>
                  <data bit_width="16"> 0.246919112831058 </data>
                  <data bit_width="32"> 0.715223699329792 </data>
                  <data bit_width="64"> 1.72459975747796 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.0188335725233716 </data>
                  <data bit_width="8"> 0.049282168561147 </data>
                  <data bit_width="16"> 0.121487136811942 </data>
                  <data bit_width="32"> 0.28958637211782 </data>
                  <data bit_width="64"> 0.762168451428952 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.0188335725233716 </data>
                    <data bit_width="8"> 0.049282168561147 </data>
                    <data bit_width="16"> 0.121487136811942 </data>
                    <data bit_width="32"> 0.28958637211782 </data>
                    <data bit_width="64"> 0.762168451428952 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.0330554582928733 </data>
                    <data bit_width="8"> 0.103177984520478 </data>
                    <data bit_width="16"> 0.246919112831058 </data>
                    <data bit_width="32"> 0.715223699329792 </data>
                    <data bit_width="64"> 1.72459975747796 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.0225727796976448 </data>
                    <data bit_width="8"> 0.0581620946859351 </data>
                    <data bit_width="16"> 0.140409578073532 </data>
                    <data bit_width="32"> 0.335437288417966 </data>
                    <data bit_width="64"> 0.841934199177472 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="1">
                <max>
                  <data bit_width="4"> 0.0106444424611108 </data>
                  <data bit_width="8"> 0.0171145927343348 </data>
                  <data bit_width="16"> 0.0302417604386817 </data>
                  <data bit_width="32"> 0.0573802271948363 </data>
                  <data bit_width="64"> 0.110364905942385 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.00567945179071229 </data>
                  <data bit_width="8"> 0.00946281035204966 </data>
                  <data bit_width="16"> 0.0178969231355077 </data>
                  <data bit_width="32"> 0.0347651465604234 </data>
                  <data bit_width="64"> 0.068501593886255 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.00812870589859294 </data>
                    <data bit_width="8"> 0.0133665533786485 </data>
                    <data bit_width="16"> 0.024556250119 </data>
                    <data bit_width="32"> 0.0459157694065231 </data>
                    <data bit_width="64"> 0.0880565569010491 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.00567945179071229 </data>
                    <data bit_width="8"> 0.00946281035204966 </data>
                    <data bit_width="16"> 0.0178969231355077 </data>
                    <data bit_width="32"> 0.0347651465604234 </data>
                    <data bit_width="64"> 0.068501593886255 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.0106444424611108 </data>
                    <data bit_width="8"> 0.0171145927343348 </data>
                    <data bit_width="16"> 0.0302417604386817 </data>
                    <data bit_width="32"> 0.0573802271948363 </data>
                    <data bit_width="64"> 0.110364905942385 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="2">
                <max>
                  <data bit_width="4"> 0.00977704656232745 </data>
                  <data bit_width="8"> 0.0161453951752632 </data>
                  <data bit_width="16"> 0.0295361293577807 </data>
                  <data bit_width="32"> 0.0569125944860151 </data>
                  <data bit_width="64"> 0.109659272957484 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.00686154609584737 </data>
                  <data bit_width="8"> 0.0109507718341235 </data>
                  <data bit_width="16"> 0.0193848843795815 </data>
                  <data bit_width="32"> 0.0362531080424973 </data>
                  <data bit_width="64"> 0.0699895589383294 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.00686154609584737 </data>
                    <data bit_width="8"> 0.0129412230345957 </data>
                    <data bit_width="16"> 0.0240630509700882 </data>
                    <data bit_width="32"> 0.0454225738276118 </data>
                    <data bit_width="64"> 0.0875633575141372 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.00977704656232745 </data>
                    <data bit_width="8"> 0.0109507718341235 </data>
                    <data bit_width="16"> 0.0193848843795815 </data>
                    <data bit_width="32"> 0.0362531080424973 </data>
                    <data bit_width="64"> 0.0699895589383294 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.00826397988423678 </data>
                    <data bit_width="8"> 0.0161453951752632 </data>
                    <data bit_width="16"> 0.0295361293577807 </data>
                    <data bit_width="32"> 0.0569125944860151 </data>
                    <data bit_width="64"> 0.109659272957484 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4">
                <max>
                  <data bit_width="8"> 0.0140284981245597 </data>
                  <data bit_width="16"> 0.0263566011690562 </data>
                  <data bit_width="32"> 0.0546595035795206 </data>
                  <data bit_width="64"> 0.107406174910988 </data>
                </max>
                <min>
                  <data bit_width="8"> 0.00982073361131738 </data>
                  <data bit_width="16"> 0.0207640615182498 </data>
                  <data bit_width="32"> 0.0380297411987586 </data>
                  <data bit_width="64"> 0.0717661920945907 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8"> 0.00982073361131738 </data>
                    <data bit_width="16"> 0.0207640615182498 </data>
                    <data bit_width="32"> 0.0421914517526323 </data>
                    <data bit_width="64"> 0.0843322354391577 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8"> 0.0140284981245597 </data>
                    <data bit_width="16"> 0.0211615158698425 </data>
                    <data bit_width="32"> 0.0380297411987586 </data>
                    <data bit_width="64"> 0.0717661920945907 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8"> 0.0119966675234668 </data>
                    <data bit_width="16"> 0.0263566011690562 </data>
                    <data bit_width="32"> 0.0546595035795206 </data>
                    <data bit_width="64"> 0.107406174910988 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8">
                <max>
                  <data bit_width="12"> 0.0150232621237219 </data>
                  <data bit_width="16"> 0.0260414408046305 </data>
                  <data bit_width="32"> 0.0480880138420822 </data>
                  <data bit_width="64"> 0.103070118857219 </data>
                </max>
                <min>
                  <data bit_width="12"> 0.0103650639744102 </data>
                  <data bit_width="16"> 0.0160533450905352 </data>
                  <data bit_width="32"> 0.038552200310352 </data>
                  <data bit_width="64"> 0.0766461153633785 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="12"> 0.0103650639744102 </data>
                    <data bit_width="16"> 0.0160533450905352 </data>
                    <data bit_width="32"> 0.038552200310352 </data>
                    <data bit_width="64"> 0.0809309804649569 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="12"> 0.0150232621237219 </data>
                    <data bit_width="16"> 0.0260414408046305 </data>
                    <data bit_width="32"> 0.0429096644675463 </data>
                    <data bit_width="64"> 0.0766461153633785 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="12"> 0.0126599979055997 </data>
                    <data bit_width="16"> 0.0197423456807753 </data>
                    <data bit_width="32"> 0.0480880138420822 </data>
                    <data bit_width="64"> 0.103070118857219 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16">
                <max>
                  <data bit_width="20"> 0.0177528179204509 </data>
                  <data bit_width="32"> 0.0510881157060985 </data>
                  <data bit_width="64"> 0.0946360072637612 </data>
                </max>
                <min>
                  <data bit_width="20"> 0.0118874212219874 </data>
                  <data bit_width="32"> 0.0290457010053122 </data>
                  <data bit_width="64"> 0.0721217467774795 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="20"> 0.0118874212219874 </data>
                    <data bit_width="32"> 0.0290457010053122 </data>
                    <data bit_width="64"> 0.0721217467774795 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="20"> 0.0177528179204509 </data>
                    <data bit_width="32"> 0.0510881157060985 </data>
                    <data bit_width="64"> 0.0848245630319301 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="20"> 0.0143097232535557 </data>
                    <data bit_width="32"> 0.0417703359132537 </data>
                    <data bit_width="64"> 0.0946360072637612 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32">
                <max>
                  <data bit_width="36"> 0.017132712629234 </data>
                  <data bit_width="64"> 0.101181465747035 </data>
                </max>
                <min>
                  <data bit_width="36"> 0.0130783446145351 </data>
                  <data bit_width="64"> 0.0544865453818473 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="36"> 0.0130783446145351 </data>
                    <data bit_width="64"> 0.0544865453818473 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="36"> 0.017132712629234 </data>
                    <data bit_width="64"> 0.101181465747035 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="36"> 0.0147271474743436 </data>
                    <data bit_width="64"> 0.0786179828068772 </data>
                  </priority>
                </typ>
              </parameters>
            </est_index>

            <est_index name="aspect_ratio">
              <!-- Dummy yet -->
            </est_index>

            <est_index name="height">
              <!-- Dummy yet -->
            </est_index>

            <est_index name="width">
              <!-- Dummy yet -->
            </est_index>
          </est_type>

          <est_type name="timing">
            <est_index name="delay">
              <unit> ns </unit>

              <parameters name="variable">
                <max>
                  <data bit_width="4"> 2.61 </data>
                  <data bit_width="8"> 4.00 </data>
                  <data bit_width="16"> 5.37 </data>
                  <data bit_width="32"> 7.15 </data>
                  <data bit_width="64"> 8.61 </data>
                </max>
                <min>
                  <data bit_width="4"> 1.00 </data>
                  <data bit_width="8"> 1.72 </data>
                  <data bit_width="16"> 2.27 </data>
                  <data bit_width="32"> 2.62 </data>
                  <data bit_width="64"> 3.38 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 2.07 </data>
                    <data bit_width="8"> 3.10 </data>
                    <data bit_width="16"> 3.71 </data>
                    <data bit_width="32"> 4.57 </data>
                    <data bit_width="64"> 6.01 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 1.00 </data>
                    <data bit_width="8"> 1.72 </data>
                    <data bit_width="16"> 2.27 </data>
                    <data bit_width="32"> 2.62 </data>
                    <data bit_width="64"> 3.38 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.61 </data>
                    <data bit_width="8"> 4.00 </data>
                    <data bit_width="16"> 5.37 </data>
                    <data bit_width="32"> 7.15 </data>
                    <data bit_width="64"> 8.61 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="1">
                <max>
                  <data bit_width="4"> 2.11 </data>
                  <data bit_width="8"> 1.83 </data>
                  <data bit_width="16"> 1.96 </data>
                  <data bit_width="32"> 2.80 </data>
                  <data bit_width="64"> 2.62 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.45 </data>
                  <data bit_width="8"> 0.58 </data>
                  <data bit_width="16"> 0.58 </data>
                  <data bit_width="32"> 0.58 </data>
                  <data bit_width="64"> 0.58 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 1.65 </data>
                    <data bit_width="8"> 1.73 </data>
                    <data bit_width="16"> 1.79 </data>
                    <data bit_width="32"> 2.09 </data>
                    <data bit_width="64"> 2.39 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.45 </data>
                    <data bit_width="8"> 0.58 </data>
                    <data bit_width="16"> 0.58 </data>
                    <data bit_width="32"> 0.58 </data>
                    <data bit_width="64"> 0.58 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.11 </data>
                    <data bit_width="8"> 1.83 </data>
                    <data bit_width="16"> 1.96 </data>
                    <data bit_width="32"> 2.80 </data>
                    <data bit_width="64"> 2.62 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="2">
                <max>
                  <data bit_width="4"> 1.53 </data>
                  <data bit_width="8"> 1.83 </data>
                  <data bit_width="16"> 2.03 </data>
                  <data bit_width="32"> 2.42 </data>
                  <data bit_width="64"> 2.62 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.62 </data>
                  <data bit_width="8"> 0.44 </data>
                  <data bit_width="16"> 0.44 </data>
                  <data bit_width="32"> 0.44 </data>
                  <data bit_width="64"> 0.44 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.90 </data>
                    <data bit_width="8"> 1.77 </data>
                    <data bit_width="16"> 1.76 </data>
                    <data bit_width="32"> 2.08 </data>
                    <data bit_width="64"> 2.37 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.62 </data>
                    <data bit_width="8"> 0.44 </data>
                    <data bit_width="16"> 0.44 </data>
                    <data bit_width="32"> 0.44 </data>
                    <data bit_width="64"> 0.44 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 1.53 </data>
                    <data bit_width="8"> 1.83 </data>
                    <data bit_width="16"> 2.03 </data>
                    <data bit_width="32"> 2.42 </data>
                    <data bit_width="64"> 2.62 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4">
                <max>
                  <data bit_width="8"> 1.53 </data>
                  <data bit_width="16"> 2.03 </data>
                  <data bit_width="32"> 2.27 </data>
                  <data bit_width="64"> 2.49 </data>
                </max>
                <min>
                  <data bit_width="8"> 0.45 </data>
                  <data bit_width="16"> 0.58 </data>
                  <data bit_width="32"> 0.58 </data>
                  <data bit_width="64"> 0.58 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8"> 1.09 </data>
                    <data bit_width="16"> 2.03 </data>
                    <data bit_width="32"> 1.71 </data>
                    <data bit_width="64"> 2.01 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8"> 0.45 </data>
                    <data bit_width="16"> 0.58 </data>
                    <data bit_width="32"> 0.58 </data>
                    <data bit_width="64"> 0.58 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8"> 1.53 </data>
                    <data bit_width="16"> 1.95 </data>
                    <data bit_width="32"> 2.27 </data>
                    <data bit_width="64"> 2.49 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8">
                <max>
                  <data bit_width="12"> 1.53 </data>
                  <data bit_width="16"> 1.40 </data>
                  <data bit_width="32"> 2.42 </data>
                  <data bit_width="64"> 2.74 </data>
                </max>
                <min>
                  <data bit_width="12"> 0.49 </data>
                  <data bit_width="16"> 0.58 </data>
                  <data bit_width="32"> 0.58 </data>
                  <data bit_width="64"> 0.58 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="12"> 1.09 </data>
                    <data bit_width="16"> 1.26 </data>
                    <data bit_width="32"> 2.42 </data>
                    <data bit_width="64"> 2.44 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="12"> 0.49 </data>
                    <data bit_width="16"> 0.58 </data>
                    <data bit_width="32"> 0.58 </data>
                    <data bit_width="64"> 0.58 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="12"> 1.53 </data>
                    <data bit_width="16"> 1.40 </data>
                    <data bit_width="32"> 2.32 </data>
                    <data bit_width="64"> 2.74 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16">
                <max>
                  <data bit_width="20"> 2.22 </data>
                  <data bit_width="32"> 2.04 </data>
                  <data bit_width="64"> 2.63 </data>
                </max>
                <min>
                  <data bit_width="20"> 0.44 </data>
                  <data bit_width="32"> 0.58 </data>
                  <data bit_width="64"> 0.58 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="20"> 1.73 </data>
                    <data bit_width="32"> 1.87 </data>
                    <data bit_width="64"> 2.34 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="20"> 0.44 </data>
                    <data bit_width="32"> 0.58 </data>
                    <data bit_width="64"> 0.58 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="20"> 2.22 </data>
                    <data bit_width="32"> 2.04 </data>
                    <data bit_width="64"> 2.63 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32">
                <max>
                  <data bit_width="36"> 2.31 </data>
                  <data bit_width="64"> 2.86 </data>
                </max>
                <min>
                  <data bit_width="36"> 0.58 </data>
                  <data bit_width="64"> 0.58 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="36"> 2.12 </data>
                    <data bit_width="64"> 2.12 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="36"> 0.58 </data>
                    <data bit_width="64"> 0.58 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="36"> 2.31 </data>
                    <data bit_width="64"> 2.86 </data>
                  </priority>
                </typ>
              </parameters>
            </est_index>

            <est_index name="delay_fullpath">
              <unit> ns </unit>

              <parameters name="variable">
                <max>
                  <data bit_width="4">
                    path	 data_in	 data_out	 1.00
                    path	 mode	 data_out	 1.60
                    path	 ctrl	 data_out	 1.50
                  </data>
                  <data bit_width="8">
                    path	 data_in	 data_out	 1.69
                    path	 mode	 data_out	 2.63
                    path	 ctrl	 data_out	 2.27
                  </data>
                  <data bit_width="16">
                    path	 data_in	 data_out	 2.32
                    path	 mode	 data_out	 3.43
                    path	 ctrl	 data_out	 3.05
                  </data>
                  <data bit_width="36">
                    path	 data_in	 data_out	 3.15
                    path	 mode	 data_out	 4.28
                    path	 data_in	 data_out	 3.15
                  </data>
                  <data bit_width="64">
                    path	 data_in	 data_out	 3.31
                    path	 mode	 data_out	 4.79
                    path	 ctrl	 data_out	 4.72
                  </data>
                </max>
                <min>
                  <data bit_width="4">
                    path	 data_in	 data_out	 1.00
                    path	 mode	 data_out	 1.60
                    path	 ctrl	 data_out	 1.50
                  </data>
                  <data bit_width="8">
                    path	 data_in	 data_out	 1.69
                    path	 mode	 data_out	 2.63
                    path	 ctrl	 data_out	 2.27
                  </data>
                  <data bit_width="16">
                    path	 data_in	 data_out	 2.32
                    path	 mode	 data_out	 3.43
                    path	 ctrl	 data_out	 3.05
                  </data>
                  <data bit_width="36">
                    path	 data_in	 data_out	 3.15
                    path	 mode	 data_out	 4.28
                    path	 data_in	 data_out	 3.15
                  </data>
                  <data bit_width="64">
                    path	 data_in	 data_out	 3.31
                    path	 mode	 data_out	 4.79
                    path	 ctrl	 data_out	 4.72
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4">
                      path	 data_in	 data_out	 0.74
                      path	 mode	 data_out	 1.09
                      path	 ctrl	 data_out	 1.03
                    </data>
                    <data bit_width="8">
                      path	 data_in	 data_out	 1.19
                      path	 mode	 data_out	 1.92
                      path	 ctrl	 data_out	 1.73
                    </data>
                    <data bit_width="16">
                      path	 data_in	 data_out	 1.74
                      path	 mode	 data_out	 2.70
                      path	 ctrl	 data_out	 2.38
                    </data>
                    <data bit_width="36">
                      path	 data_in	 data_out	 2.74
                      path	 mode	 data_out	 3.69
                      path	 data_in	 data_out	 2.74
                    </data>
                    <data bit_width="64">
                      path	 data_in	 data_out	 2.92
                      path	 mode	 data_out	 4.04
                      path	 ctrl	 data_out	 3.97
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4">
                      path	 data_in	 data_out	 0.59
                      path	 mode	 data_out	 0.59
                      path	 ctrl	 data_out	 0.58
                    </data>
                    <data bit_width="8">
                      path	 data_in	 data_out	 0.87
                      path	 mode	 data_out	 0.86
                      path	 ctrl	 data_out	 0.87
                    </data>
                    <data bit_width="16">
                      path	 data_in	 data_out	 1.14
                      path	 mode	 data_out	 1.14
                      path	 ctrl	 data_out	 1.14
                    </data>
                    <data bit_width="36">
                      path	 data_in	 data_out	 1.54
                      path	 mode	 data_out	 1.54
                      path	 data_in	 data_out	 1.54
                    </data>
                    <data bit_width="64">
                      path	 data_in	 data_out	 1.89
                      path	 mode	 data_out	 1.89
                      path	 ctrl	 data_out	 1.88
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4">
                      path	 data_in	 data_out	 1.00
                      path	 mode	 data_out	 1.60
                      path	 ctrl	 data_out	 1.50
                    </data>
                    <data bit_width="8">
                      path	 data_in	 data_out	 1.69
                      path	 mode	 data_out	 2.63
                      path	 ctrl	 data_out	 2.27
                    </data>
                    <data bit_width="16">
                      path	 data_in	 data_out	 2.32
                      path	 mode	 data_out	 3.43
                      path	 ctrl	 data_out	 3.05
                    </data>
                    <data bit_width="36">
                      path	 data_in	 data_out	 3.15
                      path	 mode	 data_out	 4.28
                      path	 data_in	 data_out	 3.15
                    </data>
                    <data bit_width="64">
                      path	 data_in	 data_out	 3.31
                      path	 mode	 data_out	 4.79
                      path	 ctrl	 data_out	 4.72
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="1">
                <max>
                  <data bit_width="4">
                    path	 data_in	 data_out	 0.65
                    path	 mode	 data_out	 1.56
                  </data>
                  <data bit_width="8">
                    path	 data_in	 data_out	 0.52
                    path	 mode	 data_out	 1.23
                  </data>
                  <data bit_width="16">
                    path	 data_in	 data_out	 0.64
                    path	 mode	 data_out	 1.43
                  </data>
                  <data bit_width="36">
                    path	 data_in	 data_out	 0.64
                    path	 mode	 data_out	 1.62
                  </data>
                  <data bit_width="64">
                    path	 data_in	 data_out	 0.64
                    path	 mode	 data_out	 1.56
                  </data>
                </max>
                <min>
                  <data bit_width="4">
                    path	 data_in	 data_out	 0.65
                    path	 mode	 data_out	 1.56
                  </data>
                  <data bit_width="8">
                    path	 data_in	 data_out	 0.52
                    path	 mode	 data_out	 1.23
                  </data>
                  <data bit_width="16">
                    path	 data_in	 data_out	 0.64
                    path	 mode	 data_out	 1.43
                  </data>
                  <data bit_width="36">
                    path	 data_in	 data_out	 0.64
                    path	 mode	 data_out	 1.62
                  </data>
                  <data bit_width="64">
                    path	 data_in	 data_out	 0.64
                    path	 mode	 data_out	 1.56
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4">
                      path	 data_in	 data_out	 0.37
                      path	 mode	 data_out	 1.05
                    </data>
                    <data bit_width="8">
                      path	 data_in	 data_out	 0.37
                      path	 mode	 data_out	 0.92
                    </data>
                    <data bit_width="16">
                      path	 data_in	 data_out	 0.37
                      path	 mode	 data_out	 0.88
                    </data>
                    <data bit_width="36">
                      path	 data_in	 data_out	 0.37
                      path	 mode	 data_out	 0.95
                    </data>
                    <data bit_width="64">
                      path	 data_in	 data_out	 0.37
                      path	 mode	 data_out	 1.46
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4">
                      path	 data_in	 data_out	 0.36
                      path	 mode	 data_out	 0.35
                    </data>
                    <data bit_width="8">
                      path	 data_in	 data_out	 0.36
                      path	 mode	 data_out	 0.35
                    </data>
                    <data bit_width="16">
                      path	 data_in	 data_out	 0.36
                      path	 mode	 data_out	 0.35
                    </data>
                    <data bit_width="36">
                      path	 data_in	 data_out	 0.36
                      path	 mode	 data_out	 0.35
                    </data>
                    <data bit_width="64">
                      path	 data_in	 data_out	 0.36
                      path	 mode	 data_out	 0.35
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4">
                      path	 data_in	 data_out	 0.65
                      path	 mode	 data_out	 1.56
                    </data>
                    <data bit_width="8">
                      path	 data_in	 data_out	 0.52
                      path	 mode	 data_out	 1.23
                    </data>
                    <data bit_width="16">
                      path	 data_in	 data_out	 0.64
                      path	 mode	 data_out	 1.43
                    </data>
                    <data bit_width="36">
                      path	 data_in	 data_out	 0.64
                      path	 mode	 data_out	 1.62
                    </data>
                    <data bit_width="64">
                      path	 data_in	 data_out	 0.64
                      path	 mode	 data_out	 1.56
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="2">
                <max>
                  <data bit_width="4">
                    path	 data_in	 data_out	 0.52
                    path	 mode	 data_out	 1.37
                  </data>
                  <data bit_width="8">
                    path	 data_in	 data_out	 0.52
                    path	 mode	 data_out	 1.50
                  </data>
                  <data bit_width="16">
                    path	 data_in	 data_out	 0.64
                    path	 mode	 data_out	 1.49
                  </data>
                  <data bit_width="36">
                    path	 data_in	 data_out	 0.64
                    path	 mode	 data_out	 1.82
                  </data>
                  <data bit_width="64">
                    path	 data_in	 data_out	 0.64
                    path	 mode	 data_out	 1.57
                  </data>
                </max>
                <min>
                  <data bit_width="4">
                    path	 data_in	 data_out	 0.52
                    path	 mode	 data_out	 1.37
                  </data>
                  <data bit_width="8">
                    path	 data_in	 data_out	 0.52
                    path	 mode	 data_out	 1.50
                  </data>
                  <data bit_width="16">
                    path	 data_in	 data_out	 0.64
                    path	 mode	 data_out	 1.49
                  </data>
                  <data bit_width="36">
                    path	 data_in	 data_out	 0.64
                    path	 mode	 data_out	 1.82
                  </data>
                  <data bit_width="64">
                    path	 data_in	 data_out	 0.64
                    path	 mode	 data_out	 1.57
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4">
                      path	 data_in	 data_out	 0.48
                      path	 mode	 data_out	 0.78
                    </data>
                    <data bit_width="8">
                      path	 data_in	 data_out	 0.37
                      path	 mode	 data_out	 0.88
                    </data>
                    <data bit_width="16">
                      path	 data_in	 data_out	 0.38
                      path	 mode	 data_out	 0.93
                    </data>
                    <data bit_width="36">
                      path	 data_in	 data_out	 0.38
                      path	 mode	 data_out	 1.08
                    </data>
                    <data bit_width="64">
                      path	 data_in	 data_out	 0.38
                      path	 mode	 data_out	 1.17
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4">
                      path	 data_in	 data_out	 0.37
                      path	 mode	 data_out	 0.38
                    </data>
                    <data bit_width="8">
                      path	 data_in	 data_out	 0.36
                      path	 mode	 data_out	 0.36
                    </data>
                    <data bit_width="16">
                      path	 data_in	 data_out	 0.36
                      path	 mode	 data_out	 0.36
                    </data>
                    <data bit_width="36">
                      path	 data_in	 data_out	 0.36
                      path	 mode	 data_out	 0.36
                    </data>
                    <data bit_width="64">
                      path	 data_in	 data_out	 0.36
                      path	 mode	 data_out	 0.36
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4">
                      path	 data_in	 data_out	 0.52
                      path	 mode	 data_out	 1.37
                    </data>
                    <data bit_width="8">
                      path	 data_in	 data_out	 0.52
                      path	 mode	 data_out	 1.50
                    </data>
                    <data bit_width="16">
                      path	 data_in	 data_out	 0.64
                      path	 mode	 data_out	 1.49
                    </data>
                    <data bit_width="36">
                      path	 data_in	 data_out	 0.64
                      path	 mode	 data_out	 1.82
                    </data>
                    <data bit_width="64">
                      path	 data_in	 data_out	 0.64
                      path	 mode	 data_out	 1.57
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4">
                <max>
                  <data bit_width="4">
                    path	 data_in	 data_out	 0.52
                    path	 mode	 data_out	 1.37
                  </data>
                  <data bit_width="8">
                    path	 data_in	 data_out	 0.61
                    path	 mode	 data_out	 1.37
                  </data>
                  <data bit_width="16">
                    path	 data_in	 data_out	 0.55
                    path	 mode	 data_out	 1.43
                  </data>
                  <data bit_width="36">
                    path	 data_in	 data_out	 0.50
                    path	 mode	 data_out	 1.71
                  </data>
                  <data bit_width="64">
                    path	 data_in	 data_out	 0.50
                    path	 mode	 data_out	 1.58
                  </data>
                </max>
                <min>
                  <data bit_width="4">
                    path	 data_in	 data_out	 0.52
                    path	 mode	 data_out	 1.37
                  </data>
                  <data bit_width="8">
                    path	 data_in	 data_out	 0.61
                    path	 mode	 data_out	 1.37
                  </data>
                  <data bit_width="16">
                    path	 data_in	 data_out	 0.55
                    path	 mode	 data_out	 1.43
                  </data>
                  <data bit_width="36">
                    path	 data_in	 data_out	 0.50
                    path	 mode	 data_out	 1.71
                  </data>
                  <data bit_width="64">
                    path	 data_in	 data_out	 0.50
                    path	 mode	 data_out	 1.58
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4">
                      path	 data_in	 data_out	 0.48
                      path	 mode	 data_out	 0.78
                    </data>
                    <data bit_width="8">
                      path	 data_in	 data_out	 0.41
                      path	 mode	 data_out	 0.79
                    </data>
                    <data bit_width="16">
                      path	 data_in	 data_out	 0.38
                      path	 mode	 data_out	 1.08
                    </data>
                    <data bit_width="36">
                      path	 data_in	 data_out	 0.45
                      path	 mode	 data_out	 1.13
                    </data>
                    <data bit_width="64">
                      path	 data_in	 data_out	 0.45
                      path	 mode	 data_out	 1.25
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4">
                      path	 data_in	 data_out	 0.37
                      path	 mode	 data_out	 0.38
                    </data>
                    <data bit_width="8">
                      path	 data_in	 data_out	 0.36
                      path	 mode	 data_out	 0.35
                    </data>
                    <data bit_width="16">
                      path	 data_in	 data_out	 0.36
                      path	 mode	 data_out	 0.35
                    </data>
                    <data bit_width="36">
                      path	 data_in	 data_out	 0.36
                      path	 mode	 data_out	 0.35
                    </data>
                    <data bit_width="64">
                      path	 data_in	 data_out	 0.36
                      path	 mode	 data_out	 0.36
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4">
                      path	 data_in	 data_out	 0.52
                      path	 mode	 data_out	 1.37
                    </data>
                    <data bit_width="8">
                      path	 data_in	 data_out	 0.61
                      path	 mode	 data_out	 1.37
                    </data>
                    <data bit_width="16">
                      path	 data_in	 data_out	 0.55
                      path	 mode	 data_out	 1.43
                    </data>
                    <data bit_width="36">
                      path	 data_in	 data_out	 0.50
                      path	 mode	 data_out	 1.71
                    </data>
                    <data bit_width="64">
                      path	 data_in	 data_out	 0.50
                      path	 mode	 data_out	 1.58
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8">
                <max>
                  <data bit_width="4">
                    path	 data_in	 data_out	 0.52
                    path	 mode	 data_out	 1.37
                  </data>
                  <data bit_width="8">
                    path	 data_in	 data_out	 0.61
                    path	 mode	 data_out	 1.37
                  </data>
                  <data bit_width="16">
                    path	 data_in	 data_out	 0.54
                    path	 mode	 data_out	 1.37
                  </data>
                  <data bit_width="36">
                    path	 data_in	 data_out	 0.53
                    path	 mode	 data_out	 1.83
                  </data>
                  <data bit_width="64">
                    path	 data_in	 data_out	 0.56
                    path	 mode	 data_out	 1.47
                  </data>
                </max>
                <min>
                  <data bit_width="4">
                    path	 data_in	 data_out	 0.52
                    path	 mode	 data_out	 1.37
                  </data>
                  <data bit_width="8">
                    path	 data_in	 data_out	 0.61
                    path	 mode	 data_out	 1.37
                  </data>
                  <data bit_width="16">
                    path	 data_in	 data_out	 0.54
                    path	 mode	 data_out	 1.37
                  </data>
                  <data bit_width="36">
                    path	 data_in	 data_out	 0.53
                    path	 mode	 data_out	 1.83
                  </data>
                  <data bit_width="64">
                    path	 data_in	 data_out	 0.56
                    path	 mode	 data_out	 1.47
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4">
                      path	 data_in	 data_out	 0.48
                      path	 mode	 data_out	 0.78
                    </data>
                    <data bit_width="8">
                      path	 data_in	 data_out	 0.41
                      path	 mode	 data_out	 0.79
                    </data>
                    <data bit_width="16">
                      path	 data_in	 data_out	 0.30
                      path	 mode	 data_out	 0.81
                    </data>
                    <data bit_width="36">
                      path	 data_in	 data_out	 0.57
                      path	 mode	 data_out	 1.21
                    </data>
                    <data bit_width="64">
                      path	 data_in	 data_out	 0.57
                      path	 mode	 data_out	 1.30
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4">
                      path	 data_in	 data_out	 0.37
                      path	 mode	 data_out	 0.38
                    </data>
                    <data bit_width="8">
                      path	 data_in	 data_out	 0.36
                      path	 mode	 data_out	 0.35
                    </data>
                    <data bit_width="16">
                      path	 data_in	 data_out	 0.38
                      path	 mode	 data_out	 0.37
                    </data>
                    <data bit_width="36">
                      path	 data_in	 data_out	 0.36
                      path	 mode	 data_out	 0.35
                    </data>
                    <data bit_width="64">
                      path	 data_in	 data_out	 0.36
                      path	 mode	 data_out	 0.35
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4">
                      path	 data_in	 data_out	 0.52
                      path	 mode	 data_out	 1.37
                    </data>
                    <data bit_width="8">
                      path	 data_in	 data_out	 0.61
                      path	 mode	 data_out	 1.37
                    </data>
                    <data bit_width="16">
                      path	 data_in	 data_out	 0.54
                      path	 mode	 data_out	 1.37
                    </data>
                    <data bit_width="36">
                      path	 data_in	 data_out	 0.53
                      path	 mode	 data_out	 1.83
                    </data>
                    <data bit_width="64">
                      path	 data_in	 data_out	 0.56
                      path	 mode	 data_out	 1.47
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16">
                <max>
                  <data bit_width="4">
                    path	 data_in	 data_out	 0.52
                    path	 mode	 data_out	 1.37
                  </data>
                  <data bit_width="8">
                    path	 data_in	 data_out	 0.61
                    path	 mode	 data_out	 1.37
                  </data>
                  <data bit_width="16">
                    path	 data_in	 data_out	 0.54
                    path	 mode	 data_out	 1.37
                  </data>
                  <data bit_width="36">
                    path	 data_in	 data_out	 0.63
                    path	 mode	 data_out	 1.63
                  </data>
                  <data bit_width="64">
                    path	 data_in	 data_out	 0.89
                    path	 mode	 data_out	 1.95
                  </data>
                </max>
                <min>
                  <data bit_width="4">
                    path	 data_in	 data_out	 0.52
                    path	 mode	 data_out	 1.37
                  </data>
                  <data bit_width="8">
                    path	 data_in	 data_out	 0.61
                    path	 mode	 data_out	 1.37
                  </data>
                  <data bit_width="16">
                    path	 data_in	 data_out	 0.54
                    path	 mode	 data_out	 1.37
                  </data>
                  <data bit_width="36">
                    path	 data_in	 data_out	 0.63
                    path	 mode	 data_out	 1.63
                  </data>
                  <data bit_width="64">
                    path	 data_in	 data_out	 0.89
                    path	 mode	 data_out	 1.95
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4">
                      path	 data_in	 data_out	 0.48
                      path	 mode	 data_out	 0.78
                    </data>
                    <data bit_width="8">
                      path	 data_in	 data_out	 0.41
                      path	 mode	 data_out	 0.79
                    </data>
                    <data bit_width="16">
                      path	 data_in	 data_out	 0.30
                      path	 mode	 data_out	 0.81
                    </data>
                    <data bit_width="36">
                      path	 data_in	 data_out	 0.57
                      path	 mode	 data_out	 1.15
                    </data>
                    <data bit_width="64">
                      path	 data_in	 data_out	 0.55
                      path	 mode	 data_out	 1.26
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4">
                      path	 data_in	 data_out	 0.37
                      path	 mode	 data_out	 0.38
                    </data>
                    <data bit_width="8">
                      path	 data_in	 data_out	 0.36
                      path	 mode	 data_out	 0.35
                    </data>
                    <data bit_width="16">
                      path	 data_in	 data_out	 0.38
                      path	 mode	 data_out	 0.37
                    </data>
                    <data bit_width="36">
                      path	 data_in	 data_out	 0.36
                      path	 mode	 data_out	 0.35
                    </data>
                    <data bit_width="64">
                      path	 data_in	 data_out	 0.36
                      path	 mode	 data_out	 0.35
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4">
                      path	 data_in	 data_out	 0.52
                      path	 mode	 data_out	 1.37
                    </data>
                    <data bit_width="8">
                      path	 data_in	 data_out	 0.61
                      path	 mode	 data_out	 1.37
                    </data>
                    <data bit_width="16">
                      path	 data_in	 data_out	 0.54
                      path	 mode	 data_out	 1.37
                    </data>
                    <data bit_width="36">
                      path	 data_in	 data_out	 0.63
                      path	 mode	 data_out	 1.63
                    </data>
                    <data bit_width="64">
                      path	 data_in	 data_out	 0.89
                      path	 mode	 data_out	 1.95
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32">
                <max>
                  <data bit_width="4">
                    path	 data_in	 data_out	 0.52
                    path	 mode	 data_out	 1.37
                  </data>
                  <data bit_width="8">
                    path	 data_in	 data_out	 0.61
                    path	 mode	 data_out	 1.37
                  </data>
                  <data bit_width="16">
                    path	 data_in	 data_out	 0.54
                    path	 mode	 data_out	 1.37
                  </data>
                  <data bit_width="36">
                    path	 data_in	 data_out	 0.58
                    path	 mode	 data_out	 1.63
                  </data>
                  <data bit_width="64">
                    path	 data_in	 data_out	 0.82
                    path	 mode	 data_out	 1.69
                  </data>
                </max>
                <min>
                  <data bit_width="4">
                    path	 data_in	 data_out	 0.52
                    path	 mode	 data_out	 1.37
                  </data>
                  <data bit_width="8">
                    path	 data_in	 data_out	 0.61
                    path	 mode	 data_out	 1.37
                  </data>
                  <data bit_width="16">
                    path	 data_in	 data_out	 0.54
                    path	 mode	 data_out	 1.37
                  </data>
                  <data bit_width="36">
                    path	 data_in	 data_out	 0.58
                    path	 mode	 data_out	 1.63
                  </data>
                  <data bit_width="64">
                    path	 data_in	 data_out	 0.82
                    path	 mode	 data_out	 1.69
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4">
                      path	 data_in	 data_out	 0.48
                      path	 mode	 data_out	 0.78
                    </data>
                    <data bit_width="8">
                      path	 data_in	 data_out	 0.41
                      path	 mode	 data_out	 0.79
                    </data>
                    <data bit_width="16">
                      path	 data_in	 data_out	 0.30
                      path	 mode	 data_out	 0.81
                    </data>
                    <data bit_width="36">
                      path	 data_in	 data_out	 0.79
                      path	 mode	 data_out	 1.40
                    </data>
                    <data bit_width="64">
                      path	 data_in	 data_out	 0.52
                      path	 mode	 data_out	 1.27
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4">
                      path	 data_in	 data_out	 0.37
                      path	 mode	 data_out	 0.38
                    </data>
                    <data bit_width="8">
                      path	 data_in	 data_out	 0.36
                      path	 mode	 data_out	 0.35
                    </data>
                    <data bit_width="16">
                      path	 data_in	 data_out	 0.38
                      path	 mode	 data_out	 0.37
                    </data>
                    <data bit_width="36">
                      path	 data_in	 data_out	 0.36
                      path	 mode	 data_out	 0.36
                    </data>
                    <data bit_width="64">
                      path	 data_in	 data_out	 0.41
                      path	 mode	 data_out	 0.40
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4">
                      path	 data_in	 data_out	 0.52
                      path	 mode	 data_out	 1.37
                    </data>
                    <data bit_width="8">
                      path	 data_in	 data_out	 0.61
                      path	 mode	 data_out	 1.37
                    </data>
                    <data bit_width="16">
                      path	 data_in	 data_out	 0.54
                      path	 mode	 data_out	 1.37
                    </data>
                    <data bit_width="36">
                      path	 data_in	 data_out	 0.58
                      path	 mode	 data_out	 1.63
                    </data>
                    <data bit_width="64">
                      path	 data_in	 data_out	 0.82
                      path	 mode	 data_out	 1.69
                    </data>
                  </priority>
                </typ>
              </parameters>

            </est_index>
          </est_type>

          <est_type name="power">
            <est_index name="static_power">
              <unit> mW </unit>
              <parameters name="variable">
                <max>
                  <data bit_width="4"> 17.1455 </data>
                  <data bit_width="8"> 48.7853 </data>
                  <data bit_width="16"> 111.9544 </data>
                  <data bit_width="32"> 324.9434 </data>
                  <data bit_width="64"> 759.3666 </data>
                </max>
                <min>
                  <data bit_width="4"> 6.4369 </data>
                  <data bit_width="8"> 17.4386 </data>
                  <data bit_width="16"> 44.4278 </data>
                  <data bit_width="32"> 107.7428 </data>
                  <data bit_width="64"> 288.5927 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 8.5241 </data>
                    <data bit_width="8"> 23.1921 </data>
                    <data bit_width="16"> 58.8086 </data>
                    <data bit_width="32"> 145.3465 </data>
                    <data bit_width="64"> 369.6021 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 17.1455 </data>
                    <data bit_width="8"> 48.7853 </data>
                    <data bit_width="16"> 111.9544 </data>
                    <data bit_width="32"> 324.9434 </data>
                    <data bit_width="64"> 759.3666 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 6.4369 </data>
                    <data bit_width="8"> 17.4386 </data>
                    <data bit_width="16"> 44.4278 </data>
                    <data bit_width="32"> 107.7428 </data>
                    <data bit_width="64"> 288.5927 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="1">
                <max>
                  <data bit_width="4"> 3.8131 </data>
                  <data bit_width="8"> 6.4425 </data>
                  <data bit_width="16"> 11.7090 </data>
                  <data bit_width="32"> 22.5830 </data>
                  <data bit_width="64"> 43.7106 </data>
                </max>
                <min>
                  <data bit_width="4"> 2.8296 </data>
                  <data bit_width="8"> 3.6305 </data>
                  <data bit_width="16"> 6.2678 </data>
                  <data bit_width="32"> 11.5453 </data>
                  <data bit_width="64"> 22.1028 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 3.8131 </data>
                    <data bit_width="8"> 6.4425 </data>
                    <data bit_width="16"> 11.7090 </data>
                    <data bit_width="32"> 22.5830 </data>
                    <data bit_width="64"> 43.7106 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 2.8296 </data>
                    <data bit_width="8"> 3.6305 </data>
                    <data bit_width="16"> 6.2678 </data>
                    <data bit_width="32"> 11.5453 </data>
                    <data bit_width="64"> 22.1028 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 3.3743 </data>
                    <data bit_width="8"> 5.5991 </data>
                    <data bit_width="16"> 9.9003 </data>
                    <data bit_width="32"> 18.7511 </data>
                    <data bit_width="64"> 36.0195 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="2">
                <max>
                  <data bit_width="4"> 5.6046 </data>
                  <data bit_width="8"> 5.7243 </data>
                  <data bit_width="16"> 11.3652 </data>
                  <data bit_width="32"> 22.2372 </data>
                  <data bit_width="64"> 43.3677 </data>
                </max>
                <min>
                  <data bit_width="4"> 2.5306 </data>
                  <data bit_width="8"> 5.1952 </data>
                  <data bit_width="16"> 7.9964 </data>
                  <data bit_width="32"> 13.2746 </data>
                  <data bit_width="64"> 23.8297 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 2.6488 </data>
                    <data bit_width="8"> 5.7243 </data>
                    <data bit_width="16"> 11.3652 </data>
                    <data bit_width="32"> 22.2372 </data>
                    <data bit_width="64"> 43.3677 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 5.6046 </data>
                    <data bit_width="8"> 5.3605 </data>
                    <data bit_width="16"> 7.9964 </data>
                    <data bit_width="32"> 13.2746 </data>
                    <data bit_width="64"> 23.8297 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.5306 </data>
                    <data bit_width="8"> 5.1952 </data>
                    <data bit_width="16"> 9.6504 </data>
                    <data bit_width="32"> 18.5573 </data>
                    <data bit_width="64"> 35.8719 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4">
                <max>
                  <data bit_width="8"> 8.4532 </data>
                  <data bit_width="16"> 9.4504 </data>
                  <data bit_width="32"> 20.2344 </data>
                  <data bit_width="64"> 41.0578 </data>
                </max>
                <min>
                  <data bit_width="8"> 3.8453 </data>
                  <data bit_width="16"> 7.9317 </data>
                  <data bit_width="32"> 14.7232 </data>
                  <data bit_width="64"> 25.3017 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8"> 4.0713 </data>
                    <data bit_width="16"> 9.3039 </data>
                    <data bit_width="32"> 20.2344 </data>
                    <data bit_width="64"> 41.0578 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8"> 8.4532 </data>
                    <data bit_width="16"> 9.4504 </data>
                    <data bit_width="32"> 14.7232 </data>
                    <data bit_width="64"> 25.3017 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8"> 3.8453 </data>
                    <data bit_width="16"> 7.9317 </data>
                    <data bit_width="32"> 16.2670 </data>
                    <data bit_width="64"> 32.2580 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8">
                <max>
                  <data bit_width="12"> 8.4343 </data>
                  <data bit_width="16"> 14.0813 </data>
                  <data bit_width="32"> 19.4115 </data>
                  <data bit_width="64"> 37.4569 </data>
                </max>
                <min>
                  <data bit_width="12"> 3.9336 </data>
                  <data bit_width="16"> 6.3277 </data>
                  <data bit_width="32"> 14.5105 </data>
                  <data bit_width="64"> 29.9352 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="12"> 4.1741 </data>
                    <data bit_width="16"> 6.8178 </data>
                    <data bit_width="32"> 17.2390 </data>
                    <data bit_width="64"> 37.4569 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="12"> 8.4343 </data>
                    <data bit_width="16"> 14.0813 </data>
                    <data bit_width="32"> 19.4115 </data>
                    <data bit_width="64"> 29.9352 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="12"> 3.9336 </data>
                    <data bit_width="16"> 6.3277 </data>
                    <data bit_width="32"> 14.5105 </data>
                    <data bit_width="64"> 30.5165 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16">
                <max>
                  <data bit_width="20"> 10.5000 </data>
                  <data bit_width="32"> 27.4655 </data>
                  <data bit_width="64"> 38.0124 </data>
                </max>
                <min>
                  <data bit_width="20"> 4.2274 </data>
                  <data bit_width="32"> 11.1175 </data>
                  <data bit_width="64"> 27.1828 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="20"> 4.9268 </data>
                    <data bit_width="32"> 11.7950 </data>
                    <data bit_width="64"> 32.5006 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="20"> 10.5000 </data>
                    <data bit_width="32"> 27.4655 </data>
                    <data bit_width="64"> 38.0124 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="20"> 4.2274 </data>
                    <data bit_width="32"> 11.1175 </data>
                    <data bit_width="64"> 27.1828 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32">
                <max>
                  <data bit_width="36"> 8.5708 </data>
                  <data bit_width="64"> 54.2149 </data>
                </max>
                <min>
                  <data bit_width="36"> 4.0824 </data>
                  <data bit_width="64"> 20.4612 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="36"> 4.9947 </data>
                    <data bit_width="64"> 22.6665 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="36"> 8.5708 </data>
                    <data bit_width="64"> 54.2149 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="36"> 4.0824 </data>
                    <data bit_width="64"> 20.4612 </data>
                  </priority>
                </typ>
              </parameters>
            </est_index>
          </est_type>

          <est_type name="function_cycle">
            <unit> cycle </unit>

            <est_index name="cycle">
              <parameters name="variable">
                <function name="sll">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="sla">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="srl">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="sra">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="1">
                <function name="sll">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="sla">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="srl">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="sra">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="2">
                <function name="sll">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="sla">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="srl">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="sra">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="4">
                <function name="sll">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="sla">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="srl">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="sra">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="8">
                <function name="sll">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="sla">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="srl">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="sra">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="16">
                <function name="sll">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="sla">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="srl">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="sra">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="32">
                <function name="sll">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="sla">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="srl">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="sra">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>
            </est_index>

            <est_index name="latency">
              <parameters name="variable">
                <function name="sll">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="sla">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="srl">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="sra">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="1">
                <function name="sll">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="sla">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="srl">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="sra">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="2">
                <function name="sll">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="sla">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="srl">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="sra">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="4">
                <function name="sll">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="sla">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="srl">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="sra">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="8">
                <function name="sll">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="sla">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="srl">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="sra">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="16">
                <function name="sll">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="sla">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="srl">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="sra">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="32">
                <function name="sll">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="sla">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="srl">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="sra">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>
            </est_index>

            <est_index name="throughput">
              <parameters name="variable">
                <function name="sll">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="sla">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="srl">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="sra">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="1">
                <function name="sll">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="sla">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="srl">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="sra">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="2">
                <function name="sll">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="sla">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="srl">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="sra">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="4">
                <function name="sll">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="sla">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="srl">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="sra">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="8">
                <function name="sll">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="sla">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="srl">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="sra">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="16">
                <function name="sll">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="sla">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="srl">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="sra">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>

              <parameters name="32">
                <function name="sll">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="sla">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="srl">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
                <function name="sra">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>
            </est_index>
          </est_type>

          <est_type name="function_power">
            <!-- Dummy yet -->
          </est_type>
        </library>
      </estimation_data>

      <estimation_method>
         
        <est_type name="shape">

          <est_index name="area">

            <parameters name="variable">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for shifter(variable) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for shifter(1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for shifter(2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for shifter(4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for shifter(8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for shifter(16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for shifter(32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

          </est_index>

           <est_index name="aspect_ratio">

             <!-- Dummy yet -->

           </est_index>
		
           <est_index name="height">

             <!-- Dummy yet -->

           </est_index>
		
           <est_index name="width">

             <!-- Dummy yet -->

           </est_index>
		
        </est_type>

        <est_type name="timing">

          <est_index name="delay">

            <parameters name="variable">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for shifter(variable) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for shifter(1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for shifter(2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for shifter(4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for shifter(8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for shifter(16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for shifter(32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

          </est_index>

          <est_index name="delay_fullpath">

          </est_index>

        </est_type>

        <est_type name="power">

          <est_index name="static_power">

            <parameters name="variable">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for shifter(variable) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for shifter(1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for shifter(2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for shifter(4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for shifter(8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for shifter(16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

            <parameters name="32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for shifter(32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

          </est_index>

        </est_type>

        <est_type name="function_cycle">
          <est_index name="cycle">
            <parameters name="variable">
              <script>
                <![CDATA[
#!/usr/bin/perl
$bit_width = $ARGV[0];
$amount = $ARGV[1];

if ($bit_width <= $amount){
    print "bit_width must be more than amount.\n";
    exit (100); 
}
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="1">
              <script>
                <![CDATA[
#!/usr/bin/perl
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="2">
              <script>
                <![CDATA[
#!/usr/bin/perl
$bit_width = $ARGV[0];
$amount = $ARGV[1];

if ($bit_width <= $amount){
    print "bit_width must be more than amount.\n";
    exit (100); 
}
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="4">
              <script>
                <![CDATA[
#!/usr/bin/perl
$bit_width = $ARGV[0];
$amount = $ARGV[1];

if ($bit_width <= $amount){
    print "bit_width must be more than amount.\n";
    exit (100); 
}
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="8">
              <script>
                <![CDATA[
#!/usr/bin/perl
$bit_width = $ARGV[0];
$amount = $ARGV[1];

if ($bit_width <= $amount){
    print "bit_width must be more than amount.\n";
    exit (100); 
}
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="16">
              <script>
                <![CDATA[
#!/usr/bin/perl
$bit_width = $ARGV[0];
$amount = $ARGV[1];

if ($bit_width <= $amount){
    print "bit_width must be more than amount.\n";
    exit (100); 
}
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="32">
              <script>
                <![CDATA[
#!/usr/bin/perl
$bit_width = $ARGV[0];
$amount = $ARGV[1];

if ($bit_width <= $amount){
    print "bit_width must be more than amount.\n";
    exit (100); 
}
print "0";
                ]]>
              </script>
            </parameters>
          </est_index>

          <est_index name="latency">
            <parameters name="variable">
              <script>
                <![CDATA[
#!/usr/bin/perl
$bit_width = $ARGV[0];
$amount = $ARGV[1];

if ($bit_width <= $amount){
    print "bit_width must be more than amount.\n";
    exit (100); 
}
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="1">
              <script>
                <![CDATA[
#!/usr/bin/perl
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="2">
              <script>
                <![CDATA[
#!/usr/bin/perl
$bit_width = $ARGV[0];
$amount = $ARGV[1];

if ($bit_width <= $amount){
    print "bit_width must be more than amount.\n";
    exit (100); 
}
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="4">
              <script>
                <![CDATA[
#!/usr/bin/perl
$bit_width = $ARGV[0];
$amount = $ARGV[1];

if ($bit_width <= $amount){
    print "bit_width must be more than amount.\n";
    exit (100); 
}
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="8">
              <script>
                <![CDATA[
#!/usr/bin/perl
$bit_width = $ARGV[0];
$amount = $ARGV[1];

if ($bit_width <= $amount){
    print "bit_width must be more than amount.\n";
    exit (100); 
}
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="16">
              <script>
                <![CDATA[
#!/usr/bin/perl
$bit_width = $ARGV[0];
$amount = $ARGV[1];

if ($bit_width <= $amount){
    print "bit_width must be more than amount.\n";
    exit (100); 
}
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="32">
              <script>
                <![CDATA[
#!/usr/bin/perl
$bit_width = $ARGV[0];
$amount = $ARGV[1];

if ($bit_width <= $amount){
    print "bit_width must be more than amount.\n";
    exit (100); 
}
print "0";
                ]]>
              </script>
            </parameters>
          </est_index>

          <est_index name="throughput">
            <parameters name="variable">
              <script>
                <![CDATA[
#!/usr/bin/perl
$bit_width = $ARGV[0];
$amount = $ARGV[1];

if ($bit_width <= $amount){
    print "bit_width must be more than amount.\n";
    exit (100); 
}
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="1">
              <script>
                <![CDATA[
#!/usr/bin/perl
$bit_width = $ARGV[0];
$amount = $ARGV[1];

if ($bit_width <= $amount){
    print "bit_width must be more than amount.\n";
    exit (100); 
}
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="2">
              <script>
                <![CDATA[
#!/usr/bin/perl
$bit_width = $ARGV[0];
$amount = $ARGV[1];

if ($bit_width <= $amount){
    print "bit_width must be more than amount.\n";
    exit (100); 
}
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="4">
              <script>
                <![CDATA[
#!/usr/bin/perl
$bit_width = $ARGV[0];
$amount = $ARGV[1];

if ($bit_width <= $amount){
    print "bit_width must be more than amount.\n";
    exit (100); 
}
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="8">
              <script>
                <![CDATA[
#!/usr/bin/perl
$bit_width = $ARGV[0];
$amount = $ARGV[1];

if ($bit_width <= $amount){
    print "bit_width must be more than amount.\n";
    exit (100); 
}
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="16">
              <script>
                <![CDATA[
#!/usr/bin/perl
$bit_width = $ARGV[0];
$amount = $ARGV[1];

if ($bit_width <= $amount){
    print "bit_width must be more than amount.\n";
    exit (100); 
}
print "0";
                ]]>
              </script>
            </parameters>

            <parameters name="32">
              <script>
                <![CDATA[
#!/usr/bin/perl
$bit_width = $ARGV[0];
$amount = $ARGV[1];

if ($bit_width <= $amount){
    print "bit_width must be more than amount.\n";
    exit (100); 
}
print "0";
                ]]>
              </script>
            </parameters>
          </est_index>

        </est_type>

        <est_type name="function_power">

        </est_type>

    
      </estimation_method>

    </estimation>

  </model>
</FHM>
