<?xml version="1.0" encoding="UTF-8" ?>
<!-- Modified by T.Hamabe on 2006/12/05 -->
<!-- Modified by T.Hamabe on 2006/11/30 -->
<FHM>
  <model_name> adder </model_name>

  <model>
    <design_level> behavior </design_level>
    <version> 1.0 </version>
    <author> <![CDATA[ Kyoko UEDA ]]> </author>
    <affiliation> <![CDATA[ Osaka Univ. ]]> </affiliation>
    <model_info> <![CDATA[
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                %
%    Copyright 2008 ASIP Solutions, Inc. All rights reserved.    %
%              Copyright 2002-2005 PEAS Project                  %
%                                                                %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
]]> </model_info>

    <parameter>
      <parameter_value key="bit_width">
        <value> 1 </value>
        <value> 2 </value>
        <value> 3 </value>
        <value> 4 </value>
        <value> 5 </value>
        <value> 6 </value>
        <value> 7 </value>
        <value> 8 </value>
        <value> 9 </value>
        <value> 10 </value>
        <value> 11 </value>
        <value> 12 </value>
        <value> 13 </value>
        <value> 14 </value>
        <value> 15 </value>
        <value> 16 </value>
        <value> 17 </value>
        <value> 18 </value>
        <value> 19 </value>
        <value> 20 </value>
        <value> 21 </value>
        <value> 22 </value>
        <value> 23 </value>
        <value> 24 </value>
        <value> 25 </value>
        <value> 26 </value>
        <value> 27 </value>
        <value> 28 </value>
        <value> 29 </value>
        <value> 30 </value>
        <value> 31 </value>
        <value> 32 </value>
        <value> 33 </value>
        <value> 34 </value>
        <value> 35 </value>
        <value> 36 </value>
        <value> 37 </value>
        <value> 38 </value>
        <value> 39 </value>
        <value> 40 </value>
        <value> 41 </value>
        <value> 42 </value>
        <value> 43 </value>
        <value> 44 </value>
        <value> 45 </value>
        <value> 46 </value>
        <value> 47 </value>
        <value> 48 </value>
        <value> 49 </value>
        <value> 50 </value>
        <value> 51 </value>
        <value> 52 </value>
        <value> 53 </value>
        <value> 54 </value>
        <value> 55 </value>
        <value> 56 </value>
        <value> 57 </value>
        <value> 58 </value>
        <value> 59 </value>
        <value> 60 </value>
        <value> 61 </value>
        <value> 62 </value>
        <value> 63 </value>
        <value> 64 </value>
        <value> 65 </value>
        <value> 66 </value>
        <value> 67 </value>
        <value> 68 </value>
        <value> 69 </value>
        <value> 70 </value>
        <value> 71 </value>
        <value> 72 </value>
        <value> 128 </value>
        <value> 256 </value>
      </parameter_value>
    </parameter>

    <function_description>
      <script>
        <![CDATA[
#!/usr/bin/perl
# this script generates function definition for adder in behavior level
# parameter : bit_width

if ($#ARGV != 0){
    print "number of parameters is wrong.\n";
    print "usage : this_script bit_width\n";
    exit (100);
}

$bit_width = $ARGV[0];

if ($bit_width == 1){
    $data = "";
}
elsif (($bit_width >= 2 && $bit_width <= 72) || $bit_width == 128 || $bit_width == 256){
    $w = $bit_width - 1;
    $data = "[$w:0]";
}
else{
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

{
  print <<FHM_DL_FUNCTION
twoscomp addc(twoscomp a, twoscomp b, unsigned c);
twoscomp carry_out(twoscomp a, twoscomp b, unsigned c);

/** $bit_width-bit adder */
model adder${bit_width}{
  port{
    in  a$data, b$data, cin;
    out result$data, cout;
  }

  /** adc : signed add with carry */
  function adc{
    input{
      twoscomp a, b;
      twoscomp cin;
    }
    output{
      unsigned result = addc(a, b, cin);
      unsigned cout   = carry_out(a, b, cin);
    }
  }
}
FHM_DL_FUNCTION
}
exit (0);

        ]]>
      </script>
    </function_description>

    <function_conv>
      <script>
        <![CDATA[
#!/usr/bin/perl
# this script generates AUTOGEN description for adder in behavior level
# parameter : bit_width

if ($#ARGV != 0){
    print "number of parameters is wrong.\n";
    print "usage : this_script bit_width\n";
    exit (100);
}

$bit_width = $ARGV[0];

if ($bit_width == 1){
    $data = "";
}
elsif (($bit_width >= 2 && $bit_width <= 72) || $bit_width == 128 || $bit_width == 256){
    $w = $bit_width - 1;
    $data = "[$w:0]";
}
else{
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

{
print <<FHM_DL_FUNCTION
/** adc : signed add with carry */
function adc{
  input{
    bit $data a;
    bit $data b;
    bit cin;
  }

  output{
    bit $data result;
    bit cout;
  }

  control{
  }

  protocol{
  }
}
FHM_DL_FUNCTION
}
exit (0);
        ]]>
      </script>
    </function_conv>

    <function_port>
      <script>
        <![CDATA[
#!/usr/bin/perl
# this script generates port information for adder in behavior level
# parameter : bit_width

if ($#ARGV != 0){
    print "number of parameters is wrong.\n";
    print "usage : this_script bit_width\n";
    exit (100);
}

$bit_width     = $ARGV[0];

if ($bit_width == 1){
    $data = "bit	";
}
elsif (($bit_width >= 2 && $bit_width <= 72) || $bit_width == 128 || $bit_width == 256){
    $w = $bit_width - 1;
    $data = "bit_vector   $w   0";
}
else{
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

{
print <<FHM_DL_PORT
a	in	$data	data
b	in	$data	data
cin	in	bit		data
result	out	$data	data
cout	out	bit		data
FHM_DL_PORT
}
exit (0);

        ]]>
      </script>
    </function_port>

    <design>
      <design_lang> vhdl </design_lang>

      <instance>
        <script>
          <![CDATA[
#!/usr/bin/perl
# this script generates instance for adder in behavior level
# parameter : instance_name bit_width

if ($#ARGV != 1){
    print "number of parameters is wrong.\n";
    print "usage : this_script instance_name bit_width\n";
    exit (100);
}

$instance_name = $ARGV[0];
$bit_width     = $ARGV[1];

if ($bit_width == 1){
    $data1 = "";
    $data2 = "(0)";
}
elsif (($bit_width >= 2 && $bit_width <= 72) || $bit_width == 128 || $bit_width == 256){
    $w = $bit_width - 1;
    $data1 = "_vector($w downto 0)";
    $data2 = "($w downto 0)";
}
else{
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

{
print <<FHM_DL_INSTANCE
-- Module     : $bit_width-bit unsigned adder
-- References :
-- Author     : Designed by T.Morifuji (c)1996.
-- Version    : 1.0

-- Functionality : behavior level
--  port
--   a, b   : add datas
--   cin    : carry in
--   result : result of a + b + c
--   cout   : '1' when result > 2^$bit_width-1

library IEEE;
  use IEEE.std_logic_1164.all;
  use IEEE.std_logic_unsigned.all;

entity $instance_name is
  port (a, b   : in std_logic$data1;
        cin    : in std_logic;
        result : out std_logic$data1;
        cout   : out std_logic);
end $instance_name;

architecture behavior of $instance_name is

begin  -- behavior

  addition: process (a, b, cin)
    variable int_a, int_b : std_logic_vector($bit_width downto 0);
    variable int_result   : std_logic_vector($bit_width downto 0);
  begin
    int_a      := '0' & a;
    int_b      := '0' & b;

    int_result := int_a + int_b + cin;

    result     <= int_result$data2;
    cout       <= int_result($bit_width);

  end process addition;

end behavior;

FHM_DL_INSTANCE
}
exit (0);

          ]]>
        </script>
      </instance>

      <entity></entity>

      <testvector>
        <testvector_script>
          <![CDATA[ ]]>
        </testvector_script>
      </testvector>

      <synthesis></synthesis>
    </design>

    <design>
      <design_lang> Verilog </design_lang>
                                                                                
      <instance>
        <script>
          <![CDATA[
#!/usr/bin/perl
# this script generates instance for adder in behavior level
# parameter : instance_name bit_width

if ($#ARGV != 1){
    print "number of parameters is wrong.\n";
    print "usage : this_script instance_name bit_width\n";
    exit (100);
}

$instance_name = $ARGV[0];
$bit_width     = $ARGV[1];

if ($bit_width == 1){
    $data1 = "";
    $data2 = "[0]";
}
elsif (($bit_width >= 2 && $bit_width <= 72) || $bit_width == 128 || $bit_width == 256){
    $w = $bit_width - 1;
    $data1 = "[$w:0]";
    $data2 = "[$w:0]";
}
else{
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

{
print <<FHM_DL_INSTANCE
// Module     : $bit_width-bit unsigned adder
// References :
// Author     : Designed by T.Morifuji (c)1996.
// Version    : 1.0
\n
// Functionality : behavior level
//  port
//   a, b   : add datas
//   cin    : carry in
//   result : result of a + b + c
//   cout   : '1' when result > 2^$bit_width-1
\n
module $instance_name (
  a      ,
  b      ,
  cin    ,
  result ,
  cout   );
\n
input  $data1 a, b   ;
input         cin    ;
output $data1 result ;
output        cout   ;
\n
wire  $data1 a, b   ;
wire         cin    ;
wire  $data1 result ;
wire         cout   ;
\n
assign {cout, result} = a + b + cin;
\n
endmodule
FHM_DL_INSTANCE
}
exit (0);
          ]]>
        </script>
      </instance>
                                                                                
      <entity></entity>
                                                                                
      <testvector></testvector>
                                                                                
      <synthesis></synthesis>
    </design>

    <design>
      <design_lang> SystemC Header </design_lang>

      <instance>
        <script>
          <![CDATA[
#!/usr/bin/perl
# this script generates instance for adder in behavior level
# parameter : name_space instance_name bit_width

if ($#ARGV != 2){
    print "number of parameters is wrong.\n";
    print "usage : this_script name_space instance_name bit_width\n";
    exit (100);
}

$name_space    = $ARGV[0];
$instance_name = $ARGV[1];
$bit_width     = $ARGV[2];

if ($bit_width == 1){
    $data1 = "bool";
}
elsif ($bit_width >= 2 && $bit_width <= 64){
    $data1 = "sc_dt::sc_uint<$bit_width>";
}
elsif ((64 < $bit_width && $bit_width <= 72) || $bit_width == 128 || $bit_width == 256) {
    $data1 = "sc_dt::sc_biguint<$bit_width>";
}
else{
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

$macro = "__" . uc($name_space) . "_" . uc($instance_name) . "_H__";

{
print <<FHM_DL_INSTANCE
#ifndef $macro
#define $macro 1

// Module     : $bit_width-bit unsigned adder
// References :
// Author     : Designed by T.Morifuji (c)1996.
// Version    : 1.0

// Functionality : behavior level
//  port
//   a, b   : add datas
//   cin    : carry in
//   result : result of a + b + c
//   cout   : '1' when result > 2^$bit_width-1

#include <systemc>

namespace $name_space {
  SC_MODULE($instance_name) {
    sc_core::sc_in< $data1 > a, b;
    sc_core::sc_in< bool > cin;
    sc_core::sc_out< $data1 > result;
    sc_core::sc_out< bool > cout;

    SC_CTOR($instance_name) :
      a("a"), b("b"), cin("cin"), result("result"), cout("cout")
    {
      SC_METHOD(process);
      sensitive << a << b << cin;
    }

    void process();
  };
};

#endif // $macro
FHM_DL_INSTANCE
}

exit (0);

          ]]>
        </script>
      </instance>

      <entity>
        <script>
          <![CDATA[
          ]]>
        </script>
      </entity>

      <testvector>
        <testvector_script>
          <![CDATA[ ]]>
        </testvector_script>
      </testvector>
    </design>

    <design>
      <design_lang> SystemC Program </design_lang>

      <instance>
        <script>
          <![CDATA[
#!/usr/bin/perl
# this script generates instance for adder in behavior level
# parameter : name_space instance_name bit_width

if ($#ARGV != 2){
    print "number of parameters is wrong.\n";
    print "usage : this_script name_space instance_name bit_width\n";
    exit (100);
}

$name_space    = $ARGV[0];
$instance_name = $ARGV[1];
$bit_width     = $ARGV[2];

if ($bit_width == 1){
    $data1 = "bool";
}
elsif ($bit_width >= 2 && $bit_width <= 64) {
    $w = $bit_width - 1;
    $data1 = "sc_dt::sc_uint<$bit_width>";
}
elsif ((64 < $bit_width && $bit_width <= 72) || $bit_width == 128 || $bit_width == 256){
    $w = $bit_width - 1;
    $data1 = "sc_dt::sc_biguint<$bit_width>";
}
else{
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

if ($bit_width + 1 > 64) {
    $tmp_type = "sc_dt::sc_biguint<" . ($bit_width + 1) . ">";
} else {
    $tmp_type = "sc_dt::sc_uint<" . ($bit_width + 1) . ">";
}

{
print <<FHM_DL_INSTANCE
#include "$instance_name.h"

// Module     : $bit_width-bit unsigned adder
// References :
// Author     : Designed by T.Morifuji (c)1996.
// Version    : 1.0

// Functionality : behavior level
//  port
//   a, b   : add datas
//   cin    : carry in
//   result : result of a + b + c
//   cout   : '1' when result > 2^$bit_width-1

void ${name_space}::${instance_name}::process()
{
  $tmp_type tmp_a(a.read());
  tmp_a += b.read();
  tmp_a += cin.read();
  result.write( tmp_a($bit_width - 1, 0) );
  cout.write( tmp_a[$bit_width] );
}
FHM_DL_INSTANCE
}
exit (0);

          ]]>
        </script>
      </instance>

      <entity>
        <script>
          <![CDATA[
          ]]>
        </script>
      </entity>

      <testvector>
        <testvector_script>
          <![CDATA[ ]]>
        </testvector_script>
      </testvector>
    </design>

    <estimation>
      <estimation_data>
        <library name="OSAKA">

          <est_type name="shape">
            <est_index name="area">
              <unit> mm2 </unit>
              <translate>
                <translate_value key="gate"> 4201.68 </translate_value>
                <translate_value key="mm2">  1 </translate_value>
              </translate>

              <parameters name="">
                <max>
                  <data bit_width="1"> 0.0118005081300813 </data>
                  <data bit_width="4"> 0.0613658055825289 </data>
                  <data bit_width="8"> 0.0827392954722873 </data>
                  <data bit_width="16"> 0.178035853039736 </data>
                  <data bit_width="32"> 0.362860924201748 </data>
                  <data bit_width="256"> 2.893131252023 </data>
                </max>
                <min>
                  <data bit_width="1"> 0.00316279202604672 </data>
                  <data bit_width="4"> 0.0123959701833552 </data>
                  <data bit_width="8"> 0.0267033855505417 </data>
                  <data bit_width="16"> 0.0533217048894728 </data>
                  <data bit_width="32"> 0.106711741731879 </data>
                  <data bit_width="256"> 0.955079335884694 </data>
                </min>
                <typ>
                </typ>
              </parameters>
            </est_index>

            <est_index name="aspect_ratio">
              <!-- Dummy yet -->
            </est_index>

            <est_index name="height">
              <!-- Dummy yet -->
            </est_index>

            <est_index name="width">
              <!-- Dummy yet -->
            </est_index>
          </est_type>

          <est_type name="timing">
            <est_index name="delay">
              <unit> ns </unit>

              <parameters name="">
                <max>
                  <data bit_width="1"> 1.08 </data>
                  <data bit_width="4"> 3.71 </data>
                  <data bit_width="8"> 6.12 </data>
                  <data bit_width="16"> 11.35 </data>
                  <data bit_width="32"> 22.63 </data>
                  <data bit_width="256"> 184.99 </data>
                </max>
                <min>
                  <data bit_width="1"> 0.68 </data>
                  <data bit_width="4"> 1.47 </data>
                  <data bit_width="8"> 1.81 </data>
                  <data bit_width="16"> 2.56 </data>
                  <data bit_width="32"> 3.22 </data>
                  <data bit_width="256"> 5.32 </data>
                </min>
                <typ>
                </typ>
              </parameters>
            </est_index>

            <est_index name="delay_fullpath">
            <!-- Dummy yet -->
            </est_index>
          </est_type>

          <est_type name="power">
            <est_index name="static_power">
              <unit> mW </unit>
              <parameters name="">
                <max>
                  <data bit_width="1"> 0.6849234 </data>
                  <data bit_width="4"> 12.7411 </data>
                  <data bit_width="8"> 21.5630 </data>
                  <data bit_width="16"> 79.7408 </data>
                  <data bit_width="32"> 165.9719 </data>
                  <data bit_width="256"> 1257.4 </data>
                </max>
                <min>
                  <data bit_width="1"> 0.5165148 </data>
                  <data bit_width="4"> 5.6595 </data>
                  <data bit_width="8"> 11.7048 </data>
                  <data bit_width="16"> 17.0774 </data>
                  <data bit_width="32"> 34.3149 </data>
                  <data bit_width="256"> 299.6914 </data>
                </min>
                <typ>
                </typ>
              </parameters>
            </est_index>
          </est_type>

          <est_type name="function_cycle">
            <!-- Dummy yet -->
          </est_type>

          <est_type name="function_power">
            <!-- Dummy yet -->
          </est_type>
        </library>
      </estimation_data>

      <estimation_method>
         
        <est_type name="shape">

          <est_index name="area">

            <parameters name="">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for adder.
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Regression Methods by linear expression
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$n = $i;

# numerator 1
$nume_1 = 0.00;
for ($i = 0; $i < $n; $i++) {
    $nume_1 += $bit[$i] * $data[$i];
}
$nume_1 *= $n;

# numerator 2
$nume_2 = &sum(@bit) * &sum(@data);
    
# denominator 1
$deno_1 = 0.00;
for ($i = 0; $i < $n; $i++) {
    $deno_1 += $bit[$i] * $bit[$i];
}
$deno_1 *= $n;

# denominator 2
$deno_2 = &sum(@bit) * &sum(@bit);
	

# divide by zero
if ($deno_1 == $deno_2) {
    exit(100);
}
if ($n == 0) {
    exit(100);
}


$a = ($nume_1 - $nume_2) / ($deno_1 - $deno_2);
$b = (&sum(@data) - $a * &sum(@bit)) / $n;

$ret_data = $a * $ARGV[1] + $b;


sub sum
{
    my ( @data ) = @_;
    my ( $i );
    my ( $ret_data );

    $ret_data = 0.00;
    for ($i = 0; $i < @data; $i++) {
	$ret_data += $data[$i];
    }

    return($ret_data);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

          </est_index>

           <est_index name="aspect_ratio">

             <!-- Dummy yet -->

           </est_index>
		
           <est_index name="height">

             <!-- Dummy yet -->

           </est_index>
		
           <est_index name="width">

             <!-- Dummy yet -->

           </est_index>
		
        </est_type>

        <est_type name="timing">

          <est_index name="delay">

            <parameters name="">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for adder .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Regression Methods by linear expression
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$n = $i;

# numerator 1
$nume_1 = 0.00;
for ($i = 0; $i < $n; $i++) {
    $nume_1 += $bit[$i] * $data[$i];
}
$nume_1 *= $n;

# numerator 2
$nume_2 = &sum(@bit) * &sum(@data);
    
# denominator 1
$deno_1 = 0.00;
for ($i = 0; $i < $n; $i++) {
    $deno_1 += $bit[$i] * $bit[$i];
}
$deno_1 *= $n;

# denominator 2
$deno_2 = &sum(@bit) * &sum(@bit);
	

# divide by zero
if ($deno_1 == $deno_2) {
    exit(100);
}
if ($n == 0) {
    exit(100);
}


$a = ($nume_1 - $nume_2) / ($deno_1 - $deno_2);
$b = (&sum(@data) - $a * &sum(@bit)) / $n;

$ret_data = $a * $ARGV[1] + $b;


sub sum
{
    my ( @data ) = @_;
    my ( $i );
    my ( $ret_data );

    $ret_data = 0.00;
    for ($i = 0; $i < @data; $i++) {
	$ret_data += $data[$i];
    }

    return($ret_data);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

          </est_index>

          <est_index name="delay_fullpath">

            <parameters name="">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for adder.
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

$Round = 1;

#--------------------------------------------------------------------------#
# Type: Regression Methods by linear expression for delay_fullpath
#--------------------------------------------------------------------------#
$n = 0;

while (<TMP>) {

    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {

	$bit_width = $1;
	$bit[$n] = $bit_width;
	$n++;
	$_ = <TMP>;
	
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {

	    # path 
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }

	    # inport
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # outport
	     if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # internal
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }

	    $_ = <TMP>;
	}
    }
}
close(TMP);

$line_num = $i;



for ($j = 0; $j < $line_num; $j++) {

    # numerator 1
    $nume_1 = 0.00;
    foreach $bit_width (@bit) {
	$nume_1 += $bit_width * $delay{$bit_width}[$j];
    }
    $nume_1 *= $n;

    # numerator 2
    $nume_2 = &sum(@bit);

    $tmp = 0.00;
    foreach $bit_width (@bit) {
	$tmp += $delay{$bit_width}[$j];
    }
    $nume_2 *= $tmp;
    
    # denominator 1
    $deno_1 = 0.00;
    for ($i = 0; $i < $n; $i++) {
	$deno_1 += $bit[$i] * $bit[$i];
    }
    $deno_1 *= $n;

    # denominator 2
    $deno_2 = &sum(@bit) * &sum(@bit);
    

    # divide by zero
    if ($deno_1 == $deno_2) {
	exit(100);
    }
    if ($n == 0) {
	exit(100);
    }


    # a
    $a = ($nume_1 - $nume_2) / ($deno_1 - $deno_2);

    # b
    $tmp = 0.00;
    foreach $bit_width (@bit) {
	$tmp += $delay{$bit_width}[$j];
    }
    $b = ($tmp - $a * &sum(@bit)) / $n;
    
    $ret_data = $a * $ARGV[1] + $b;
    $ret_data = &data_round($ret_data, $Round);
    
    print "$line{$bit[0]}[$j] $ret_data\n";
}

exit(0);


sub sum
{
    my ( @data ) = @_;
    my ( $i );
    my ( $return_data );

    $return_data = 0.00;
    for ($i = 0; $i < @data; $i++) {
	$return_data += $data[$i];
    }

    return($return_data);
}


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>
          </est_index>

        </est_type>

        <est_type name="power">

          <est_index name="static_power">

            <parameters name="">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for adder.
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

          </est_index>

        </est_type>

        <est_type name="function_cycle">

        </est_type>

        <est_type name="function_power">

        </est_type>

    
      </estimation_method>

    </estimation>


  </model>

  <model>
    <design_level> synthesis </design_level>
    <version> 1.0 </version>
    <author> <![CDATA[ Kyoko UEDA ]]> </author>
    <affiliation> <![CDATA[ Osaka Univ. ]]> </affiliation>
    <model_info> <![CDATA[
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                %
%    Copyright 2008 ASIP Solutions, Inc. All rights reserved.    %
%              Copyright 2002-2005 PEAS Project                  %
%                                                                %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
]]> </model_info>

    <parameter>
      <parameter_value key="bit_width">
        <value> 1 </value>
        <value> 2 </value>
        <value> 3 </value>
        <value> 4 </value>
        <value> 5 </value>
        <value> 6 </value>
        <value> 7 </value>
        <value> 8 </value>
        <value> 9 </value>
        <value> 10 </value>
        <value> 11 </value>
        <value> 12 </value>
        <value> 13 </value>
        <value> 14 </value>
        <value> 15 </value>
        <value> 16 </value>
        <value> 17 </value>
        <value> 18 </value>
        <value> 19 </value>
        <value> 20 </value>
        <value> 21 </value>
        <value> 22 </value>
        <value> 23 </value>
        <value> 24 </value>
        <value> 25 </value>
        <value> 26 </value>
        <value> 27 </value>
        <value> 28 </value>
        <value> 29 </value>
        <value> 30 </value>
        <value> 31 </value>
        <value> 32 </value>
        <value> 33 </value>
        <value> 34 </value>
        <value> 35 </value>
        <value> 36 </value>
        <value> 37 </value>
        <value> 38 </value>
        <value> 39 </value>
        <value> 40 </value>
        <value> 41 </value>
        <value> 42 </value>
        <value> 43 </value>
        <value> 44 </value>
        <value> 45 </value>
        <value> 46 </value>
        <value> 47 </value>
        <value> 48 </value>
        <value> 49 </value>
        <value> 50 </value>
        <value> 51 </value>
        <value> 52 </value>
        <value> 53 </value>
        <value> 54 </value>
        <value> 55 </value>
        <value> 56 </value>
        <value> 57 </value>
        <value> 58 </value>
        <value> 59 </value>
        <value> 60 </value>
        <value> 61 </value>
        <value> 62 </value>
        <value> 63 </value>
        <value> 64 </value>
        <value> 65 </value>
        <value> 66 </value>
        <value> 67 </value>
        <value> 68 </value>
        <value> 69 </value>
        <value> 70 </value>
        <value> 71 </value>
        <value> 72 </value>
        <value> 128 </value>
        <value> 256 </value>
      </parameter_value>
      <parameter_value key="algorithm">
        <value> default </value>
      </parameter_value>
    </parameter>

    <function_description>
      <script>
        <![CDATA[
#!/usr/bin/perl
# this script generates AUTOGEN discription for adder in synthesis level
# parameter : bit_width algorithm

if ($#ARGV != 1){
    print "number of parameters is wrong.\n";
    print "usage : this_script bit_width algorithm\n";
    exit (100);
}

$bit_width = $ARGV[0];
$algorithm = $ARGV[1];

if ($bit_width == 1){
    $data = "";
}
elsif (($bit_width >= 2 && $bit_width <= 72) || $bit_width == 128 || $bit_width == 256){
    $w = $bit_width - 1;
    $data = "[$w:0]";
}
else{
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

if ("$algorithm" ne "default"){
    print "algorithm $algorithm is not supported.\n";
    exit (100);
}

{
print <<FHM_DL_FUNCTION
twoscomp addc(twoscomp a, twoscomp b, unsigned c);
twoscomp carry_out(twoscomp a, twoscomp b, unsigned c);

/** $bit_width-bit adder */
model adder${bit_width}{
  port{
    in  a$data, b$data, cin;
    out result$data, cout;
  }

  /** adc : signed add with carry */
  function adc{
    input{
      twoscomp a, b;
      twoscomp cin;
    }
    output{
      unsigned result = addc(a, b, cin);
      unsigned cout   = carry_out(a, b, cin);
    }
  }
}
FHM_DL_FUNCTION
}
exit (0);
        ]]>
      </script>
    </function_description>

    <function_conv>
      <script>
        <![CDATA[
#!/usr/bin/perl
# this script generates AUTOGEN discription for adder in synthesis level
# parameter : bit_width algorithm

if ($#ARGV != 1){
    print "number of parameters is wrong.\n";
    print "usage : this_script bit_width algorithm\n";
    exit (100);
}

$bit_width = $ARGV[0];
$algorithm = $ARGV[1];

if ($bit_width == 1){
    $data = "";
}
elsif (($bit_width >= 2 && $bit_width <= 72) || $bit_width == 128 || $bit_width == 256){
    $w = $bit_width - 1;
    $data = "[$w:0]";
}
else{
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

if ("$algorithm" ne "default"){
    print "algorithm $algorithm is not supported.\n";
    exit (100);
}

{
print <<FHM_DL_FUNCTION
/** adc : signed add with carry */
function adc{
  input{
    bit $data a;
    bit $data b;
    bit cin;
  }

  output{
    bit $data result;
    bit cout;
  }

  control{
  }

  protocol{
  }
}
FHM_DL_FUNCTION
}
exit (0);
        ]]>
      </script>
    </function_conv>

    <function_port>
      <script>
        <![CDATA[
#!/usr/bin/perl
# this script generates port information for adder in synthesis level
# parameter : bit_width algorithm

if ($#ARGV != 1){
    print "number of parameters is wrong.\n";
    print "usage : this_script bit_width algorithm\n";
    exit (100);
}

$bit_width     = $ARGV[0];
$algorithm     = $ARGV[1];

if ($bit_width == 1){
    $data = "bit	";
}
elsif (($bit_width >= 2 && $bit_width <= 72) || $bit_width == 128 || $bit_width == 256){
    $w = $bit_width - 1;
    $data = "bit_vector   $w   0";
}
else{
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

if ("$algorithm" ne "default"){
    print "algorithm $algorithm is not supported.\n";
    exit (100);
}

{
print <<FHM_DL_PORT
a	in	$data	data
b	in	$data	data
cin	in	bit		data
result	out	$data	data
cout	out	bit		data
FHM_DL_PORT
}
exit(0);
        ]]>
      </script>
    </function_port>

    <design>
      <design_lang> vhdl </design_lang>

      <instance>
        <script>
          <![CDATA[
#!/usr/bin/perl
# this script generates instance for adder in synthesis level
# parameter : instance_name bit_width algorithm

if ($#ARGV != 2){
    print "number of parameters is wrong.\n";
    print "usage : this_script instance_name bit_width algorithm\n";
    exit (100);
}

$instance_name = $ARGV[0];
$bit_width     = $ARGV[1];
$algorithm     = $ARGV[2];
if ("$algorithm" eq "default"){

if ($bit_width == 1){
    $data1 = "";
    $data2 = "(0)";
}
elsif (($bit_width >= 2 && $bit_width <= 72) || $bit_width == 128 || $bit_width == 256){
    $w = $bit_width - 1;
    $data1 = "_vector($w downto 0)";
    $data2 = "($w downto 0)";
}
else{
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

{
print <<FHM_DL_INSTANCE
-- Module     : $bit_width-bit unsigned adder
-- References :
-- Author     : Designed by T.Morifuji (c)1996.
-- Version    : 1.0

-- Functionality : synthesis level
--  port
--   a, b   : add datas
--   cin    : carry in
--   result : result of a + b + c
--   cout   : '1' when result > 2^$bit_width-1

library IEEE;
  use IEEE.std_logic_1164.all;
  use IEEE.std_logic_unsigned.all;

entity $instance_name is
  port (a, b   : in std_logic$data1;
        cin    : in std_logic;
        result : out std_logic$data1;
        cout   : out std_logic);
end $instance_name;

architecture synthesis of $instance_name is

begin  -- synthesis

  addition: process (a, b, cin)
    variable int_a, int_b : std_logic_vector($bit_width downto 0);
    variable int_result   : std_logic_vector($bit_width downto 0);
  begin
    int_a      := '0' & a;
    int_b      := '0' & b;

    int_result := int_a + int_b + cin;

    result     <= int_result$data2;
    cout       <= int_result($bit_width);

  end process addition;

end synthesis;

FHM_DL_INSTANCE
}
exit (0);
}
else{
    print "algorithm $algorithm is not supported.\n";
exit (100);
}

          ]]>
        </script>
      </instance>

      <entity></entity>

      <testvector>
        <testvector_script>
          <![CDATA[ ]]>
        </testvector_script>
      </testvector>

      <synthesis>
        <parameter></parameter>
        <synthesis_script>
          <script>
            <![CDATA[
#!/usr/bin/perl
# this script generates synthesis script for adder in synthesis level
# parameter : instance_name priority bit_width algorithm

if ($#ARGV != 3){
    print "number of parameters is wrong.\n";
    print "usage : this_script instance_name priority bit_width algorithm\n";
    exit (100);
}

$instance_name = $ARGV[0];
$priority      = $ARGV[1];
$bit_width     = $ARGV[2];
$algorithm     = $ARGV[3];

if ($priority eq "area"){
    $priority_const = "set_max_area 0";
}
elsif ($priority eq "performance"){
    $priority_const = "set_max_delay -from all_inputs() -to all_outputs() 0";
}
elsif ($priority eq "power"){
    $priority_const = "";
}
elsif ($priority eq "none"){
    $priority_const = "";
}
else{
    print "priority $priority is not supported.\n";
    exit (100);
}

# 1-72, 128, 256
if ($bit_width < 1 ||
    ($bit_width > 72 && $bit_width != 128 && $bit_width != 256)){
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

if ("$algorithm" ne "default"){
    print "algorithm $algorithm is not supported.\n";
    exit (100);
}

{
print <<FHM_DL_SCRIPT
hdlin_auto_save_templates = TRUE

analyze -f vhdl $instance_name.vhd

elaborate $instance_name
uniquify

$priority_const

compile 

write -hierarchy -output $instance_name.db

report_area
report_timing

quit
FHM_DL_SCRIPT
}
exit (0);
            ]]>
          </script>
        </synthesis_script>
      </synthesis>
    </design>

    <design>
      <design_lang> Verilog </design_lang>
                                                                                
      <instance>
        <script>
          <![CDATA[
#!/usr/bin/perl
# this script generates instance for adder in synthesis level
# parameter : instance_name bit_width algorithm

if ($#ARGV != 2){
    print "number of parameters is wrong.\n";
    print "usage : this_script instance_name bit_width algorithm\n";
    exit (100);
}

$instance_name = $ARGV[0];
$bit_width     = $ARGV[1];
$algorithm     = $ARGV[2];
if ("$algorithm" eq "default"){

if ($bit_width == 1){
    $port_type = " ";
}
elsif (($bit_width >= 2 && $bit_width <= 72) || $bit_width == 128 || $bit_width == 256){
    $w_1 = $bit_width - 1;
    $port_type = "[${w_1}:0]";
}
else{
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

{
print <<FHM_DL_INSTANCE
// Module     : $bit_width-bit unsigned adder
// References :
// Author     : Designed by T.Morifuji (c)1996.
// Version    : 1.0
\n
// Functionality : synthesis level
//  port
//   a, b   : add datas
//   cin    : carry in
//   result : result of a + b + c
//   cout   : '1' when result > 2^$bit_width-1
\n
module $instance_name (
  a      ,
  b      ,
  cin    ,
  result ,
  cout   ) ; 
\n
input  $port_type a      ;
input  $port_type b      ;
input         cin    ;
output $port_type result ;
output        cout   ;
\n
wire  $port_type a      ;
wire  $port_type b      ;
wire         cin    ;
wire  $port_type result ;
wire         cout   ;
\n
assign {cout, result} = a + b + cin;
\n
endmodule
FHM_DL_INSTANCE
}
exit (0);
}
else{
    print "algorithm $algorithm is not supported.\n";
exit (100);
}
          ]]>
        </script>
      </instance>
                                                                                
      <entity></entity>
                                                                                
      <testvector></testvector>
                                                                                
      <synthesis></synthesis>
    </design>

    <design>
      <design_lang> SystemC Header </design_lang>

      <instance>
        <script>
          <![CDATA[
#!/usr/bin/perl
# this script generates instance for adder in synthesis level
# parameter : name_space instance_name bit_width algorithm

if ($#ARGV != 3){
    print "number of parameters is wrong.\n";
    print "usage : this_script name_space instance_name bit_width algorithm\n";
    exit (100);
}

$name_space    = $ARGV[0];
$instance_name = $ARGV[1];
$bit_width     = $ARGV[2];
$algorithm     = $ARGV[3];
if ("$algorithm" eq "default"){

if ($bit_width == 1){
    $port_type = "bool";
}
elsif ($bit_width >= 2 && $bit_width <= 64){
    $port_type = "sc_dt::sc_uint<$bit_width>";
}
elsif ((64 < $bit_width && $bit_width <= 72) || $bit_width == 128 || $bit_width == 256) {
    $port_type = "sc_dt::sc_biguint<$bit_width>";
}
else{
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

$macro = "__" . uc($name_space) . "_" . uc($instance_name) . "_H__";

{
print <<FHM_DL_INSTANCE
#ifndef $macro
#define $macro 1

// Module     : $bit_width-bit unsigned adder
// References :
// Author     : Designed by T.Morifuji (c)1996.
// Version    : 1.0

// Functionality : synthesis level
//  port
//   a, b   : add datas
//   cin    : carry in
//   result : result of a + b + c
//   cout   : '1' when result > 2^$bit_width-1

#include <systemc>

namespace $name_space {
  SC_MODULE($instance_name) {
    sc_core::sc_in< $port_type > a, b;
    sc_core::sc_in< bool > cin;
    sc_core::sc_out< $port_type > result;
    sc_core::sc_out< bool > cout;

    SC_CTOR($instance_name) :
      a("a"), b("b"), cin("cin"),
      result("result"), cout("cout")
    {
      SC_METHOD(process);
      sensitive << a << b << cin;
    }

    void process();
  };
};

#endif // $macro
FHM_DL_INSTANCE
}
exit (0);
}
else{
    print "algorithm $algorithm is not supported.\n";
exit (100);
}
          ]]>
        </script>
      </instance>

      <entity>
        <script>
          <![CDATA[
          ]]>
        </script>
      </entity>

      <testvector>
        <testvector_script>
          <![CDATA[ ]]>
        </testvector_script>
      </testvector>
    </design>

    <design>
      <design_lang> SystemC Program </design_lang>

      <instance>
        <script>
          <![CDATA[
#!/usr/bin/perl
# this script generates instance for adder in synthesis level
# parameter : name_space instance_name bit_width algorithm

if ($#ARGV != 3){
    print "number of parameters is wrong.\n";
    print "usage : this_script name_space instance_name bit_width algorithm\n";
    exit (100);
}

$name_space    = $ARGV[0];
$instance_name = $ARGV[1];
$bit_width     = $ARGV[2];
$algorithm     = $ARGV[3];
if ("$algorithm" eq "default"){

if ($bit_width == 1){
    $port_type = "bool";
}
elsif ($bit_width >= 2 && $bit_width <= 64){
    $port_type = "sc_dt::sc_uint<$bit_width>";
}
elsif ((64 < $bit_width && $bit_width <= 72) || $bit_width == 128 || $bit_width == 256){
    $port_type = "sc_dt::sc_biguint<$bit_width>";
}
else{
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

if ($bit_width + 1 > 64) {
    $tmp_type = "sc_dt::sc_biguint<" . ($bit_width + 1) . ">";
} else {
    $tmp_type = "sc_dt::sc_uint<" . ($bit_width + 1) . ">";
}

{
print <<FHM_DL_INSTANCE
#include "$instance_name.h"

// Module     : $bit_width-bit unsigned adder
// References :
// Author     : Designed by T.Morifuji (c)1996.
// Version    : 1.0

// Functionality : synthesis level
//  port
//   a, b   : add datas
//   cin    : carry in
//   result : result of a + b + c
//   cout   : '1' when result > 2^$bit_width-1

void ${name_space}::${instance_name}::process()
{
  $tmp_type tmp_a(a.read());
  tmp_a += b.read();
  tmp_a += cin.read();
  result.write( tmp_a($bit_width - 1, 0) );
  cout.write( tmp_a[$bit_width] );
}
FHM_DL_INSTANCE
}
exit (0);
}
else{
    print "algorithm $algorithm is not supported.\n";
exit (100);
}

          ]]>
        </script>
      </instance>

      <entity>
        <script>
          <![CDATA[
          ]]>
        </script>
      </entity>

      <testvector>
        <testvector_script>
          <![CDATA[ ]]>
        </testvector_script>
      </testvector>
    </design>

    <estimation>
      <estimation_data>
        <library name="OSAKA">

          <est_type name="shape">
            <est_index name="area">
              <unit> mm2 </unit>
              <translate>
                <translate_value key="gate"> 4201.68 </translate_value>
                <translate_value key="mm2">  1 </translate_value>
              </translate>

              <parameters name="default">
                <max>
                  <data bit_width="1"> 0.0118005081300813 </data>
                  <data bit_width="4"> 0.0613658055825289 </data>
                  <data bit_width="8"> 0.0827392954722873 </data>
                  <data bit_width="16"> 0.167136224081796 </data>
                  <data bit_width="32"> 0.362860924201748 </data>
                  <data bit_width="256"> 2.893131252023 </data>
                </max>
                <min>
                  <data bit_width="1"> 0.00316279202604672 </data>
                  <data bit_width="4"> 0.0133558764589402 </data>
                  <data bit_width="8"> 0.0267033855505417 </data>
                  <data bit_width="16"> 0.0533217048894728 </data>
                  <data bit_width="32"> 0.106711741731879 </data>
                  <data bit_width="256"> 0.955079335884694 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 0.00316279202604672 </data>
                    <data bit_width="4"> 0.0133558764589402 </data>
                    <data bit_width="8"> 0.0267033855505417 </data>
                    <data bit_width="16"> 0.0533217048894728 </data>
                    <data bit_width="32"> 0.106711741731879 </data>
                    <data bit_width="256"> 0.955079335884694 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 0.0118005081300813 </data>
                    <data bit_width="4"> 0.0613658055825289 </data>
                    <data bit_width="8"> 0.0827392954722873 </data>
                    <data bit_width="16"> 0.167136224081796 </data>
                    <data bit_width="32"> 0.362860924201748 </data>
                    <data bit_width="256"> 2.893131252023 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 0.00373222615715619 </data>
                    <data bit_width="4"> 0.0150139706022353 </data>
                    <data bit_width="8"> 0.029534743959559 </data>
                    <data bit_width="16"> 0.0585762885322062 </data>
                    <data bit_width="32"> 0.117008010843282 </data>
                    <data bit_width="256"> 1.00103710848994 </data>
                  </priority>
                </typ>
              </parameters>
            </est_index>

            <est_index name="aspect_ratio">
              <!-- Dummy yet -->
            </est_index>

            <est_index name="height">
              <!-- Dummy yet -->
            </est_index>

            <est_index name="width">
              <!-- Dummy yet -->
            </est_index>
          </est_type>

          <est_type name="timing">
            <est_index name="delay">
              <unit> ns </unit>

              <parameters name="default">
                <max>
                  <data bit_width="1"> 1.08 </data>
                  <data bit_width="4"> 3.71 </data>
                  <data bit_width="8"> 6.12 </data>
                  <data bit_width="16"> 11.35 </data>
                  <data bit_width="32"> 22.63 </data>
                  <data bit_width="256"> 184.99 </data>
                </max>
                <min>
                  <data bit_width="1"> 0.68 </data>
                  <data bit_width="4"> 1.48 </data>
                  <data bit_width="8"> 1.81 </data>
                  <data bit_width="16"> 2.88 </data>
                  <data bit_width="32"> 4.25 </data>
                  <data bit_width="256"> 18.18 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 0.95 </data>
                    <data bit_width="4"> 2.76 </data>
                    <data bit_width="8"> 5.64 </data>
                    <data bit_width="16"> 11.35 </data>
                    <data bit_width="32"> 22.63 </data>
                    <data bit_width="256"> 184.99 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 0.68 </data>
                    <data bit_width="4"> 1.48 </data>
                    <data bit_width="8"> 1.81 </data>
                    <data bit_width="16"> 2.88 </data>
                    <data bit_width="32"> 4.25 </data>
                    <data bit_width="256"> 18.18 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 1.08 </data>
                    <data bit_width="4"> 3.71 </data>
                    <data bit_width="8"> 6.12 </data>
                    <data bit_width="16"> 11.20 </data>
                    <data bit_width="32"> 22.45 </data>
                    <data bit_width="256"> 165.98 </data>
                  </priority>
                </typ>
              </parameters>
            </est_index>

            <est_index name="delay_fullpath">
              <unit> ns </unit>

              <parameters name="default">
                <max>
                  <data bit_width="2">
                    path	 a	 result	 0.84
                    path	 b	 result	 0.83
                  </data>
                  <data bit_width="4">
                    path	 a	 result	 0.98
                    path	 b	 result	 1.00
                  </data>
                  <data bit_width="8">
                    path	 a	 result	 1.96
                    path	 b	 result	 1.97
                  </data>
                  <data bit_width="16">
                    path	 a	 result	 3.91
                    path	 b	 result	 3.92
                  </data>
                  <data bit_width="32">
                    path	 a	 result	 7.80
                    path	 b	 result	 7.82
                  </data>
                </max>
                <min>
                  <data bit_width="2">
                    path	 a	 result	 0.53
                    path	 b	 result	 0.51
                  </data>
                  <data bit_width="4">
                    path	 a	 result	 0.98
                    path	 b	 result	 1.00
                  </data>
                  <data bit_width="8">
                    path	 a	 result	 1.96
                    path	 b	 result	 1.97
                  </data>
                  <data bit_width="16">
                    path	 a	 result	 3.91
                    path	 b	 result	 3.92
                  </data>
                  <data bit_width="32">
                    path	 a	 result	 7.80
                    path	 b	 result	 7.82
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="2">
                      path	 a	 result	 0.84
                      path	 b	 result	 0.83
                    </data>
                    <data bit_width="4">
                      path	 a	 result	 1.53
                      path	 b	 result	 1.45
                    </data>
                    <data bit_width="8">
                      path	 a	 result	 3.45
                      path	 b	 result	 3.37
                    </data>
                    <data bit_width="16">
                      path	 a	 result	 7.31
                      path	 b	 result	 7.22
                    </data>
                    <data bit_width="32">
                      path	 a	 result	 15.75
                      path	 b	 result	 15.67
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="2">
                      path	 a	 result	 0.53
                      path	 b	 result	 0.51
                    </data>
                    <data bit_width="4">
                      path	 a	 result	 0.70
                      path	 b	 result	 0.70
                    </data>
                    <data bit_width="8">
                      path	 a	 result	 0.96
                      path	 b	 result	 0.95
                    </data>
                    <data bit_width="16">
                      path	 a	 result	 1.71
                      path	 b	 result	 1.72
                    </data>
                    <data bit_width="32">
                      path	 a	 result	 2.24
                      path	 b	 result	 2.25
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="2">
                      path	 a	 result	 0.83
                      path	 b	 result	 0.81
                    </data>
                    <data bit_width="4">
                      path	 a	 result	 0.98
                      path	 b	 result	 1.00
                    </data>
                    <data bit_width="8">
                      path	 a	 result	 1.96
                      path	 b	 result	 1.97
                    </data>
                    <data bit_width="16">
                      path	 a	 result	 3.91
                      path	 b	 result	 3.92
                    </data>
                    <data bit_width="32">
                      path	 a	 result	 7.80
                      path	 b	 result	 7.82
                    </data>
                  </priority>
                </typ>
              </parameters>

            </est_index>
          </est_type>

          <est_type name="power">
            <est_index name="static_power">
              <unit> mW </unit>
              <parameters name="default">
                <max>
                  <data bit_width="1"> 0.6849234 </data>
                  <data bit_width="4"> 12.7411 </data>
                  <data bit_width="8"> 21.5630 </data>
                  <data bit_width="16"> 79.7408 </data>
                  <data bit_width="32"> 165.9719 </data>
                  <data bit_width="256"> 1257.4 </data>
                </max>
                <min>
                  <data bit_width="1"> 0.5165148 </data>
                  <data bit_width="4"> 5.6595 </data>
                  <data bit_width="8"> 11.7048 </data>
                  <data bit_width="16"> 17.0774 </data>
                  <data bit_width="32"> 34.3149 </data>
                  <data bit_width="256"> 299.6914 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="1"> 0.5212214 </data>
                    <data bit_width="4"> 5.719 </data>
                    <data bit_width="8"> 11.8252 </data>
                    <data bit_width="16"> 18.0571 </data>
                    <data bit_width="32"> 35.9987 </data>
                    <data bit_width="256"> 318.6385 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="1"> 0.6849234 </data>
                    <data bit_width="4"> 12.7411 </data>
                    <data bit_width="8"> 21.5630 </data>
                    <data bit_width="16"> 79.7408 </data>
                    <data bit_width="32"> 165.9719 </data>
                    <data bit_width="256"> 1257.4 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="1"> 0.5165148 </data>
                    <data bit_width="4"> 5.6595 </data>
                    <data bit_width="8"> 11.7048 </data>
                    <data bit_width="16"> 17.0774 </data>
                    <data bit_width="32"> 34.3149 </data>
                    <data bit_width="256"> 299.6914 </data>
                  </priority>
                </typ>
              </parameters>
            </est_index>
          </est_type>

          <est_type name="function_cycle">
            <unit> cycle </unit>

            <est_index name="cycle">
              <parameters name="default">
                <function name="adc">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>
            </est_index>

            <est_index name="latency">
              <parameters name="default">
                <function name="adc">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>
            </est_index>

            <est_index name="throughput">
              <parameters name="default">
                <function name="adc">
                  <priority name="area"><data bit_width="0"></data></priority>
                  <priority name="delay"><data bit_width="0"></data></priority>
                  <priority name="power"><data bit_width="0"></data></priority>
                </function>
              </parameters>
            </est_index>

          </est_type>

          <est_type name="function_power">
            <!-- Dummy yet -->
          </est_type>
        </library>
      </estimation_data>

      <estimation_method>
         
        <est_type name="shape">

          <est_index name="area">

            <parameters name="default">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for adder(default) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Regression Methods by linear expression
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$n = $i;

# numerator 1
$nume_1 = 0.00;
for ($i = 0; $i < $n; $i++) {
    $nume_1 += $bit[$i] * $data[$i];
}
$nume_1 *= $n;

# numerator 2
$nume_2 = &sum(@bit) * &sum(@data);
    
# denominator 1
$deno_1 = 0.00;
for ($i = 0; $i < $n; $i++) {
    $deno_1 += $bit[$i] * $bit[$i];
}
$deno_1 *= $n;

# denominator 2
$deno_2 = &sum(@bit) * &sum(@bit);
	

# divide by zero
if ($deno_1 == $deno_2) {
    exit(100);
}
if ($n == 0) {
    exit(100);
}


$a = ($nume_1 - $nume_2) / ($deno_1 - $deno_2);
$b = (&sum(@data) - $a * &sum(@bit)) / $n;

$ret_data = $a * $ARGV[1] + $b;


sub sum
{
    my ( @data ) = @_;
    my ( $i );
    my ( $ret_data );

    $ret_data = 0.00;
    for ($i = 0; $i < @data; $i++) {
	$ret_data += $data[$i];
    }

    return($ret_data);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

          </est_index>

           <est_index name="aspect_ratio">

             <!-- Dummy yet -->

           </est_index>
		
           <est_index name="height">

             <!-- Dummy yet -->

           </est_index>
		
           <est_index name="width">

             <!-- Dummy yet -->

           </est_index>
		
        </est_type>

        <est_type name="timing">

          <est_index name="delay">

            <parameters name="default">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for adder(default) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Regression Methods by linear expression
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$n = $i;

# numerator 1
$nume_1 = 0.00;
for ($i = 0; $i < $n; $i++) {
    $nume_1 += $bit[$i] * $data[$i];
}
$nume_1 *= $n;

# numerator 2
$nume_2 = &sum(@bit) * &sum(@data);
    
# denominator 1
$deno_1 = 0.00;
for ($i = 0; $i < $n; $i++) {
    $deno_1 += $bit[$i] * $bit[$i];
}
$deno_1 *= $n;

# denominator 2
$deno_2 = &sum(@bit) * &sum(@bit);
	

# divide by zero
if ($deno_1 == $deno_2) {
    exit(100);
}
if ($n == 0) {
    exit(100);
}


$a = ($nume_1 - $nume_2) / ($deno_1 - $deno_2);
$b = (&sum(@data) - $a * &sum(@bit)) / $n;

$ret_data = $a * $ARGV[1] + $b;


sub sum
{
    my ( @data ) = @_;
    my ( $i );
    my ( $ret_data );

    $ret_data = 0.00;
    for ($i = 0; $i < @data; $i++) {
	$ret_data += $data[$i];
    }

    return($ret_data);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

          </est_index>

          <est_index name="delay_fullpath">

            <parameters name="default">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for adder(default) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

$Round = 1;

#--------------------------------------------------------------------------#
# Type: Regression Methods by linear expression for delay_fullpath
#--------------------------------------------------------------------------#
$n = 0;

while (<TMP>) {

    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {

	$bit_width = $1;
	$bit[$n] = $bit_width;
	$n++;
	$_ = <TMP>;
	
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {

	    # path 
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }

	    # inport
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # outport
	     if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }

	    # internal
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }

	    $_ = <TMP>;
	}
    }
}
close(TMP);

$line_num = $i;



for ($j = 0; $j < $line_num; $j++) {

    # numerator 1
    $nume_1 = 0.00;
    foreach $bit_width (@bit) {
	$nume_1 += $bit_width * $delay{$bit_width}[$j];
    }
    $nume_1 *= $n;

    # numerator 2
    $nume_2 = &sum(@bit);

    $tmp = 0.00;
    foreach $bit_width (@bit) {
	$tmp += $delay{$bit_width}[$j];
    }
    $nume_2 *= $tmp;
    
    # denominator 1
    $deno_1 = 0.00;
    for ($i = 0; $i < $n; $i++) {
	$deno_1 += $bit[$i] * $bit[$i];
    }
    $deno_1 *= $n;

    # denominator 2
    $deno_2 = &sum(@bit) * &sum(@bit);
    

    # divide by zero
    if ($deno_1 == $deno_2) {
	exit(100);
    }
    if ($n == 0) {
	exit(100);
    }


    # a
    $a = ($nume_1 - $nume_2) / ($deno_1 - $deno_2);

    # b
    $tmp = 0.00;
    foreach $bit_width (@bit) {
	$tmp += $delay{$bit_width}[$j];
    }
    $b = ($tmp - $a * &sum(@bit)) / $n;
    
    $ret_data = $a * $ARGV[1] + $b;
    $ret_data = &data_round($ret_data, $Round);
    
    print "$line{$bit[0]}[$j] $ret_data\n";
}

exit(0);


sub sum
{
    my ( @data ) = @_;
    my ( $i );
    my ( $return_data );

    $return_data = 0.00;
    for ($i = 0; $i < @data; $i++) {
	$return_data += $data[$i];
    }

    return($return_data);
}


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}
                ]]>
              </script>
            </parameters>
          </est_index>

        </est_type>

        <est_type name="power">

          <est_index name="static_power">

            <parameters name="default">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for adder(default) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[3]")) {
    print STDOUT ("Data file '$ARGV[3]' not found.\n");
    exit(100);
}

#--------------------------------------------------------------------------#
# Type: Table lookup
#--------------------------------------------------------------------------#
$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);

$bit_width = $ARGV[1];


for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	goto END;
    }
}

if ($bit_width < $bit[0]) {
    
    # divide by zero
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    

    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}

elsif ($bit[$i-1] < $bit_width) {

    # divide by zero
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }

    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}

else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }

    # divide by zero
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }

    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}
    

END:

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);


sub data_round 
{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));

    return($output_data);
}

                ]]>
              </script>
            </parameters>

          </est_index>

        </est_type>

        <est_type name="function_cycle">
          <est_index name="cycle">
            <parameters name="default">
              <script>
                <![CDATA[
#!/usr/bin/perl
print "0";
exit(0);
                ]]>
              </script>
            </parameters>
          </est_index>

          <est_index name="latency">
            <parameters name="default">
              <script>
                <![CDATA[
#!/usr/bin/perl
print "0";
exit(0);
                ]]>
              </script>
            </parameters>
          </est_index>

          <est_index name="throughput">
            <parameters name="default">
              <script>
                <![CDATA[
#!/usr/bin/perl
print "0";
exit(0);
                ]]>
              </script>
            </parameters>
          </est_index>

        </est_type>

        <est_type name="function_power">

        </est_type>

    
      </estimation_method>

    </estimation>


  </model>
</FHM>
