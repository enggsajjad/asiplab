Brownie v.1.1 Package
                                All Rights Reserved 2008. ASIP Solutions, Inc.
                                                                  2008/07/22


* Brownie v.1.1 can be generated on ASIP Meister Std v.2.3.


Contents of the packge===========================================================

[package/]  + README.txt
            + ReleaseNotes.txt
            + BrownieSTD32_Spec.pdf
            + browstd32.pdb
            + [fhm/]
            |   + browregfile.fhm
            |   + dummy_register.fhm
            + [util/]
            |   + gccout2img
            |   + pasout2img
            |   + img2mem
            |   + (Other supplementary scripts）
            + [testbench/]
            |   + README.txt
            |   + tb_*.vhd
            |   + wave_*.do
            + [src/]
                + t001.asm
                + browtb.x
                + startup.s
                + handler.s

    README.txt              This file
    ReleaseNotes.txt        Release note, known bugs
    BrownieSTD32_Spec.pdf   Specification of Brownie
    browstd32.pdb           PDB file of Brownie
    [fhm/]                  FHM for Brownie
    [util/]                 Utility script sample for Brownie
    [testbench/]            Simple test bench file for Brownie
    [src/]                  Simplified test codes for Brownie

* In the following, it is presumed that ASIP Meister is installed 
  in [/usr/local/ASIPmeister]. 



How to generate Brownie ==========================================================

1. FHM Installation

    * FHM for Brownie is pre-installed on ASIP Meister Std 2.3, this section 
      on the FHM installation can be skipped. 

    Copy [browregfile.fhm] and [dummy_register.fhm] in the [fhm/] directory 
    of the package to 

/usr/local/ASIPmeister/share/fhmdb/workdb/FHM_work

    To <class name="FHM_work"> in file 
    [/usr/local/ASIPmeister/share/fhmdb/fhmdbstruct] in reference to 
    [fhm/fhmdbstruct] provided in the package, add the content as follows. 

        <class name="FHM_work"> 
                :
                :
            <model>dummy_register</model>
            <model>browregfile</model>


2. Then, start ASIPmeister. By opening browstd32.pdb, the data of Brownie is read. 


3. Press [Assembler Generation] button for assembler generation, [HDL Generation] 
   for HDL generation. 
   Created files will be stored in the generation directory [meister/]. 


4. Press [Compiler Generation] button to generate a compiler. 
   Generated compilers are expanded in [meister/browstd32.swgen/]. 
   Set the path to [[meister/browstd32.swgen/bin/] for use. 



Simplified test=================================================================

How to test in VHDL version ----------------------------------------------------

    Refer to [testbench/README.txt] for memory map of simplified testbench etc. 

    Assemble t001.asm within testbench directory using pas. 

% pas -des browstd32.des -src t001.asm > t001.out

    pas is in [/usr/local/ASIPmeister/bin]. 
    brownie32.des is generated by selecting [Assembler Generation] on GUI 
    and located in generation directory [meister/]．

    Then, use pasout2img in the [util/] directory to convert assembled .out files to 

TestData.IM
TestData.DM

    Both are memory image referred to by tb_browstd32.vhd, test bench for VHDL. 
    The command for the conversion is as follows. 

% pasout2img t001.out

    To use the tools in the directory [util/], set the path to the directory 
    or copy them to the location where the path is set. 

    After memory image is created, by placing the following files in one directory, 
    simulation on ModelSim etc. is enabled. 


  Generated HDL [meister/browstd32.VHDL.syn/*.vhd] 
  Testbench     [testbench/tb_browstd32.vhd]
                [testbench/tb_im_mifu.vhd]
                [testbench/tb_dm_mifu.vhd]
  Program images created above TestData.IM and TestData.DM

    In the copied directory, execute 

% vlib work
% vcom *.vhd
% vsim work.cfg

    The do file [testbench/wave_vhdl.do] of/in ModelSim is available 
    on the console of ModelSim as described below in observing the waveform 
    if needed. 

VSIM 1 > do wave_vhdl.do



How to test Verilog version ----------------------------------------------------

    Refer to [testbench/README.txt] for memory map of simplified testbench etc. 

    Assemble t001.asm within testbench directory using pas. 

% pas -des browstd32.des -src t001.asm > t001.out

    pas is in [/usr/local/ASIPmeister/bin]. 
    brownie32.des is generated by selecting [Assembler Generation] on GUI 
    and located in generation directory [meister/]．

    Then, use pasout2img in the [util/] directory to convert assembled .out 
    files to 

TestData.IM
TestData.DM

    Both are memory image referred to by tb_browstd32.vhd, test bench for VHDL.
    The command for conversion is as follows. 

% pasout2img t001.out

    To use the tools in the directory [util/], set the path to the directory 
    or copy it to the location where the path is set. 

    After memory image is created, by placing the following files in one directory, 
    simulation on ModelSim etc. is enabled. 
    Use VHDL for/as testbench and run mixed simulation by ModelSim. 

  Generated HDL [meister/browstd32.Verilog.syn/*.v] 
  Testbench     [testbench/tb_browstd32.vhd]
                [testbench/tb_im_mifu.vhd]
                [testbench/tb_dm_mifu.vhd]
  Program images created above TestData.IM and TestData.DM

    In the copied directory, execute 

% vlib work
% vlog *.v
% vcom *.vhd
% vsim -novopt work.cfg

    The do file [testbench/wave_vlog.do] of ModelSim is provided, and can be used 
    if needed. 

VSIM 1 > do wave_vlog.do

    Compiled object file can be converted into .mem format for Verilog. 
    img2mem can be used in the same directory as TestData.?? output by pasout2img. 

% pasout2img main
% img2mem

    From TestData.IM and TestData.DM, img2mem outputs TestData.IM.mem 
    and TestData.DM.mem in .mem format .



How to use compiler ============================================================


    Attached in [util/] of the package are samples of utility script 
    (gccout2img，img2mem) to extract memory image from elf format 
    of the output of gcc. 
    Set the path to [util/] in advance to use utilities provided with the package. 

    Generate GCC set for BrownieSTD32 before setting the path to 
    [meister/browstd32.swgen/bin].


Normal Compilation -------------------------------------------------------------

% brownie32-elf-gcc -S main.c -o main.s
% brownie32-elf-as -o startup.o startup.s
% brownie32-elf-as -o handler.o handler.s
% brownie32-elf-as -o main.o main.s
% brownie32-elf-ld -o test -T browtb.x main.o startup.o handler.o

    Input the above commands in sequence to generate test (processor object code). 
    startup.s and handler.s are start up routine and itterrupt handler routine 
    respectively. They are linked according to linker script browtb.x
    startup.s, handler.s and browtb.x need to be prepare according to the user's 
    environment. 


Converting compiled object file to memory image of simplified test bench -------

    Use gccout2img for a file in elf format obtained through normal compilation.

% gccout2img test

    gccout2img outputs TestData.IM and TestData.DM, with which the user can 
    perform simplified test simulations. 


Converting compiled object file to memory format (.mem) for Verilog ------------

    img2mem is used in the same directory as TestData.?? output by gccout2img 
    or pasout2img. 

% gccout2img test
% img2mem

    img2mem outputs TestData.IM.mem and TestData.DM.mem from TestData.IM and 
    TestData.DM in .mem format. 

